# Fire22 Enterprise System - Bun Configuration
# Following Bun semver conventions with enterprise-grade versioning

# Runtime configuration for enterprise development
preload = ["./scripts/preload.ts"]
smol = false
logLevel = "warn"

# JSX configuration for React development
jsx = "react"
jsxFactory = "React.createElement"
jsxFragment = "React.Fragment"
jsxImportSource = "react"

# Define environment-specific constants
[define]
"process.env.NODE_ENV" = "'development'"
"process.env.FIRE22_ENV" = "'enterprise'"
"__DEV__" = "true"

# Custom file loaders for enterprise assets
[loader]
".fire22" = "ts"
".enterprise" = "tsx"
".config" = "json"

# Console output configuration
[console]
depth = 4

# Telemetry configuration (disabled for enterprise privacy)
telemetry = false

# Test runner configuration for enterprise testing
[test]
root = "./src"
preload = ["./test/setup.ts"]
smol = false
coverage = true

# Coverage thresholds for enterprise quality standards
coverageThreshold = { line = 0.8, function = 0.85, statement = 0.8 }

# Skip test files from coverage (avoid double-counting)
coverageSkipTestFiles = true

# Exclude configuration and build files from coverage
coveragePathIgnorePatterns = [
  "**/*.config.*",
  "**/*.d.ts",
  "**/build/**",
  "**/dist/**",
  "**/node_modules/**",
  "**/scripts/**",
  "**/test/**"
]

# Coverage reporters for different outputs
coverageReporter = ["text", "lcov", "html"]

# Custom coverage directory
coverageDir = "./coverage/fire22"

[install]
# Core registry configuration with authentication
registry = { url = "https://registry.npmjs.org", token = "$FIRE22_REGISTRY_TOKEN" }

# Installation behavior - enterprise defaults
dev = true
optional = true
peer = true
production = false

# Dependency version management
exact = false                    # Use caret ranges (^) for flexibility
frozenLockfile = false          # Allow lockfile updates in development
dryRun = false                  # Perform actual installations

# Lockfile and workspace configuration
saveTextLockfile = true         # Human-readable lockfiles for collaboration
linkWorkspacePackages = true    # Enable monorepo workspace linking
linker = "isolated"             # Strict dependency isolation for security

# Auto-install behavior
auto = "auto"                   # Smart auto-install for development

# Global package management
globalDir = "~/.bun/install/global"
globalBinDir = "~/.bun/bin"

# Enterprise scope configurations with authentication
[install.scopes]
"@fire22" = "https://npm.fire22.com/"
"@enterprise" = { token = "$FIRE22_ENTERPRISE_TOKEN", url = "https://npm.enterprise.com" }
"@private" = { username = "$FIRE22_PRIVATE_USER", password = "$FIRE22_PRIVATE_PASS", url = "https://npm.private.com" }

# Security: Only trust essential build tools and testing frameworks
[install.trustedDependencies]
esbuild = "*"           # Our bundler - trust all versions
vite = "^5.0.0"         # Development server - trust v5.x.x
playwright-core = "*"   # Testing framework - trust all versions
typescript = "^5.0.0"   # TypeScript compiler - trust v5.x.x

# Installation behavior - enterprise defaults
optional = false                    # Skip optional dependencies for lean installs
target = "bun-darwin-arm64"         # Force Apple Silicon binaries for consistency
lockfile = "bun.lockb"              # Use binary lockfile for performance
global = false                      # Disable global installs for security

# Enterprise installation flags
dryRun = false                      # Perform actual installations
force = false                       # Respect existing lockfile
frozenLockfile = false              # Allow lockfile updates in development
production = false                  # Include dev dependencies for development

# Exclude problematic packages (if any)
exclude = []                        # No packages excluded by default

# CA certificate configuration for enterprise proxies
cafile = "~/.bun/certs/ca-bundle.crt"

# Cache configuration for enterprise performance
[install.cache]
dir = "~/.bun/install/cache"
disable = false
disableManifest = false

# Lockfile configuration for enterprise reproducibility
[install.lockfile]
save = true
print = "yarn"                  # Generate yarn.lock for compatibility

# Security scanning configuration for enterprise-grade protection
[install.security]
# Enable comprehensive security scanning for all packages
# This protects against supply chain attacks and known vulnerabilities
scanner = "packages/fire22-security-scanner/src/index.ts"

# Security scanning behavior
# - "fatal": Stop installation on critical vulnerabilities
# - "warn": Show warnings but allow installation
level = "fatal"

# Enable security scanning for all package operations
# This includes bun install, bun add, bun remove, etc.
enable = true

# Additional security configuration
[install.security.options]
# Scan for license compliance issues
license_check = true

# Scan for known malicious packages
malware_scan = true

# Check for outdated dependencies with security fixes
vulnerability_check = true

# Enterprise security settings
enterprise_mode = true

# Custom security rules for Fire22
[install.security.fire22]
# Block packages from untrusted registries
trusted_registries_only = true

# Require security audits for new packages
require_audit = true

# Custom security policies
policies = [
    "no-typosquatting",
    "no-malicious-code",
    "license-compliance",
    "supply-chain-security"
]

# Run configuration for enterprise script execution
[run]
# Use Bun's shell for consistent behavior across platforms
shell = "bun"

# Auto-alias node to bun for seamless migration
bun = true

# Suppress command reporting for cleaner CI/CD output
silent = false

# Version Management Configuration
[version]
# Fire22 follows semantic versioning with Bun's enhanced conventions
# Format: MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]
# Example: 2.0.3-architecture+20241219

# Version bump strategies
major = ["BREAKING CHANGES", "major"]
minor = ["feat", "minor"]
patch = ["fix", "perf", "docs", "style", "refactor", "test", "build", "ci", "chore", "revert"]

# Pre-release identifiers for different environments
prerelease = ["alpha", "beta", "rc", "architecture", "testing", "development"]

# Build metadata for CI/CD tracking
build = ["timestamp", "commit", "pipeline"]

# Domain-specific versioning
[version.domains]
collections = "1.0.0"
balance = "1.0.0"
wager = "1.0.0"
settlement = "0.1.0-testing"
vip = "1.0.0"
user-management = "1.0.0"
fantasy42 = "1.0.0"
telegram = "1.0.0"
dashboard = "1.0.0"
health-monitoring = "1.0.0"
security = "1.0.0"
database = "1.0.0"

# Architecture versioning
[version.architecture]
domain-architecture = "2.3.0"
system-blueprint = "1.0.0"
technical-overview = "1.0.0"

# Release channels
[version.channels]
stable = "latest"
testing = "testing"
development = "dev"
architecture = "architecture"

# Dependencies version constraints
[version.dependencies]
bun = "^1.0.0"
typescript = "^5.0.0"
semver = "^7.0.0"

# Version validation rules
[version.validation]
require-changelog = true
require-tests = true
require-documentation = true
enforce-semantic-commits = true

# Test configuration for consistent timezone behavior
[test]
# Setup file for timezone and test environment configuration
preload = "./test-setup.ts"

# Bun test sets TZ to UTC by default for deterministic behavior
# This ensures consistent timezone handling across all tests
timezone = "UTC"

# Test environment settings
env.NODE_ENV = "test"
env.BUN_TEST_TIMEZONE = "UTC"

# Version automation
[version.automation]
auto-tag = true
auto-changelog = true
auto-release-notes = true
github-releases = true

# Path aliases for module resolution
[resolve.aliases]
"@ff" = "./"
"@ff/*" = "./*"
"@/*" = "./src/*"
"@/domains/*" = "./src/domains/*"
"@/shared/*" = "./src/shared/*"
"@/collections/*" = "./src/collections/*"
"@/interfaces/*" = "./src/interfaces/*"
"@/application/*" = "./src/application/*"

# Version metadata
[version.metadata]
organization = "Fire22"
project = "Enterprise System"
architecture = "Domain-Driven Design"
runtime = "Bun v1.x"
framework = "Crystal Clear Architecture"

# Dashboard Configuration
[dashboard]
# Enable dashboard serving in development
serve_dashboard = true
# Dashboard entry point
entry_point = "crystal-clear-architecture/dashboard.html"
# Development server port for dashboard
dev_port = 3001
# Hot reload for dashboard changes
hot_reload = true
# Enable dashboard API routes
enable_api_routes = true

# Dashboard Build Configuration
[dashboard.build]
# Output directory for built dashboard
output_dir = "dist/dashboard"
# Minify dashboard for production
minify = true
# Enable source maps for debugging
sourcemap = true
# Bundle all dashboard assets
bundle = true
# Target environment
target = "browser"

# Dashboard Development Server
[dashboard.dev]
# Enable live reload
live_reload = true
# Enable console logging from browser to terminal
console_bridge = true
# Enable error overlay
error_overlay = true
# CORS settings for API calls
cors = { enabled = true, origins = ["*"] }
# WebSocket port for hot reload
websocket_port = 3002

# Dashboard Routes Configuration
[dashboard.routes]
# Main dashboard route
"/dashboard" = "crystal-clear-architecture/dashboard.html"
# API routes for dashboard data
"/api/dashboard/*" = "src/api/dashboard-integration.ts"
# Static assets
"/assets/*" = "crystal-clear-architecture/assets/*"

# Dashboard Plugins
[dashboard.plugins]
# Enable TailwindCSS processing
tailwind = true
# Enable Chart.js bundling
chartjs = true
# Enable Alpine.js optimization
alpine = true
# Enable font awesome icons
fontawesome = true

# Dashboard Environment Variables
[dashboard.env]
# Dashboard version
DASHBOARD_VERSION = "5.0.0"
# API endpoints
DASHBOARD_API_URL = "https://dashboard-worker.brendawill2233.workers.dev/api"
# Real-time update interval (seconds)
UPDATE_INTERVAL = "5"
# Theme configuration
THEME_MODE = "dark"
# Brand colors
PRIMARY_COLOR = "#DC2626"
SECONDARY_COLOR = "#EA580C"
ACCENT_COLOR = "#CA8A04"

# 🔧 Serve Configuration (Development Server)
[serve]
# Enable development server features
development = true
# Port for development server
port = 3000
# Hostname for development server
hostname = "localhost"
# Enable hot module reloading
hmr = true
# Enable console logging from browser to terminal
console = true
# Enable error overlay in browser
error_overlay = true
# CORS settings for API development
cors = { enabled = true, origins = ["*"] }

# 📦 Bundle Configuration (Build System)
[bundle]
# Target environment for bundling
target = "browser"
# Output format
format = "esm"
# Enable minification
minify = { whitespace = true, identifiers = false, syntax = true }
# Enable source maps for debugging
sourcemap = "linked"
# External dependencies to exclude from bundle
external = ["node:*", "bun:*"]
# Code splitting strategy
splitting = true
# Enable tree shaking
tree_shaking = true
# Bundle analysis
analyze = true

# 🎨 CSS Configuration
[css]
# Enable CSS modules
modules = true
# PostCSS configuration
postcss = true
# CSS minification
minify = true
# Enable CSS source maps
sourcemap = true
# Tailwind CSS configuration
tailwind = { enabled = true, config = "tailwind.config.js" }

# 📱 Plugin Configuration
[plugins]
# Tailwind CSS plugin
"bun-plugin-tailwind" = { enabled = true }
# CSS optimization plugins
"postcss-preset-env" = { enabled = true, stage = 0 }
# Image optimization
"bun-plugin-imagemin" = { enabled = true, quality = 80 }

# 🧩 Macro Configuration
[macro]
# Enable JSX macros
jsx = true
# Custom macro definitions
FIRE22_ENV = "'production'"
BUILD_TIME = "new Date().toISOString()"
VERSION = "require('./package.json').version"

# 🔄 Transpiler Configuration
[transpiler]
# TypeScript configuration
typescript = { target = "es2020", module = "esm" }
# JSX configuration
jsx = { pragma = "React.createElement", pragmaFrag = "React.Fragment" }
# JavaScript features to enable
features = ["async-await", "optional-chaining", "nullish-coalescing"]
# Enable experimental features
experimental = { decorators = true, classFields = true }

# 📊 Analytics & Monitoring
[analytics]
# Enable build analytics
enabled = true
# Analytics output directory
output_dir = "./analytics"
# Performance metrics
performance = { enabled = true, detailed = true }
# Bundle size analysis
bundle_size = { enabled = true, threshold = "500KB" }
# Dependency analysis
dependencies = { enabled = true, circular_check = true }

# 🔐 Security Configuration
[security]
# Enable security scanning
scanning = true
# Security audit level
audit_level = "high"
# Block malicious packages
block_malicious = true
# Check for vulnerabilities
vulnerability_check = true
# License compliance
license_check = true
# Code signing
code_signing = { enabled = true, certificate = "~/.bun/certificates/code-signing.pem" }

# 🚀 Performance Configuration
[performance]
# Enable performance optimizations
optimizations = true
# Preload critical resources
preload = ["./src/index.ts", "./src/styles/index.css"]
# Bundle splitting strategy
splitting = { chunks = "async", vendor = true }
# Caching strategy
cache = { enabled = true, strategy = "aggressive" }
# Compression
compression = { enabled = true, algorithm = "gzip" }

# 📝 Logging Configuration
[logging]
# Log level
level = "info"
# Log format
format = "json"
# Log output destinations
outputs = ["console", "file"]
# Log file configuration
file = { path = "./logs/bun.log", max_size = "10MB", rotation = "daily" }
# Structured logging
structured = true

# 🧪 Testing Configuration (Enhanced)
[test]
# Test runner configuration
runner = "bun:test"
# Timeout for tests (milliseconds)
timeout = 10000
# Enable parallel test execution
parallel = true
# Number of parallel workers
workers = 4
# Test file patterns
patterns = ["**/*.test.ts", "**/*.spec.ts", "**/__tests__/**/*.ts"]
# Setup files
setup = ["./test/setup.ts"]
# Global test configuration
globals = { describe = true, it = true, expect = true, beforeEach = true, afterEach = true }

# 📦 Package Management (Advanced)
[package]
# Custom registry configuration
registry = { url = "https://registry.npmjs.org", auth = "$NPM_TOKEN" }
# Package resolution strategy
resolution = "highest"
# Peer dependency handling
peer_deps = { auto_install = true, strict = false }
# Lockfile configuration
lockfile = { format = "bun", validate = true, prune = true }
# Dependency overrides
overrides = { "react" = "^18.0.0", "typescript" = "^5.0.0" }

# 🌍 Environment Configuration
[env]
# Default environment variables
NODE_ENV = "development"
BUN_ENV = "development"
FIRE22_ENV = "enterprise"
# Environment-specific overrides
[env.production]
NODE_ENV = "production"
BUN_ENV = "production"
DEBUG = false
LOG_LEVEL = "warn"

[env.development]
NODE_ENV = "development"
BUN_ENV = "development"
DEBUG = true
LOG_LEVEL = "debug"

# 🔧 Development Tools
[dev]
# Enable development tools
tools = true
# Hot reload configuration
hot_reload = { enabled = true, watch = ["src/**/*", "public/**/*"] }
# Development server configuration
server = { port = 3000, host = "localhost", https = false }
# Debugging configuration
debug = { enabled = true, breakpoints = true, inspector = true }
# Profiling configuration
profile = { enabled = true, heap = true, cpu = true }
# Debugger integration
debugger = { enabled = true, port = 9229 }
# Profiler integration
profiler = { enabled = true, port = 9230 }
# REPL integration
repl = { enabled = true, history_file = "./.bun_repl_history" }

# 📋 Task Configuration
[task]
# Custom build tasks
build = { command = "bun run build", watch = ["src/**/*"] }
# Development task
dev = { command = "bun run dev", watch = ["src/**/*", "public/**/*"] }
# Test task
test = { command = "bun test", watch = ["src/**/*", "test/**/*"] }
# Lint task
lint = { command = "bun run lint", watch = ["src/**/*"] }

# 🔗 Integration Configuration
[integrations]
# External service integrations
github = { enabled = true, token = "$GITHUB_TOKEN" }
# Cloudflare Workers integration
cloudflare = { enabled = true, account_id = "$CF_ACCOUNT_ID", api_token = "$CF_API_TOKEN" }
# Database integrations
database = { type = "sqlite", path = "./data/app.db" }
# API integrations
api = { base_url = "https://api.fire22.com", timeout = 5000 }

# 📊 Metrics & Monitoring
[metrics]
# Enable metrics collection
enabled = true
# Metrics collection interval
interval = "30s"
# Metrics output format
format = "prometheus"
# Custom metrics
custom = [
  { name = "build_time", type = "histogram" },
  { name = "bundle_size", type = "gauge" },
  { name = "test_coverage", type = "gauge" }
]

# 🏗️ Build Pipeline Configuration
[pipeline]
# Build stages
stages = ["lint", "test", "build", "deploy"]
# Parallel execution
parallel = true
# Cache configuration
cache = { enabled = true, paths = [".bun/cache", "node_modules/.cache"] }
# Artifact storage
artifacts = { enabled = true, path = "./artifacts", retention = "30d" }

# 🎯 Quality Assurance
[quality]
# Code quality checks
checks = ["lint", "format", "security", "performance"]
# Quality gates
gates = [
  { metric = "test_coverage", operator = ">=", value = 80 },
  { metric = "bundle_size", operator = "<=", value = "2MB" },
  { metric = "security_score", operator = ">=", value = 90 }
]
# Automated fixes
auto_fix = { enabled = true, rules = ["format", "imports"] }

# 🚀 Deployment Configuration
[deploy]
# Deployment targets
targets = ["preview", "production"]
# Deployment strategy
strategy = "rolling"
# Health checks
health_checks = { enabled = true, endpoint = "/health", timeout = "30s" }
# Rollback configuration
rollback = { enabled = true, automatic = true, threshold = 50 }

# 📚 Documentation Configuration
[docs]
# Auto-generate documentation
auto_generate = true
# Documentation format
format = "markdown"
# API documentation
api_docs = { enabled = true, output = "./docs/api" }
# Component documentation
component_docs = { enabled = true, output = "./docs/components" }

# Dashboard Development Commands
[dashboard.scripts]
# Start dashboard development server
"dev" = "bun run scripts/serve-dashboard-dev.ts"
# Build dashboard for production
"build" = "bun run scripts/build-dashboard.ts"
# Preview production build
"preview" = "bun run scripts/preview-dashboard.ts"
# Test dashboard functionality
"test" = "bun run scripts/test-dashboard.ts"

# 🚀 Advanced CLI Features & Build Configuration
[cli]
# Enable advanced CLI features
advanced_features = true

# User-Agent Customization
[user-agent]
# Custom User-Agent string for all HTTP requests
custom_agent = "CrystalClearArchitecture/2.0.0"
# Enable User-Agent override for fetch requests
override_default = true
# User-Agent rotation (for anti-detection)
rotation_enabled = false
# User-Agent pool for rotation
agent_pool = [
  "CrystalClearArchitecture/2.0.0",
  "Mozilla/5.0 (compatible; CrystalClear/2.0)",
  "CrystalClear-Bot/2.0.0 (+https://github.com/nolarose1968-pixel/crystal-clear-architecture)"
]
# Rotation interval in minutes
rotation_interval_minutes = 60

# Build & Compilation Configuration
[build]
# Enable advanced build features
advanced_build = true

# Executable Compilation Settings
[build.compile]
# Enable executable compilation
enabled = true
# Default target platform
default_target = "bun-linux-x64"
# Cross-compilation targets
cross_compile_targets = [
  "bun-linux-x64",
  "bun-linux-x64-musl",
  "bun-linux-arm64",
  "bun-windows-x64",
  "bun-macos-x64",
  "bun-macos-arm64"
]
# Optimize for size
optimize_size = true
# Optimize for speed
optimize_speed = true
# Enable dead code elimination
dead_code_elimination = true

# Embedded Runtime Arguments
[build.compile.exec_argv]
# Embed runtime flags into executables
enabled = true
# Embedded arguments (applied at runtime)
embedded_args = [
  "--smol",
  "--user-agent=CrystalClearArchitecture/2.0.0"
]
# Make embedded args inspectable via process.execArgv
expose_exec_argv = true

# Windows Executable Metadata
[build.compile.windows]
# Enable Windows-specific settings
windows_enabled = true
# Application metadata
title = "Crystal Clear Architecture"
publisher = "Fire22 Enterprise"
version = "2.0.0.0"
description = "Enterprise-grade interactive hub with advanced analytics and automation"
copyright = "© 2024 Fire22 Enterprise. All rights reserved."
# Icon configuration
icon_path = "./assets/crystal-clear-icon.ico"
# Digital signature
sign_executable = false
certificate_path = "~/.bun/certificates/code-signing.pfx"
certificate_password = "$WINDOWS_CERT_PASSWORD"

# macOS Executable Settings
[build.compile.macos]
# Enable macOS-specific settings
macos_enabled = true
# Bundle identifier
bundle_id = "com.fire22.crystalclear"
# Category
category = "public.app-category.business"
# Minimum macOS version
minimum_version = "12.0"
# Enable sandbox
sandbox_enabled = false
# Code signing
codesign_enabled = false
codesign_identity = "Developer ID Application"

# Linux Executable Settings
[build.compile.linux]
# Enable Linux-specific settings
linux_enabled = true
# Use musl instead of glibc (more portable)
use_musl = true
# Static linking
static_linking = true
# Include debug symbols
debug_symbols = false

# Build Optimization Settings
[build.optimization]
# Enable all optimizations
all_optimizations = true
# Tree shaking level
tree_shaking = "aggressive"
# Minification settings
minification = { whitespace = true, identifiers = true, syntax = true }
# Bundle splitting
bundle_splitting = { enabled = true, strategy = "async" }
# External dependencies
external_dependencies = ["node:*", "bun:*"]
# Code analysis
code_analysis = { enabled = true, complexity_check = true }

# Development Build Settings
[build.dev]
# Hot reload configuration
hot_reload = { enabled = true, watch_paths = ["src/**/*", "public/**/*"] }
# Source maps for debugging
source_maps = "linked"
# Development server
dev_server = { port = 3000, host = "localhost", https = false }
# Console bridging
console_bridge = true
# Error overlay
error_overlay = true

# Production Build Settings
[build.production]
# Production optimizations
production_optimizations = true
# Bundle analyzer
bundle_analyzer = { enabled = true, output_dir = "./build-analysis" }
# Performance monitoring
performance_monitoring = true
# Asset optimization
asset_optimization = { images = true, fonts = true, css = true }
# Compression
compression = { enabled = true, algorithm = "gzip", level = 6 }

# Plugin Configuration
[build.plugins]
# Enable plugin system
enabled = true
# Tailwind CSS plugin
tailwind = { enabled = true, config = "tailwind.config.js" }
# CSS optimization
postcss = { enabled = true, plugins = ["autoprefixer", "cssnano"] }
# Image optimization
imagemin = { enabled = true, quality = 85 }
# Bundle analysis
webpack_bundle_analyzer = { enabled = true, open_browser = false }

# Runtime Configuration
[runtime]
# Enable advanced runtime features
advanced_runtime = true

# Memory Management
[runtime.memory]
# Memory optimization
optimization_enabled = true
# Garbage collection tuning
gc_tuning = { enabled = true, strategy = "balanced" }
# Memory limits
heap_limit_mb = 1024
# Memory monitoring
monitoring_enabled = true

# Network Configuration
[runtime.network]
# HTTP client settings
http_client = { timeout = 30000, keep_alive = true }
# DNS resolution
dns_resolution = { cache_enabled = true, ttl_seconds = 300 }
# SSL/TLS configuration
tls_config = { verify_certificates = true, min_version = "1.2" }

# File System Operations
[runtime.fs]
# File watching
watcher_enabled = true
# File caching
cache_enabled = true
# Path resolution
path_resolution = { strict = false, case_sensitive = false }

# Process Management
[runtime.process]
# Process monitoring
monitoring_enabled = true
# Child process management
child_process = { max_concurrent = 10, timeout_seconds = 300 }
# Signal handling
signal_handling = { enabled = true, graceful_shutdown = true }

# Error Handling & Recovery
[runtime.error_handling]
# Global error handling
global_error_handler = true
# Automatic recovery
auto_recovery = { enabled = true, max_retries = 3 }
# Error reporting
error_reporting = { enabled = true, endpoint = "https://errors.fire22.com/report" }

# Performance Profiling
[runtime.profiling]
# Enable profiling
enabled = true
# Profiling modes
modes = ["cpu", "memory", "network"]
# Profiling output
output_dir = "./performance-profiles"
# Sampling rate
sampling_rate_hz = 1000

# Security Configuration
[runtime.security]
# Security hardening
hardening_enabled = true
# Sandbox mode
sandbox_enabled = false
# Privilege dropping
drop_privileges = { enabled = true, user = "nobody", group = "nogroup" }
# Audit logging
audit_logging = { enabled = true, log_file = "./security-audit.log" }

# Internationalization (i18n)
[runtime.i18n]
# Enable i18n
enabled = true
# Default locale
default_locale = "en-US"
# Supported locales
supported_locales = ["en-US", "es-ES", "fr-FR", "de-DE", "zh-CN", "ja-JP"]
# Locale data directory
locale_data_dir = "./locales"
# Fallback locale
fallback_locale = "en-US"

# Telemetry & Analytics
[runtime.telemetry]
# Enable telemetry
enabled = false
# Telemetry endpoint
endpoint = "https://telemetry.fire22.com/collect"
# Data collection
data_collection = { performance = true, errors = true, usage = false }
# Sampling rate
sampling_rate = 0.1
# Retention period
retention_days = 90

# Experimental Features
[runtime.experimental]
# Enable experimental features
enabled = false
# Feature flags
features = [
  "top-level-await",
  "import-assertions",
  "json-modules",
  "css-modules",
  "webassembly"
]
# Feature overrides
overrides = { }



# Testing Framework Integration
[test.framework]
# Enable testing framework
enabled = true
# Test runner
runner = "bun:test"
# Test configuration
config = { timeout = 10000, parallel = true, workers = 4 }
# Coverage configuration
coverage = { enabled = true, reporter = ["text", "lcov", "html"] }
# Integration testing
integration = { enabled = true, base_url = "http://localhost:3000" }

# Package Management Integration
[package.manager]
# Enable package manager features
enabled = true
# Registry configuration
registry = { url = "https://registry.npmjs.org", auth_required = false }
# Dependency management
dependencies = { auto_update = false, security_audit = true }
# Lockfile management
lockfile = { validate = true, auto_fix = false }

# Cloud Integration
[cloud]
# Enable cloud features
enabled = false
# Cloud provider
provider = "aws" # aws, gcp, azure, cloudflare
# Deployment configuration
deployment = { region = "us-east-1", environment = "production" }
# CDN integration
cdn = { enabled = false, provider = "cloudflare" }
# Database integration
database = { enabled = false, provider = "postgresql" }

# Monitoring & Alerting
[monitoring]
# Enable monitoring
enabled = true
# Monitoring provider
provider = "datadog" # datadog, newrelic, prometheus, cloudwatch
# Metrics collection
metrics = { enabled = true, interval_seconds = 60 }
# Alerting configuration
alerting = { enabled = true, slack_webhook = "$SLACK_WEBHOOK_URL" }
# Log aggregation
logging = { enabled = true, retention_days = 30 }

# Backup & Recovery
[backup]
# Enable backup system
enabled = true
# Backup schedule
schedule = "0 2 * * *" # Daily at 2 AM
# Backup retention
retention_days = 30
# Backup location
location = { type = "s3", bucket = "fire22-backups", region = "us-east-1" }
# Encryption
encryption = { enabled = true, key_id = "$BACKUP_ENCRYPTION_KEY" }

# Disaster Recovery
[disaster_recovery]
# Enable disaster recovery
enabled = true
# Recovery time objective (RTO)
rto_minutes = 60
# Recovery point objective (RPO)
rpo_minutes = 15
# Multi-region deployment
multi_region = { enabled = false, regions = ["us-east-1", "us-west-2"] }
# Failover configuration
failover = { enabled = true, automatic = true, test_frequency = "weekly" }
