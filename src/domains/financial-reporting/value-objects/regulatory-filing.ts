/**
 * Regulatory Filing Value Object
 * Domain-Driven Design Implementation
 *
 * Represents regulatory filings and compliance submissions
 */

import { ValueObject } from "../../shared/value-object";
import { DomainError } from "../../shared/domain-entity";
import { AccountingPeriod } from "./accounting-period";

export enum FilingStatus {
  PENDING = "pending",
  SUBMITTED = "submitted",
  ACCEPTED = "accepted",
  REJECTED = "rejected",
  UNDER_REVIEW = "under_review",
  AMENDED = "amended",
  WITHDRAWN = "withdrawn",
}

export enum FilingType {
  // IRS Filings
  FORM_1099 = "form_1099",
  FORM_1096 = "form_1096",
  FORM_8300 = "form_8300",
  FORM_1120 = "form_1120",
  FORM_941 = "form_941",

  // FinCEN Filings
  SAR = "sar", // Suspicious Activity Report
  CTR = "ctr", // Currency Transaction Report
  BSA_REPORT = "bsa_report",

  // SEC Filings
  FORM_10K = "form_10k",
  FORM_10Q = "form_10q",
  FORM_8K = "form_8k",

  // State Filings
  STATE_TAX_RETURN = "state_tax_return",
  SALES_TAX_REPORT = "sales_tax_report",
  BUSINESS_LICENSE = "business_license",

  // Other Regulatory
  AML_REPORT = "aml_report",
  KYC_REPORT = "kyc_report",
  PCI_REPORT = "pci_report",
}

export enum RegulatoryBody {
  IRS = "irs",
  FINCEN = "fincen",
  SEC = "sec",
  FDIC = "fdic",
  OCC = "occ",
  CFPB = "cfpb",
  STATE_AG = "state_ag",
  LOCAL_AGENCY = "local_agency",
}

export enum FilingPriority {
  LOW = "low",
  NORMAL = "normal",
  HIGH = "high",
  CRITICAL = "critical",
  EMERGENCY = "emergency",
}

export class RegulatoryFiling extends ValueObject {
  private readonly _id: string;
  private readonly _filingType: FilingType;
  private readonly _regulatoryBody: RegulatoryBody;
  private readonly _period: AccountingPeriod;
  private readonly _dueDate: Date;
  private readonly _description: string;
  private readonly _priority: FilingPriority;
  private readonly _isMandatory: boolean;
  private readonly _thresholdAmount?: number;
  private readonly _metadata: Record<string, any>;
  private readonly _createdAt: Date;

  constructor(params: RegulatoryFilingParams) {
    super();
    this.validateFiling(params);

    this._id = params.id;
    this._filingType = params.filingType;
    this._regulatoryBody = params.regulatoryBody;
    this._period = params.period;
    this._dueDate = new Date(params.dueDate);
    this._description = params.description;
    this._priority = params.priority || FilingPriority.NORMAL;
    this._isMandatory = params.isMandatory ?? true;
    this._thresholdAmount = params.thresholdAmount;
    this._metadata = { ...params.metadata };
    this._createdAt = new Date(params.createdAt);
  }

  static create(params: {
    id: string;
    filingType: FilingType;
    regulatoryBody: RegulatoryBody;
    period: AccountingPeriod;
    dueDate: Date;
    description: string;
    priority?: FilingPriority;
    isMandatory?: boolean;
    thresholdAmount?: number;
    metadata?: Record<string, any>;
  }): RegulatoryFiling {
    return new RegulatoryFiling({
      ...params,
      createdAt: new Date(),
    });
  }

  // Getters
  getId(): string {
    return this._id;
  }
  getFilingType(): FilingType {
    return this._filingType;
  }
  getRegulatoryBody(): RegulatoryBody {
    return this._regulatoryBody;
  }
  getPeriod(): AccountingPeriod {
    return this._period;
  }
  getDueDate(): Date {
    return new Date(this._dueDate);
  }
  getDescription(): string {
    return this._description;
  }
  getPriority(): FilingPriority {
    return this._priority;
  }
  getIsMandatory(): boolean {
    return this._isMandatory;
  }
  getThresholdAmount(): number | undefined {
    return this._thresholdAmount;
  }
  getMetadata(): Record<string, any> {
    return { ...this._metadata };
  }
  getCreatedAt(): Date {
    return new Date(this._createdAt);
  }

  // Business Logic Methods
  isOverdue(): boolean {
    return new Date() > this._dueDate;
  }

  daysUntilDue(): number {
    const now = new Date();
    const diffTime = this._dueDate.getTime() - now.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  isDueSoon(daysThreshold: number = 30): boolean {
    const daysUntilDue = this.daysUntilDue();
    return daysUntilDue >= 0 && daysUntilDue <= daysThreshold;
  }

  requiresImmediateAttention(): boolean {
    return (
      this.isOverdue() ||
      this._priority === FilingPriority.CRITICAL ||
      this._priority === FilingPriority.EMERGENCY
    );
  }

  canBeAutoGenerated(): boolean {
    // Some filing types can be auto-generated based on transaction data
    const autoGeneratableTypes = [
      FilingType.FORM_1099,
      FilingType.SAR,
      FilingType.CTR,
      FilingType.AML_REPORT,
    ];

    return autoGeneratableTypes.includes(this._filingType);
  }

  getFilingFrequency(): "one-time" | "periodic" {
    // Determine if this is a one-time or periodic filing
    switch (this._filingType) {
      case FilingType.FORM_10K:
      case FilingType.FORM_1120:
        return "one-time";
      case FilingType.FORM_941:
      case FilingType.FORM_10Q:
      case FilingType.SALES_TAX_REPORT:
        return "periodic";
      default:
        return "periodic";
    }
  }

  getEstimatedPreparationTime(): number {
    // Estimated preparation time in hours based on filing type
    const estimates: Record<FilingType, number> = {
      [FilingType.FORM_1099]: 2,
      [FilingType.FORM_1096]: 1,
      [FilingType.FORM_8300]: 4,
      [FilingType.FORM_1120]: 40,
      [FilingType.FORM_941]: 8,
      [FilingType.SAR]: 16,
      [FilingType.CTR]: 4,
      [FilingType.BSA_REPORT]: 12,
      [FilingType.FORM_10K]: 160,
      [FilingType.FORM_10Q]: 80,
      [FilingType.FORM_8K]: 24,
      [FilingType.STATE_TAX_RETURN]: 20,
      [FilingType.SALES_TAX_REPORT]: 6,
      [FilingType.BUSINESS_LICENSE]: 4,
      [FilingType.AML_REPORT]: 32,
      [FilingType.KYC_REPORT]: 12,
      [FilingType.PCI_REPORT]: 16,
    };

    return estimates[this._filingType] || 8; // Default 8 hours
  }

  getRequiredDocuments(): string[] {
    // Documents required for this filing type
    const requirements: Record<FilingType, string[]> = {
      [FilingType.FORM_1099]: [
        "transaction_records",
        "payee_information",
        "tax_id_verification",
      ],
      [FilingType.FORM_8300]: [
        "cash_transaction_details",
        "customer_identification",
        "source_of_funds",
      ],
      [FilingType.SAR]: [
        "transaction_details",
        "customer_profile",
        "supporting_evidence",
        "narrative",
      ],
      [FilingType.CTR]: [
        "transaction_details",
        "customer_identification",
        "cash_amount_verification",
      ],
      [FilingType.FORM_1120]: [
        "financial_statements",
        "income_records",
        "expense_records",
        "balance_sheet",
      ],
      [FilingType.FORM_941]: [
        "payroll_records",
        "employee_information",
        "tax_withholdings",
      ],
      // Add more filing type requirements...
    };

    return (
      requirements[this._filingType] || [
        "financial_records",
        "supporting_documentation",
      ]
    );
  }

  // Utility Methods
  toJSON(): any {
    return {
      id: this._id,
      filingType: this._filingType,
      regulatoryBody: this._regulatoryBody,
      period: this._period.toJSON(),
      dueDate: this._dueDate.toISOString(),
      description: this._description,
      priority: this._priority,
      isMandatory: this._isMandatory,
      thresholdAmount: this._thresholdAmount,
      metadata: this._metadata,
      createdAt: this._createdAt.toISOString(),
      isOverdue: this.isOverdue(),
      daysUntilDue: this.daysUntilDue(),
      requiresAttention: this.requiresImmediateAttention(),
      canAutoGenerate: this.canBeAutoGenerated(),
      estimatedPrepTime: this.getEstimatedPreparationTime(),
      requiredDocuments: this.getRequiredDocuments(),
    };
  }

  equals(other: ValueObject): boolean {
    if (!(other instanceof RegulatoryFiling)) return false;
    return this._id === other._id;
  }

  private validateFiling(params: RegulatoryFilingParams): void {
    if (!params.id || typeof params.id !== "string") {
      throw new DomainError("Filing ID is required", "INVALID_FILING_ID");
    }

    if (!Object.values(FilingType).includes(params.filingType)) {
      throw new DomainError(
        "Valid filing type is required",
        "INVALID_FILING_TYPE",
      );
    }

    if (!Object.values(RegulatoryBody).includes(params.regulatoryBody)) {
      throw new DomainError(
        "Valid regulatory body is required",
        "INVALID_REGULATORY_BODY",
      );
    }

    if (!params.period || !(params.period instanceof AccountingPeriod)) {
      throw new DomainError(
        "Valid accounting period is required",
        "INVALID_PERIOD",
      );
    }

    if (!params.dueDate) {
      throw new DomainError("Due date is required", "INVALID_DUE_DATE");
    }

    if (params.dueDate <= new Date()) {
      throw new DomainError(
        "Due date must be in the future",
        "INVALID_DUE_DATE",
      );
    }

    if (!params.description || params.description.trim().length === 0) {
      throw new DomainError("Description is required", "INVALID_DESCRIPTION");
    }

    if (params.thresholdAmount !== undefined && params.thresholdAmount < 0) {
      throw new DomainError(
        "Threshold amount cannot be negative",
        "INVALID_THRESHOLD",
      );
    }
  }
}

// Filing Template Factory
export class RegulatoryFilingFactory {
  static createMonthlyTaxReport(
    period: AccountingPeriod,
    regulatoryBody: RegulatoryBody = RegulatoryBody.IRS,
  ): RegulatoryFiling {
    const dueDate = new Date(period.getEndDate());
    dueDate.setDate(dueDate.getDate() + 15); // 15 days after period end

    return RegulatoryFiling.create({
      id: `filing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      filingType: FilingType.FORM_941,
      regulatoryBody,
      period,
      dueDate,
      description: `Monthly tax report for ${period.getDisplayName()}`,
      priority: FilingPriority.HIGH,
      isMandatory: true,
      metadata: {
        formNumber: "941",
        frequency: "monthly",
      },
    });
  }

  static createSARFiling(
    transactionId: string,
    amount: number,
    reason: string,
    period: AccountingPeriod,
  ): RegulatoryFiling {
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 30); // 30 days to file SAR

    return RegulatoryFiling.create({
      id: `sar_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      filingType: FilingType.SAR,
      regulatoryBody: RegulatoryBody.FINCEN,
      period,
      dueDate,
      description: `Suspicious Activity Report - Transaction ${transactionId}`,
      priority: FilingPriority.CRITICAL,
      isMandatory: true,
      thresholdAmount: amount,
      metadata: {
        transactionId,
        reason,
        amount,
      },
    });
  }

  static createAnnualReport(
    period: AccountingPeriod,
    regulatoryBody: RegulatoryBody = RegulatoryBody.IRS,
  ): RegulatoryFiling {
    const dueDate = new Date(period.getEndDate());
    dueDate.setMonth(dueDate.getMonth() + 4); // 4 months after fiscal year end

    return RegulatoryFiling.create({
      id: `filing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      filingType: FilingType.FORM_1120,
      regulatoryBody,
      period,
      dueDate,
      description: `Annual corporate tax return for ${period.getDisplayName()}`,
      priority: FilingPriority.CRITICAL,
      isMandatory: true,
      metadata: {
        formNumber: "1120",
        frequency: "annual",
      },
    });
  }
}

export interface RegulatoryFilingParams {
  id: string;
  filingType: FilingType;
  regulatoryBody: RegulatoryBody;
  period: AccountingPeriod;
  dueDate: Date;
  description: string;
  priority?: FilingPriority;
  isMandatory?: boolean;
  thresholdAmount?: number;
  metadata?: Record<string, any>;
  createdAt: Date;
}
