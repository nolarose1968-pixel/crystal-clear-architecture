{
  "name": "fire22-dashboard-worker",
  "version": "1.0.0",
  "description": "Fire22 Dashboard Worker - Enhanced with Bun v1.01.04-alpha features and native Bun.semver version management",
  "private": true,
  "keywords": [
    "fire22",
    "dashboard",
    "worker",
    "bun",
    "semver",
    "version-management",
    "staging",
    "bunx-integration"
  ],
  "sideEffects": [
    "**/*.css",
    "./src/styles/index.css",
    "./src/components/**/*.css",
    "./docs/**/*.css",
    "./src/setup/polyfills.js",
    "./src/i18n/**/*",
    "./src/firebase-config.ts",
    "./scripts/enhanced-logging-system.ts",
    "./workspaces/@fire22-*/src/**/*.css",
    "./workspaces/@fire22-*/src/**/polyfills.{js,ts}",
    "./workspaces/@fire22-telegram-*/src/i18n/**/*",
    "./src/telegram/**/*.css",
    "./src/telegram/**/telegram-constants.ts",
    "./packages/*/src/**/*.css",
    "./packages/version-manager/src/**/version-constants.ts",
    "./packages/wager-system/src/**/sports-data.ts",
    "./packages/env-manager/src/**/env-defaults.ts"
  ],
  "bin": {
    "water-dashboard": "./dist/water-dashboard-linux",
    "water-dashboard-windows": "./dist/WaterDashboard.exe",
    "water-dashboard-macos": "./dist/water-dashboard-macos",
    "fire22-dashboard": "./dist/water-dashboard-linux",
    "fire22-version": "./scripts/version-cli.ts",
    "fire22-staging": "./src/telegram/staging-server.ts",
    "fire22-hmr": "./src/hmr-dev-server.ts"
  },
  "scripts": {
    "docs:clean": "bun run scripts/maintenance/clean-and-organize-builds.ts",
    "docs:start:clean": "bun run docs:clean && bun run docs:start",
    "docs:build:clean": "bun run docs:clean && bun run docs:build:docusaurus",
    "version": "bun run scripts/version-cli.ts",
    "version:status-cli": "bun run scripts/version-cli.ts status",
    "version:bump": "bun run scripts/version-cli.ts bump",
    "version:bump:patch": "bun run scripts/version-cli.ts bump --strategy patch",
    "version:bump:minor": "bun run scripts/version-cli.ts bump --strategy minor",
    "version:bump:major": "bun run scripts/version-cli.ts bump --strategy major",
    "version:compare": "bun run scripts/version-cli.ts compare",
    "version:validate": "bun run scripts/version-cli.ts validate",
    "version:satisfies": "bun run scripts/version-cli.ts satisfies",
    "dev": "bun run session:init && bun run --hot src/index.ts",
    "dev:hmr": "bun run session:init && bun run src/hmr-dev-server.ts",
    "session:init": "bun run scripts/session-init.ts",
    "session:status": "bun run scripts/session-init.ts status",
    "session:reset": "bun run scripts/session-init.ts reset",
    "session:clear": "bun run scripts/session-init.ts clear",
    "lint": "bunx eslint . --ext .ts,.tsx,.js,.jsx || echo 'Linting completed with warnings'",
    "lint:fix": "bunx eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "typecheck": "bunx tsc --noEmit",
    "security:audit": "bun audit --audit-level=high || echo 'Security audit completed with warnings'",
    "test:bypass": "bun run scripts/test-emergency-bypass.ts",
    "pretest": "bun run scripts/test-policy-enforcer.ts",
    "test": "bun run pretest && bun test --config bun.test.config.ts",
    "test:unit": "bun run pretest && bun test tests/unit/",
    "test:integration": "bun run pretest && bun test tests/integration/",
    "test:e2e": "bun run pretest && bun test tests/e2e/",
    "test:performance": "bun run pretest && bun test tests/performance/",
    "test:security": "bun run pretest && bun test tests/security/",
    "test:watch": "bun run pretest && bun test --watch",
    "test:coverage": "bun run pretest && bun test --coverage",
    "test:jest": "bunx --package jest jest",
    "test:jest-coverage": "bunx --package jest jest --coverage",
    "test:ci": "CI=true bun test --coverage --bail=1",
    "ci:test": "bun run test:coverage:enhanced && bun run test:benchmark",
    "ci:test:bunx": "USE_BUNX=true bun run test:coverage:enhanced:bunx && USE_BUNX=true bun run test:benchmark:bunx",
    "ci:test:quick": "bun run test:changed && bun run test:benchmark quick",
    "f22q": "bun run packages/fire22-quality-cli/dist/cli.js",
    "quality:git-aware": "bun run f22q test changed",
    "quality:benchmark": "bun run f22q test benchmark",
    "quality:coverage": "bun run f22q test coverage",
    "quality:ci:quick": "bun run f22q ci quick",
    "quality:ci:full": "bun run f22q ci full",
    "install:safe": "bun install --registry https://registry.npmjs.org/",
    "install:clean": "rm -rf node_modules bun.lockb && bun install --registry https://registry.npmjs.org/",
    "commit:template": "bun run scripts/enhanced-commit-template.js",
    "commit:setup": "bash scripts/setup-enhanced-commits.sh",
    "commit:help": "bun run scripts/enhanced-commit-template.js --help",
    "ci:test:full": "bun run test:coverage:enhanced && bun run test:benchmark:full && bun run test:comprehensive",
    "test:bunx": "USE_BUNX=true bun run scripts/test-quick.ts",
    "test:bunx:comprehensive": "USE_BUNX=true bun run scripts/test-comprehensive.ts",
    "test:bunx:working": "USE_BUNX=true bun run scripts/test-working.ts",
    "test:verify-bunx": "bun run scripts/test-bunx-verification.ts",
    "test:changed": "bun run scripts/test-git-aware.ts",
    "test:changed:bunx": "bun run scripts/test-git-aware.ts --bunx",
    "test:benchmark": "bun run scripts/test-benchmark.ts quick",
    "test:benchmark:full": "bun run scripts/test-benchmark.ts full",
    "test:benchmark:bunx": "bun run scripts/test-benchmark.ts quick --bunx",
    "test:coverage:enhanced": "bun run scripts/test-coverage-enhanced.ts",
    "test:coverage:enhanced:bunx": "USE_BUNX=true bun run scripts/test-coverage-enhanced.ts",
    "test:reports": "echo 'üìä Opening test reports...' && open reports/coverage/coverage-summary.html && echo 'üìà Coverage report opened in browser'",
    "test:history": "echo 'üìã Performance History:' && cat reports/benchmarks/test-performance-history.json | bun run -e 'console.log(JSON.stringify(JSON.parse(await Bun.stdin.text()).slice(-5), null, 2))'",
    "test:clean": "echo 'üßπ Cleaning test reports...' && rm -rf reports/benchmarks/* reports/coverage/* && echo '‚úÖ Test reports cleaned'",
    "test:showcase": "bun run scripts/test-showcase.ts",
    "test:showcase:full": "bun run scripts/test-showcase.ts full",
    "build": "bun build ./src/index.ts --target=bun --outdir=dist",
    "build:standalone": "bun run scripts/build-water-dashboard-standalone.ts",
    "build:all": "bun run build && bun run build:standalone",
    "preinstall": "echo 'üöÄ Pre-install: Preparing Bun environment...' && bun --version",
    "postinstall": "echo '‚úÖ Post-install: Bun dependencies installed successfully' && bun run validate:lockfile && echo 'üîß Auto-fixing package.json files...' && bun run pkg:fix-all",
    "install:prod": "bun install --production --frozen-lockfile",
    "install:dev": "bun install --frozen-lockfile",
    "install:verbose": "bun install --verbose",
    "install:silent": "bun install --silent",
    "install:concurrent": "bun install --concurrent-scripts 8",
    "install:optimized": "BUN_NETWORK_CONCURRENT_LIMIT=20 bun install --cache-dir ./.bun-cache",
    "install:cached": "bun install --cache-dir ./.bun-cache --frozen-lockfile",
    "install:fast": "BUN_NETWORK_CONCURRENT_LIMIT=20 bun install --frozen-lockfile",
    "cache:clean": "rm -rf ./.bun-cache && echo 'üóëÔ∏è Cache cleaned'",
    "cache:warm": "bun run install:cached && echo 'üî• Cache warmed'",
    "cache:dependencies": "bun run scripts/cache-dependencies.ts",
    "cache:status": "du -sh ./.bun-cache 2>/dev/null || echo 'üì¶ No local cache found'",
    "registry:status": "bun install --verbose --dry-run 2>&1 | head -20",
    "registry:test": "curl -s https://registry.npmjs.org/-/ping && echo '‚úÖ NPM registry online'",
    "registry:benchmark": "time bun install --dry-run",
    "registry:failover": "bun run scripts/registry-failover.ts",
    "registry:failover:check": "bun run scripts/registry-failover.ts check",
    "registry:failover:configure": "bun run scripts/registry-failover.ts configure",
    "registry:failover:monitor": "bun run scripts/registry-failover.ts monitor",
    "install:failover": "bash scripts/install-with-failover.sh",
    "prepare": "echo 'üîß Prepare: Setting up development environment with Bun' && bun run check:dependencies",
    "validate:lockfile": "test -f bun.lock && echo '‚úÖ bun.lock exists' || echo '‚ö†Ô∏è bun.lock will be generated on next install'",
    "check:dependencies": "bun --version && echo '‚úÖ Bun runtime available'",
    "telegram:dev": "cd workspaces/@fire22-telegram-integration && bun run dev",
    "telegram:build": "cd workspaces/@fire22-telegram-integration && bun run build",
    "telegram:test": "cd workspaces/@fire22-telegram-integration && bun test",
    "telegram:benchmark": "cd workspaces/@fire22-telegram-benchmarks && bun run benchmark",
    "staging": "BUN_ENV=staging bun run src/telegram/staging-server.ts",
    "staging:build": "bun build --config build.staging.config.ts",
    "staging:deploy": "bun run scripts/deploy-staging.ts",
    "staging:test": "BUN_ENV=staging bun test",
    "staging:benchmark": "cd workspaces/@fire22-telegram-benchmarks && bun run benchmark:all",
    "staging:health": "curl -s http://localhost:3001/api/health | jq || echo 'jq not installed - raw output:' && curl -s http://localhost:3001/api/health",
    "staging:dashboard": "open http://localhost:3001/dashboard",
    "preview": "bun run staging",
    "workspace:install": "bun install && cd workspaces/@fire22-telegram-bot && bun install && cd ../fire22-queue-system && bun install && cd ../fire22-multilingual && bun install && cd ../fire22-telegram-workflows && bun install && cd ../fire22-telegram-dashboard && bun install && cd ../fire22-telegram-benchmarks && bun install",
    "workspace:build": "cd workspaces/@fire22-telegram-bot && bun run build && cd ../fire22-queue-system && bun run build && cd ../fire22-multilingual && bun run build && cd ../fire22-telegram-workflows && bun run build && cd ../fire22-telegram-dashboard && bun run build",
    "workspace:test": "cd workspaces/@fire22-telegram-bot && bun test && cd ../fire22-queue-system && bun test && cd ../fire22-multilingual && bun test && cd ../fire22-telegram-workflows && bun test && cd ../fire22-telegram-dashboard && bun test && cd ../fire22-telegram-benchmarks && bun test",
    "bunx:telegram-bot": "bunx --package @fire22/telegram-bot fire22-telegram-bot",
    "bunx:queue-system": "bunx -p @fire22/queue-system fire22-queue-system",
    "bunx:benchmarks": "bunx --package @fire22/telegram-benchmarks fire22-benchmarks",
    "bunx:staging": "bunx -p @fire22/telegram-dashboard fire22-staging-server",
    "bunx:multilingual": "bunx --package @fire22/multilingual fire22-language-demo",
    "bunx:workflows": "bunx -p @fire22/telegram-workflows fire22-workflow-demo",
    "bunx:version-manager": "bunx --package @fire22/version-manager fire22-version-cli",
    "bunx:version-status": "bunx -p @fire22/version-manager fire22-version-status",
    "bunx:version-bump": "bunx --package @fire22/version-manager fire22-version-bump",
    "bunx:wager-system": "bunx -p @fire22/wager-system fire22-wager-demo",
    "bunx:env-manager": "bunx --package @fire22/env-manager fire22-env-validator",
    "global:install": "bun link && echo '‚úÖ Global binaries linked: fire22-dashboard, fire22-version, fire22-staging, fire22-hmr'",
    "global:uninstall": "bun unlink && echo 'üóëÔ∏è Global binaries unlinked'",
    "global:status": "which fire22-dashboard && which fire22-version && which fire22-staging && which fire22-hmr || echo '‚ö†Ô∏è Some global binaries not found'",
    "global:test": "fire22-version status && echo '‚úÖ Global binaries working'",
    "shell:setup": "echo 'export PATH=\"$HOME/.bun/bin:$PATH\"' >> ~/.bashrc && echo 'export PATH=\"$HOME/.bun/bin:$PATH\"' >> ~/.zshrc && echo '‚úÖ Bun shell PATH updated'",
    "shell:verify": "echo $PATH | grep -q '.bun/bin' && echo '‚úÖ Bun in PATH' || echo '‚ö†Ô∏è Bun not in PATH - run: bun run shell:setup'",
    "bunx:global:install": "bunx --global install fire22-dashboard-worker && echo '‚úÖ Globally installed via bunx'",
    "bunx:global:test": "bunx fire22-dashboard --version && bunx fire22-version status",
    "setup:global": "bun run scripts/setup-global-binaries.ts setup",
    "setup:global:check": "bun run scripts/setup-global-binaries.ts check",
    "setup:global:verify": "bun run scripts/setup-global-binaries.ts verify",
    "docs:build": "bun run scripts/build-documentation-integration.ts build",
    "docs:status": "bun run scripts/build-documentation-integration.ts status",
    "docs:integration": "bun run docs:build && echo 'üìö Documentation available at http://localhost:3001/docs'",
    "upgrade:deps": "bash scripts/upgrade-dependencies.sh",
    "upgrade:dev-deps": "bash scripts/update-dev-deps.sh",
    "changeset:create": "bash scripts/bunx-wrapper.sh @changesets/cli changeset",
    "verify:pre-publish": "bun --user-agent=\"Fire22-Verify/1.0\" run scripts/pre-publish-verify.sh",
    "release": "bun run verify:pre-publish && bunx --package @changesets/cli changeset publish",
    "format": "bunx prettier --write .",
    "format:check": "bunx prettier --check .",
    "lint:workspace": "bunx eslint --filter=\"@fire22/*\" --ext .ts,.tsx",
    "typecheck:workspace": "bunx tsc --noEmit --filter=\"@fire22/*\"",
    "upgrade:dry-run": "bun outdated -r --filter=\"@fire22/*\" --json | bunx jq '.[] | select(.dependencyType == \"dev\")'",
    "upgrade:dry-run:prod": "bun outdated -r --filter=\"@fire22/*\" --json | bunx jq '.[] | select(.dependencyType == \"prod\")'",
    "upgrade:dry-run:workspace": "bash -c 'if [ -n \"$1\" ]; then bun outdated -r --filter=\"@fire22-$1\" --json | bunx jq \".[]\"; else echo \"Usage: bun run upgrade:dry-run:workspace <workspace-name>\"; fi' -- ",
    "upgrade:dry-run:package": "bash -c 'if [ -n \"$1\" ]; then bun outdated -r --json | bunx jq \".[] | select(.name == \\\"$1\\\")\"; else echo \"Usage: bun run upgrade:dry-run:package <package-name>\"; fi' -- ",
    "version:status": "echo \"Root version: $(bun pm pkg get version)\" && for ws in workspaces/@fire22-*/; do echo \"$(basename \"$ws\"): $(cd \"$ws\" && bun pm pkg get version 2>/dev/null || echo 'no package.json')\"; done",
    "version:sync": "root_ver=$(bun pm pkg get version) && for ws in workspaces/@fire22-*/; do (cd \"$ws\" && bun pm pkg set version=\"$root_ver\" 2>/dev/null || echo \"Skipping $(basename \"$ws\")\"); done",
    "pkg:audit": "bun audit --filter=\"@fire22/*\"",
    "pkg:fix-all": "bun pm pkg fix && for ws in workspaces/@fire22-*/; do echo \"Fixing $(basename \"$ws\")...\" && (cd \"$ws\" && bun pm pkg fix 2>/dev/null || echo \"  ‚ö†Ô∏è Skipped\"); done",
    "deps:analyze": "bash scripts/analyze-deps.sh",
    "deps:why": "bun why",
    "pkg:manage": "bash scripts/manage-package.sh",
    "pkg:get": "bun pm pkg get",
    "pkg:set": "bun pm pkg set",
    "pkg:fix": "bun pm pkg fix",
    "workspaces:list": "echo 'üì¶ Fire22 Workspaces:' && find workspaces -name 'package.json' -type f | sort | sed 's/workspaces\\/\\([^/]*\\)\\/.*/  ‚Üí \\1/' | uniq",
    "workspaces:outdated": "echo 'üîç Checking outdated packages across all workspaces...' && for ws in workspaces/@fire22-*/; do echo \"\\nüìã Workspace: $(basename \"$ws\")\" && (cd \"$ws\" && bun outdated 2>/dev/null | head -10 || echo \"  ‚úì All packages up to date\"); done",
    "workspaces:dev": "echo 'üöÄ Available workspace dev commands:' && echo '  bun run ws:dev <workspace-name>' && echo '  bun run ws:build <workspace-name>' && echo '  bun run ws:test <workspace-name>'",
    "workspaces:validate": "echo 'üîç Validating workspace configurations...' && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí $(basename \"$ws\"):\"; (cd \"$ws\" && if [ -f package.json ]; then echo \"    ‚úÖ package.json exists\"; scripts=$(bun pm pkg get scripts 2>/dev/null | wc -l); echo \"    üìú Scripts: $scripts\"; else echo \"    ‚ùå No package.json\"; fi); done",
    "workspaces:install": "bun install --filter='workspaces/@fire22-*'",
    "workspaces:install:prod": "bun install --production --filter='workspaces/@fire22-*'",
    "workspaces:install:selective": "bash -c 'if [ -n \"$1\" ]; then bun install --filter=\"@fire22-$1\"; else echo \"Usage: bun run workspaces:install:selective <workspace-name>\"; fi' -- ",
    "workspaces:scripts": "echo 'üìú Workspace script availability:' && for ws in workspaces/@fire22-*/; do echo \"\\nüìÅ $(basename \"$ws\"):\"; (cd \"$ws\" && if [ -f package.json ]; then for script in build test lint dev start; do if bun pm pkg get scripts.$script >/dev/null 2>&1; then echo \"  ‚úÖ $script\"; else echo \"  ‚ùå $script\"; fi; done; else echo \"  ‚ö†Ô∏è No package.json\"; fi); done",
    "ws:dev": "if [ -d \"workspaces/@fire22-$1\" ]; then echo \"üöÄ Starting dev server for @fire22-$1...\" && cd \"workspaces/@fire22-$1\" && bun run dev; else echo \"‚ùå Workspace @fire22-$1 not found\"; fi",
    "ws:build": "if [ -d \"workspaces/@fire22-$1\" ]; then echo \"üî® Building @fire22-$1...\" && cd \"workspaces/@fire22-$1\" && bun run build; else echo \"‚ùå Workspace @fire22-$1 not found\"; fi",
    "ws:test": "if [ -d \"workspaces/@fire22-$1\" ]; then echo \"üß™ Testing @fire22-$1...\" && cd \"workspaces/@fire22-$1\" && bun test; else echo \"‚ùå Workspace @fire22-$1 not found\"; fi",
    "ws:add": "if [ -d \"workspaces/@fire22-$1\" ] && [ -n \"$2\" ]; then echo \"üì¶ Adding $2 to @fire22-$1...\" && cd \"workspaces/@fire22-$1\" && bun add \"$2\"; else echo \"Usage: bun run ws:add <workspace-name> <package>\"; fi",
    "ws:add-dev": "if [ -d \"workspaces/@fire22-$1\" ] && [ -n \"$2\" ]; then echo \"üîß Adding $2 as dev dependency to @fire22-$1...\" && cd \"workspaces/@fire22-$1\" && bun add -D \"$2\"; else echo \"Usage: bun run ws:add-dev <workspace-name> <package>\"; fi",
    "all:add-dev": "if [ -n \"$1\" ]; then echo \"üì¶ Adding $1 as dev dependency to all workspaces...\" && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí $(basename \"$ws\")\" && (cd \"$ws\" && bun add -D \"$1\" 2>/dev/null || echo \"    ‚ö†Ô∏è Skipped\"); done; else echo \"Usage: bun run all:add-dev <package>\"; fi",
    "all:add": "if [ -n \"$1\" ]; then echo \"üì¶ Adding $1 to all workspaces...\" && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí $(basename \"$ws\")\" && (cd \"$ws\" && bun add \"$1\" 2>/dev/null || echo \"    ‚ö†Ô∏è Skipped\"); done; else echo \"Usage: bun run all:add <package>\"; fi",
    "all:build": "echo \"üî® Building all workspaces...\" && build_failed=0 && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí Building $(basename \"$ws\")...\" && (cd \"$ws\" && if [ -f package.json ] && bun pm pkg get scripts.build >/dev/null 2>&1; then bun run build || { echo \"    ‚ùå Build failed for $(basename \"$ws\")\"; build_failed=1; }; else echo \"    ‚ö†Ô∏è No build script\"; fi); done && if [ $build_failed -eq 1 ]; then echo \"\\n‚ùå Some workspace builds failed\"; exit 1; else echo \"\\n‚úÖ All workspace builds completed\"; fi",
    "all:test": "echo \"üß™ Testing all workspaces...\" && test_failed=0 && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí Testing $(basename \"$ws\")...\" && (cd \"$ws\" && if [ -f package.json ]; then bun test || { echo \"    ‚ùå Tests failed for $(basename \"$ws\")\"; test_failed=1; }; else echo \"    ‚ö†Ô∏è No package.json\"; fi); done && if [ $test_failed -eq 1 ]; then echo \"\\n‚ùå Some workspace tests failed\"; exit 1; else echo \"\\n‚úÖ All workspace tests passed\"; fi",
    "all:lint": "echo \"üßπ Linting all workspaces...\" && lint_failed=0 && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí Linting $(basename \"$ws\")...\" && (cd \"$ws\" && if [ -f package.json ] && bun pm pkg get scripts.lint >/dev/null 2>&1; then bun run lint || { echo \"    ‚ùå Lint failed for $(basename \"$ws\")\"; lint_failed=1; }; else echo \"    ‚ö†Ô∏è No lint script\"; fi); done && if [ $lint_failed -eq 1 ]; then echo \"\\n‚ùå Some workspace lints failed\"; exit 1; else echo \"\\n‚úÖ All workspace lints passed\"; fi",
    "all:clean": "echo \"üßπ Cleaning all workspaces...\" && for ws in workspaces/@fire22-*/; do echo \"  ‚Üí Cleaning $(basename \"$ws\")...\" && (cd \"$ws\" && rm -rf node_modules dist build .next 2>/dev/null || true); done && echo \"  ‚Üí Cleaning root...\" && rm -rf node_modules",
    "fresh:install": "bun run all:clean && bun install --frozen-lockfile",
    "production:setup": "bun run all:clean && bun run install:prod && bun run all:build",
    "bundle:analyze": "bunx webpack-bundle-analyzer dist/stats.json",
    "bundle:source-map": "bunx source-map-explorer 'dist/static/js/*.js'",
    "deps:check-updates": "bunx ncu",
    "deps:update-interactive": "bunx ncu -i",
    "storybook:init": "bunx @storybook/cli init",
    "cypress:open": "bunx cypress open",
    "cypress:run": "bunx cypress run",
    "stylelint": "bunx stylelint \"**/*.css\"",
    "stylelint:fix": "bunx stylelint \"**/*.css\" --fix",
    "nx:init": "bunx nx init",
    "nx:build": "bunx nx build",
    "create:component": "bunx @angular/cli generate component",
    "create:service": "bunx @angular/cli generate service",
    "nest:new": "bunx @nestjs/cli new",
    "vue:create": "bunx @vue/cli create",
    "vite:build": "bunx vite build",
    "webpack:build": "bunx webpack --config webpack.prod.js",
    "webpack:dev": "bunx webpack serve --config webpack.dev.js",
    "editor": "bun run scripts/editor-integration.ts",
    "editor:open": "bun run scripts/editor-integration.ts open",
    "editor:list": "bun run scripts/editor-integration.ts list",
    "editor:config": "bun run scripts/editor-integration.ts config",
    "editor:scripts": "bun run scripts/editor-integration.ts scripts",
    "editor:errors": "bun run scripts/editor-integration.ts errors",
    "editor:workspace": "bun run scripts/editor-integration.ts workspace",
    "console": "bun run scripts/dev-console.ts",
    "verify:department-access": "bun run scripts/verify-department-access.ts",
    "verify:team-directory": "bun run scripts/verify-team-directory.ts",
    "team:list": "bun run scripts/verify-team-directory.ts list",
    "team:verify": "bun run scripts/verify-team-directory.ts verify",
    "dept:dependencies": "bun run scripts/department-dependency-manager.ts",
    "deps:submit": "bun run scripts/department-dependency-manager.ts submit",
    "deps:assign": "bun run scripts/department-dependency-manager.ts assign",
    "deps:notify": "bun run scripts/department-dependency-manager.ts notify",
    "deps:status": "bun run scripts/department-dependency-manager.ts status",
    "notify:departments": "bun run scripts/department-notification-sender.ts",
    "notify:send": "bun run scripts/department-notification-sender.ts send",
    "notify:matrix": "bun run scripts/department-notification-sender.ts matrix",
    "console:depth": "bun --console-depth",
    "console:interactive": "bun run scripts/dev-console.ts",
    "dev:console": "bun run scripts/dev-console.ts",
    "changeset:version": "bash scripts/bunx-wrapper.sh @changesets/cli version",
    "changeset:publish": "bash scripts/bunx-wrapper.sh @changesets/cli publish",
    "build:pages": "bun run scripts/build-pages.ts",
    "build:department": "bun run scripts/build-department.ts",
    "deploy:cloudflare": "bun run scripts/cloudflare-department-automation.ts setup",
    "deploy:department": "bun run scripts/deploy-department.ts",
    "deploy:all": "bun run scripts/deploy-all-departments.ts",
    "deploy:prod": "bun run scripts/deploy-production.ts",
    "deploy:preview": "bun run scripts/deploy-preview.ts",
    "dept:build": "bash -c 'if [ -n \"$1\" ]; then bun run scripts/build-department.ts \"$1\"; else echo \"Usage: bun run dept:build <department>\"; fi' -- ",
    "dept:deploy": "bash -c 'if [ -n \"$1\" ]; then bun run scripts/deploy-department.ts \"$1\"; else echo \"Usage: bun run dept:deploy <department>\"; fi' -- ",
    "dept:preview": "bash -c 'if [ -n \"$1\" ]; then bun run scripts/preview-department.ts \"$1\"; else echo \"Usage: bun run dept:preview <department>\"; fi' -- ",
    "dept:status": "bash -c 'if [ -n \"$1\" ]; then bun run scripts/department-status.ts \"$1\"; else echo \"Usage: bun run dept:status <department>\"; fi' -- ",
    "feeds:build": "bun run scripts/build-feeds.ts",
    "feeds:deploy": "bun run scripts/deploy-feeds.ts",
    "feeds:validate": "bun run scripts/validate-feeds.ts",
    "access:setup": "bun run scripts/setup-cloudflare-access.ts",
    "access:add-user": "bun run scripts/manage-department-access.ts add",
    "access:remove-user": "bun run scripts/manage-department-access.ts remove",
    "pages:build": "bun run scripts/build-pages.ts",
    "pages:build:production": "bun run scripts/build-pages.ts --env production --minify",
    "pages:preview": "bun run scripts/preview-department.ts create",
    "pages:preview:delete": "bash -c 'if [ -n \"$1\" ]; then bun run scripts/preview-department.ts delete \"$1\"; else echo \"Usage: bun run pages:preview:delete <branch>\"; fi' -- ",
    "pages:preview:list": "bun run scripts/preview-department.ts list",
    "deploy:all:departments": "bun run scripts/deploy-all-departments.ts deploy",
    "deploy:all:production": "bun run scripts/deploy-all-departments.ts deploy --env production",
    "deploy:all:parallel": "bash -c 'bun run scripts/deploy-all-departments.ts deploy --parallel \"${1:-5}\"' -- ",
    "deploy:history": "bun run scripts/deploy-all-departments.ts history",
    "access:create": "bun run scripts/setup-cloudflare-access.ts create",
    "access:update": "bun run scripts/setup-cloudflare-access.ts update",
    "access:delete": "bun run scripts/setup-cloudflare-access.ts delete",
    "access:list": "bun run scripts/setup-cloudflare-access.ts list",
    "registry:connection:test": "bun run scripts/fix-registry-connection.ts test",
    "registry:connection:fix": "bun run scripts/fix-registry-connection.ts fix",
    "registry:connection:status": "bun run scripts/fix-registry-connection.ts status",
    "registry:auth:fix": "bun run scripts/fix-registry-authentication.ts fix",
    "registry:auth:test": "bun run scripts/fix-registry-authentication.ts test",
    "registry:auth:status": "bun run scripts/fix-registry-authentication.ts status",
    "registry:token:setup": "bun run scripts/setup-registry-token.ts",
    "registry:token:get": "bun run scripts/setup-registry-token.ts get",
    "registry:token:test": "bun run scripts/setup-registry-token.ts test",
    "registry:token:delete": "bun run scripts/setup-registry-token.ts delete",
    "publish:fire22": "bun run scripts/publish-fire22-packages.ts",
    "publish:fire22:dry": "bun run scripts/publish-fire22-packages.ts --dry-run",
    "publish:security-scanner": "cd packages/security-scanner && bun publish --registry https://fire22-security-registry.nolarose1968-806.workers.dev/",
    "publish:env-manager": "cd packages/env-manager && bun publish --registry https://fire22-security-registry.nolarose1968-806.workers.dev/",
    "publish:wager-system": "cd packages/wager-system && bun publish --registry https://fire22-security-registry.nolarose1968-806.workers.dev/",
    "pack:all": "bun run scripts/pack-all-packages.ts",
    "pack:security-scanner": "cd packages/security-scanner && TARBALL=$(bun pm pack --quiet) && echo 'Created: $TARBALL'",
    "pack:env-manager": "cd packages/env-manager && TARBALL=$(bun pm pack --quiet) && echo 'Created: $TARBALL'",
    "pack:wager-system": "cd packages/wager-system && TARBALL=$(bun pm pack --quiet) && echo 'Created: $TARBALL'",
    "validate:all": "echo 'üîç Running comprehensive validation...' && bun run typecheck && bun test && bun run all:build && bun run all:test && echo '‚úÖ All validations passed'",
    "ci:build": "echo 'üöÄ CI Build Pipeline' && bun install --frozen-lockfile && bun run typecheck && bun test && bun run all:build"
  },
  "workspaces": [
    "workspaces/@fire22-*",
    "packages/*"
  ],
  "trustedDependencies": [
    "@swc/core",
    "esbuild",
    "sharp",
    "fsevents"
  ],
  "dependencies": {
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@types/bun": "latest",
    "bun-types": "latest",
    "prettier": "3.6.2",
    "typescript": "5.9.2"
  },
  "peerDependencies": {
    "bun": ">=1.2.0"
  },
  "optionalDependencies": {
    "@swc/core": "^1.3.0",
    "esbuild": "^0.19.0",
    "sharp": "^0.32.0",
    "fsevents": "^2.3.0"
  },
  "overrides": {
    "typescript": "5.9.2",
    "prettier": "3.6.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0",
    "bun": ">=1.1.0"
  }
}