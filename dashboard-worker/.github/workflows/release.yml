name: 🚀 Fire22 Dashboard Release

on:
  push:
    tags:
      - 'v*.*.*'
      - '*-v*.*.*' # workspace-specific tags like api-client-v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v3.1.0)'
        required: true
        type: string
      workspace:
        description: 'Specific workspace to release (optional)'
        required: false
        type: choice
        options:
          - 'all'
          - 'api-client'
          - 'core-dashboard'
          - 'sports-betting'
          - 'telegram-integration'
          - 'build-system'
          - 'pattern-system'
        default: 'all'

env:
  BUN_VERSION: '1.2.21'

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Determine release scope and version
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      workspace: ${{ steps.workspace.outputs.workspace }}
      is-workspace-release: ${{ steps.workspace.outputs.is-workspace-release }}
      release-name: ${{ steps.release-info.outputs.release-name }}
      release-body: ${{ steps.release-info.outputs.release-body }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract Version Info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"

      - name: 🏢 Determine Workspace Scope
        id: workspace
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            if [[ "$TAG_NAME" == *"-v"* ]]; then
              WORKSPACE=$(echo $TAG_NAME | cut -d'-' -f1)
              echo "workspace=${WORKSPACE}" >> $GITHUB_OUTPUT
              echo "is-workspace-release=true" >> $GITHUB_OUTPUT
            else
              echo "workspace=all" >> $GITHUB_OUTPUT
              echo "is-workspace-release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "workspace=${{ github.event.inputs.workspace }}" >> $GITHUB_OUTPUT
            echo "is-workspace-release=${{ github.event.inputs.workspace != 'all' }}" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Generate Release Info
        id: release-info
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          WORKSPACE="${{ steps.workspace.outputs.workspace }}"

          if [[ "$WORKSPACE" == "all" ]]; then
            RELEASE_NAME="🔥 Fire22 Dashboard Worker ${VERSION}"
            RELEASE_BODY="## 🚀 Fire22 Dashboard Worker Release ${VERSION}

          ### ✨ What's New
          - Complete system release with all workspaces
          - Enhanced build system with SIMD acceleration
          - Cross-platform executables (Windows, Linux, macOS, Docker)
          - Advanced workspace orchestration

          ### 🏢 Included Workspaces
          - 🔌 API Client - Fire22 integration
          - 📊 Core Dashboard - Real-time monitoring
          - ⚽ Sports Betting - Betting management
          - 📱 Telegram Integration - Bot system
          - 🏗️ Build System - Advanced compilation
          - 🔄 Pattern System - Processing engine

          ### 📦 Downloads
          - [Windows Executable](./fire22-dashboard-windows.exe)
          - [Linux Binary](./fire22-dashboard-linux)
          - [macOS Binary](./fire22-dashboard-macos)
          - [Docker Image](./fire22-dashboard-docker)

          ### 🔧 Installation
          \`\`\`bash
          # Download and run
          wget https://github.com/brendadeeznuts1111/fire22-dashboard-worker/releases/download/${VERSION}/fire22-dashboard-linux
          chmod +x fire22-dashboard-linux
          ./fire22-dashboard-linux
          \`\`\`"
          else
            RELEASE_NAME="🏢 @fire22-${WORKSPACE} ${VERSION}"
            RELEASE_BODY="## 🚀 Workspace Release: @fire22-${WORKSPACE} ${VERSION}

          ### 📦 Workspace: @fire22-${WORKSPACE}
          Focused release for the ${WORKSPACE} workspace component.

          ### 🔧 Installation
          \`\`\`bash
          bun add @fire22/${WORKSPACE}@${VERSION}
          \`\`\`"
          fi

          echo "release-name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "release-body<<EOF" >> $GITHUB_OUTPUT
          echo "${RELEASE_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Build all artifacts for release
  build-release-artifacts:
    name: 🏗️ Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [prepare-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            ext: ''
          - os: windows-latest
            platform: windows
            ext: '.exe'
          - os: macos-latest
            platform: macos
            ext: ''
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install Dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build Enhanced Executables
        run: bun run scripts/enhanced-executable-builder.ts

      - name: 📦 Package Release Artifacts
        shell: bash
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          PLATFORM="${{ matrix.platform }}"

          # Create release package
          mkdir -p release-artifacts

          if [ -d "dist/executables" ]; then
            # Copy executables with version names
            if [ "$PLATFORM" == "windows" ]; then
              cp dist/executables/api-client/windows/fire22-api-client.exe "release-artifacts/fire22-dashboard-${VERSION}-windows.exe"
            elif [ "$PLATFORM" == "linux" ]; then
              cp dist/executables/api-client/linux/fire22-api-client "release-artifacts/fire22-dashboard-${VERSION}-linux"
            elif [ "$PLATFORM" == "macos" ]; then
              cp dist/executables/api-client/macos/fire22-api-client "release-artifacts/fire22-dashboard-${VERSION}-macos"
            fi
            
            # Create launcher scripts
            if [ "$PLATFORM" == "linux" ] || [ "$PLATFORM" == "macos" ]; then
              if [ -f "dist/fire22-dashboard.sh" ]; then
                cp "dist/fire22-dashboard.sh" "release-artifacts/fire22-dashboard-launcher.sh"
              fi
            fi
            
            if [ "$PLATFORM" == "windows" ]; then
              if [ -f "dist/fire22-dashboard.bat" ]; then
                cp "dist/fire22-dashboard.bat" "release-artifacts/fire22-dashboard-launcher.bat"
              fi
            fi
          fi

          # Create compressed archives
          if [ "$PLATFORM" == "windows" ]; then
            cd release-artifacts && zip -r "../fire22-dashboard-${VERSION}-windows.zip" . && cd ..
          else
            cd release-artifacts && tar -czf "../fire22-dashboard-${VERSION}-${PLATFORM}.tar.gz" . && cd ..
          fi

      - name: 📤 Upload Platform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}
          path: |
            release-artifacts/
            fire22-dashboard-*.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
          retention-days: 7

  # Create GitHub Release
  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-artifacts]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📋 Prepare Release Assets
        run: |
          mkdir -p release-assets

          # Collect all build artifacts
          find ./artifacts -type f \( -name "*.exe" -o -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;

          # List what we're releasing
          echo "📦 Release Assets:"
          ls -la release-assets/

      - name: 🏷️ Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          release_name: ${{ needs.prepare-release.outputs.release-name }}
          body: ${{ needs.prepare-release.outputs.release-body }}
          draft: false
          prerelease: ${{ contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'alpha') }}

      - name: 📤 Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets
          asset_name: fire22-dashboard-release-assets
          asset_content_type: application/zip

  # Publish to registries
  publish-packages:
    name: 📦 Publish Packages
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.is-workspace-release == 'true' || needs.prepare-release.outputs.workspace == 'all'
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install Dependencies
        run: bun install --frozen-lockfile

      - name: 🚀 Multi-Registry Publisher
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure registries
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "@fire22:registry=https://registry.npmjs.org/" >> ~/.npmrc

          # Run multi-registry publisher
          bun run scripts/multi-registry-publisher.ts --version="${{ needs.prepare-release.outputs.version }}" --workspace="${{ needs.prepare-release.outputs.workspace }}"

  # Post-release tasks
  post-release:
    name: ✅ Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, publish-packages]
    if: always() && needs.create-release.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: 📊 Update Release Metrics
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          echo "🎉 Release ${VERSION} completed successfully!"
          echo "📦 Artifacts published to GitHub Releases"
          echo "🚀 Packages published to registries"

          # Update version in package.json metadata if needed
          if [ "${{ needs.prepare-release.outputs.workspace }}" == "all" ]; then
            echo "🔄 Full system release completed"
          else
            echo "🏢 Workspace-specific release completed"
          fi

      - name: 📢 Release Notification
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scope**: ${{ needs.prepare-release.outputs.workspace }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ needs.create-release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
