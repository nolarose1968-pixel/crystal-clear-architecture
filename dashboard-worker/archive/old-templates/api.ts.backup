/**
 * Enterprise API Management Platform
 * Comprehensive API gateway, monitoring, and management system
 */

import type { EmployeeData } from '../types';
import {
  generateHtmlHead,
  generateHeader,
  generateToolCards,
  generateFooter,
  generateMetricGrid,
} from '../components';

export function generateApiPage(employee: EmployeeData, pathname?: string): string {
  const content = generateApiContent(employee, pathname);

  const html = `
    ${generateHtmlHead(
      `API Management - ${employee.name}`,
      'Comprehensive API endpoints for system integration, data access, and automation'
    )}
    ${generateHeader(employee, '/api')}
    <main class="api-container">
      ${content}
    </main>
    ${generateFooter()}
    </body>
    </html>
  `;

  return html;
}

function generateApiContent(employee: EmployeeData, pathname?: string): string {
  if (pathname === '/api/gateway') {
    return generateApiGatewayContent(employee);
  } else if (pathname === '/api/monitoring') {
    return generateApiMonitoringContent(employee);
  } else if (pathname === '/api/security') {
    return generateApiSecurityContent(employee);
  } else if (pathname === '/api/documentation') {
    return generateApiDocumentationContent(employee);
  } else if (pathname === '/api/analytics') {
    return generateApiAnalyticsContent(employee);
  } else if (pathname === '/api/developer') {
    return generateApiDeveloperContent(employee);
  } else if (pathname === '/api/integrations') {
    return generateApiIntegrationsContent(employee);
  } else {
    return generateApiOverviewContent(employee);
  }
}

function generateApiOverviewContent(employee: EmployeeData): string {
  const realTimeMetrics = [
    { label: 'Total APIs', value: '247', change: '+12', trend: 'up' },
    { label: 'Active Calls', value: '47.2K', change: '+8.3%', trend: 'up' },
    { label: 'Success Rate', value: '99.9%', change: '+0.1%', trend: 'up' },
    { label: 'Avg Response', value: '142ms', change: '-12ms', trend: 'up' }
  ];

  const apiCategories = [
    {
      icon: 'üè•',
      title: 'System Health',
      description: 'Health checks, status monitoring, and system diagnostics',
      endpoint: '/api/health',
      status: 'online',
      metrics: { endpoints: '4', checks: '24/7', uptime: '99.9%' }
    },
    {
      icon: 'üë§',
      title: 'Employee Profile',
      description: 'Employee data, profile information, and organizational details',
      endpoint: '/api/profile',
      status: 'online',
      metrics: { profiles: '1', fields: '15', updates: '2.1K' }
    },
    {
      icon: 'üõ†Ô∏è',
      title: 'Tools & Features',
      description: 'Available tools, feature access, and capability management',
      endpoint: '/api/tools',
      status: 'online',
      metrics: { tools: '8', features: '12', access: '100%' }
    },
    {
      icon: 'üìá',
      title: 'Contact Management',
      description: 'Business contacts, relationships, and communication data',
      endpoint: '/api/contacts',
      status: 'online',
      metrics: { contacts: '450', categories: '4', recent: '25' }
    },
    {
      icon: 'üìÖ',
      title: 'Schedule & Calendar',
      description: 'Appointments, meetings, and time management (Premium)',
      endpoint: '/api/schedule',
      status: 'online',
      metrics: { appointments: '12', thisWeek: '8', today: '3' }
    },
    {
      icon: 'üìä',
      title: 'Analytics & Metrics',
      description: 'Usage analytics, performance metrics, and business intelligence',
      endpoint: '/api/analytics',
      status: 'online',
      metrics: { reports: '247', metrics: '15', trends: '‚ÜóÔ∏è' }
    },
    {
      icon: 'üìã',
      title: 'System Logs',
      description: 'Activity logs, audit trails, and system events (Admin)',
      endpoint: '/api/logs',
      status: 'online',
      metrics: { entries: '8.5K', today: '234', retention: '90d' }
    },
    {
      icon: '‚öôÔ∏è',
      title: 'System Administration',
      description: 'Cache management, system configuration, and maintenance',
      endpoint: '/api/cache/clear',
      status: 'online',
      metrics: { operations: '12', cache: '2.1MB', efficiency: '94%' }
    }
  ];

  const activeEndpoints = [
    { method: 'GET', path: '/api/health', calls: '892', status: '200' },
    { method: 'GET', path: '/api/status', calls: '1.2K', status: '200' },
    { method: 'GET', path: '/api/profile', calls: '756', status: '200' },
    { method: 'GET', path: '/api/tools', calls: '543', status: '200' },
    { method: 'GET', path: '/api/contacts', calls: '423', status: '200' },
    { method: 'GET', path: '/api/analytics', calls: '12.4K', status: '200' },
    { method: 'GET', path: '/api/monitoring', calls: '3.1K', status: '200' },
    { method: 'GET', path: '/api/schedule', calls: '234', status: '200' },
    { method: 'GET', path: '/api/logs', calls: '89', status: '200' },
    { method: 'POST', path: '/api/cache/clear', calls: '12', status: '200' },
    { method: 'GET', path: '/api/endpoints', calls: '345', status: '200' }
  ];

  return `
    <div class="api-overview-container">
      <style>
        ${getApiOverviewStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üîå Enterprise API Management Platform</h1>
          <p>Comprehensive API gateway, monitoring, security, and developer tools for enterprise-scale operations</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              API Gateway Online - All Systems Operational
            </div>
            <div class="last-update">Last updated: <span id="lastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Enhanced Real-Time Performance Dashboard -->
      <div class="api-section">
        <div class="section-header">
          <h2>‚ö° Real-Time Performance</h2>
          <p>Live API metrics and system performance indicators</p>
          <div class="header-actions">
            <button class="refresh-btn" onclick="refreshMetrics()">
              <span class="refresh-icon">üîÑ</span>
              Refresh
            </button>
            <div class="auto-refresh">
              <label class="toggle">
                <input type="checkbox" id="autoRefresh" checked onchange="toggleAutoRefresh()">
                <span class="toggle-slider"></span>
              </label>
              <span class="toggle-label">Auto-refresh</span>
            </div>
          </div>
        </div>

        <div class="metrics-dashboard">
          <div class="metrics-grid">
            ${realTimeMetrics.map(metric => `
              <div class="metric-card ${metric.trend}" onclick="showMetricDetails('${metric.label}')">
                <div class="metric-header">
                  <div class="metric-icon">${metric.label === 'Total APIs' ? 'üîå' : metric.label === 'Active Calls' ? 'üì°' : metric.label === 'Success Rate' ? '‚úÖ' : '‚ö°'}</div>
                  <div class="metric-sparkline" id="sparkline-${metric.label.replace(/\s+/g, '-').toLowerCase()}">
                    <svg width="60" height="20" viewBox="0 0 60 20">
                      <path d="M0,10 Q15,5 30,15 T60,10" stroke="#40e0d0" stroke-width="2" fill="none"/>
                    </svg>
                  </div>
                </div>
                <div class="metric-content">
                  <div class="metric-value">${metric.value}</div>
                  <div class="metric-label">${metric.label}</div>
                  <div class="metric-change ${metric.trend}">
                    <span class="change-icon">${metric.trend === 'up' ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'}</span>
                    <span class="change-value">${metric.change}</span>
                  </div>
                </div>
                <div class="metric-details">
                  <div class="metric-trend">Last 24h: ${metric.trend === 'up' ? '+' : ''}${Math.floor(Math.random() * 20) + 5}%</div>
                  <div class="metric-target">Target: ${metric.label === 'Success Rate' ? '99.9%' : metric.label === 'Avg Response' ? '< 150ms' : 'Optimal'}</div>
                </div>
              </div>
            `).join('')}
          </div>

          <!-- Performance Chart -->
          <div class="performance-chart">
            <div class="chart-header">
              <h3>üìà Performance Trend (Last 24 Hours)</h3>
              <div class="chart-controls">
                <button class="chart-btn active" onclick="setChartPeriod('1h')">1H</button>
                <button class="chart-btn" onclick="setChartPeriod('6h')">6H</button>
                <button class="chart-btn" onclick="setChartPeriod('24h')">24H</button>
                <button class="chart-btn" onclick="setChartPeriod('7d')">7D</button>
              </div>
            </div>
            <div class="chart-container">
              <canvas id="performanceChart" width="400" height="200"></canvas>
              <div class="chart-placeholder">
                <div class="placeholder-icon">üìä</div>
                <div class="placeholder-text">Interactive performance chart loading...</div>
                <div class="loading-spinner"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced API Categories -->
      <div class="api-section">
        <div class="section-header">
          <h2>üèóÔ∏è API Infrastructure</h2>
          <p>Core API management systems and enterprise capabilities</p>
          <div class="header-actions">
            <div class="system-overview">
              <div class="system-status">
                <div class="status-indicator online">
                  <span class="pulse"></span>
                </div>
                <span class="status-text">All Systems Operational</span>
              </div>
              <div class="system-metrics">
                <span class="metric">11/11 Endpoints Online</span>
                <span class="metric">99.9% Avg Uptime</span>
              </div>
            </div>
          </div>
        </div>

        <div class="api-categories-grid">
          ${apiCategories.map(category => `
            <div class="api-category-card" onclick="navigateToCategory('${category.endpoint}')">
              <div class="category-header">
                <div class="category-icon">${category.icon}</div>
                <div class="category-status ${category.status}">
                  <span class="status-dot"></span>
                  <span class="status-pulse"></span>
                  ${category.status.toUpperCase()}
                </div>
                <div class="category-actions">
                  <button class="action-btn small" onclick="event.stopPropagation(); quickAction('${category.title.toLowerCase().replace(/\s+/g, '_')}')">
                    ‚ö° Quick Access
                  </button>
                </div>
              </div>

              <div class="category-content">
                <h3 class="category-title">${category.title}</h3>
                <p class="category-description">${category.description}</p>

                <div class="category-metrics">
                  <div class="metric-item primary">
                    <span class="metric-label">${Object.keys(category.metrics)[0].replace(/([A-Z])/g, ' $1').toLowerCase()}:</span>
                    <span class="metric-value">${category.metrics.endpoints || category.metrics.alerts || category.metrics.threats || category.metrics.docs || category.metrics.reports || category.metrics.webhooks}</span>
                    <span class="metric-trend ${Math.random() > 0.5 ? 'up' : 'stable'}">
                      ${Math.random() > 0.5 ? '‚ÜóÔ∏è' : '‚Üí'}
                    </span>
                  </div>
                  <div class="metric-item">
                    <span class="metric-label">${Object.keys(category.metrics)[1].replace(/([A-Z])/g, ' $1').toLowerCase()}:</span>
                    <span class="metric-value">${category.metrics.traffic || category.metrics.latency || category.metrics.policies || category.metrics.testers || category.metrics.dashboards || category.metrics.integrations}</span>
                  </div>
                  <div class="metric-item">
                    <span class="metric-label">${Object.keys(category.metrics)[2].replace(/([A-Z])/g, ' $1').toLowerCase()}:</span>
                    <span class="metric-value">${category.metrics.uptime || category.metrics.throughput || category.metrics.audits || category.metrics.samples || category.metrics.exports || category.metrics.automations}</span>
                  </div>
                </div>
              </div>

              <div class="category-footer">
                <a href="${category.endpoint}" class="category-btn primary">
                  <span class="btn-icon">${category.icon}</span>
                  Access ${category.title}
                </a>
                <div class="category-links">
                  <button class="link-btn" onclick="event.stopPropagation(); showCategoryDocs('${category.endpoint}')">üìö Docs</button>
                  <button class="link-btn" onclick="event.stopPropagation(); showCategoryMetrics('${category.endpoint}')">üìä Metrics</button>
                  <button class="link-btn" onclick="event.stopPropagation(); showCategoryAlerts('${category.endpoint}')">üîî Alerts</button>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Active Endpoints -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîÑ Active Endpoints</h2>
          <p>Currently active API endpoints and their performance metrics</p>
        </div>

        <div class="endpoints-table">
          <div class="table-header">
            <div class="table-cell">Method</div>
            <div class="table-cell">Endpoint</div>
            <div class="table-cell">Calls Today</div>
            <div class="table-cell">Status</div>
            <div class="table-cell">Actions</div>
          </div>
          ${activeEndpoints.map(endpoint => `
            <div class="table-row">
              <div class="table-cell">
                <span class="method-badge method-${endpoint.method.toLowerCase()}">${endpoint.method}</span>
              </div>
              <div class="table-cell endpoint-path">${endpoint.path}</div>
              <div class="table-cell">${endpoint.calls}</div>
              <div class="table-cell">
                <span class="status-badge status-${endpoint.status.startsWith('2') ? 'success' : 'error'}">${endpoint.status}</span>
              </div>
              <div class="table-cell">
                <button class="action-btn small" onclick="viewEndpointDetails('${endpoint.path}')">View</button>
                <button class="action-btn small secondary" onclick="testEndpoint('${endpoint.path}')">Test</button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="api-section">
        <div class="section-header">
          <h2>‚ö° Quick Actions</h2>
          <p>Common API management tasks and shortcuts</p>
        </div>

        <div class="quick-actions-grid">
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/health')">
            <span class="action-icon">üíö</span>
            <span class="action-text">Health Check</span>
          </button>
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/profile')">
            <span class="action-icon">üë§</span>
            <span class="action-text">View Profile</span>
          </button>
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/tools')">
            <span class="action-icon">üõ†Ô∏è</span>
            <span class="action-text">My Tools</span>
          </button>
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/contacts')">
            <span class="action-icon">üìá</span>
            <span class="action-text">Contacts</span>
          </button>
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/analytics')">
            <span class="action-icon">üìä</span>
            <span class="action-text">Analytics</span>
          </button>
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/endpoints')">
            <span class="action-icon">üìã</span>
            <span class="action-text">API Docs</span>
          </button>
          <button class="quick-action-btn" onclick="fetchApiEndpoint('/api/schedule')">
            <span class="action-icon">üìÖ</span>
            <span class="action-text">Schedule</span>
          </button>
          <button class="quick-action-btn" onclick="clearCache()">
            <span class="action-icon">üßπ</span>
            <span class="action-text">Clear Cache</span>
          </button>
        </div>
      </div>

      <!-- API Health Summary -->
      <div class="api-section">
        <div class="section-header">
          <h2>üíö System Health Overview</h2>
          <p>Overall API ecosystem health and performance status</p>
        </div>

        <div class="health-overview">
          <div class="health-card">
            <div class="health-icon">üåê</div>
            <div class="health-info">
              <h3>API Gateway</h3>
              <p>All endpoints operational</p>
              <div class="health-status healthy">‚úÖ Healthy</div>
            </div>
          </div>
          <div class="health-card">
            <div class="health-icon">üîí</div>
            <div class="health-info">
              <h3>Security Systems</h3>
              <p>No active threats detected</p>
              <div class="health-status healthy">‚úÖ Secure</div>
            </div>
          </div>
          <div class="health-card">
            <div class="health-icon">‚ö°</div>
            <div class="health-info">
              <h3>Performance</h3>
              <p>Optimal response times</p>
              <div class="health-status healthy">‚úÖ Optimal</div>
            </div>
          </div>
          <div class="health-card">
            <div class="health-icon">üìä</div>
            <div class="health-info">
              <h3>Monitoring</h3>
              <p>All systems monitored</p>
              <div class="health-status healthy">‚úÖ Active</div>
            </div>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/profile" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          Back to Profile
        </a>
        <a href="/api/gateway" class="nav-btn primary">
          <span class="btn-icon">üö™</span>
          API Gateway
        </a>
        <a href="/api/monitoring" class="nav-btn accent">
          <span class="btn-icon">üìä</span>
          Monitoring
        </a>
      </div>
    </div>

    <script>
      ${getApiOverviewScripts()}
    </script>
  `;
}

function getApiOverviewStyles(): string {
  return `
    .api-overview-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    /* Header Section */
    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    /* Section Headers */
    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    /* Metrics Grid */
    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .metric-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .metric-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .metric-card.up {
      border-left: 4px solid #22c55e;
    }

    .metric-card.down {
      border-left: 4px solid #ef4444;
    }

    .metric-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .metric-value {
      font-size: 2.5rem;
      font-weight: 800;
      color: #40e0d0;
      margin-bottom: 0.5rem;
    }

    .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .metric-change {
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .metric-change.up {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .metric-change.down {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    /* API Categories Grid */
    .api-categories-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .api-category-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
      transition: all 0.3s ease;
    }

    .api-category-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .category-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .category-icon {
      font-size: 2rem;
    }

    .category-status {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .category-status.online {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .category-status.offline {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: currentColor;
    }

    .category-title {
      font-size: 1.5rem;
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .category-description {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1.5rem;
    }

    .category-metrics {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    .metric-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .metric-item .metric-label {
      color: #a0a9b8;
      font-size: 0.8rem;
    }

    .metric-item .metric-value {
      color: #40e0d0;
      font-weight: 600;
    }

    .category-btn {
      display: inline-block;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      text-decoration: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      transition: all 0.2s ease;
      width: 100%;
      text-align: center;
    }

    .category-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    /* Endpoints Table */
    .endpoints-table {
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      overflow: hidden;
      margin-top: 2rem;
    }

    .table-header {
      display: grid;
      grid-template-columns: 100px 3fr 1fr 100px 200px;
      gap: 1rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.1);
      font-weight: 600;
      color: #e0e6ed;
    }

    .table-row {
      display: grid;
      grid-template-columns: 100px 3fr 1fr 100px 200px;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      transition: background 0.2s ease;
    }

    .table-row:hover {
      background: rgba(255, 255, 255, 0.05);
    }

    .table-cell {
      display: flex;
      align-items: center;
      color: #a0a9b8;
    }

    .method-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
      color: white;
    }

    .method-get {
      background: #22c55e;
    }

    .method-post {
      background: #3b82f6;
    }

    .method-put {
      background: #f59e0b;
    }

    .method-delete {
      background: #ef4444;
    }

    .endpoint-path {
      color: #40e0d0;
      font-family: monospace;
      font-size: 0.9rem;
    }

    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .status-success {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .status-error {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .action-btn.small {
      padding: 0.25rem 0.75rem;
      font-size: 0.8rem;
      border-radius: 4px;
      margin-right: 0.5rem;
    }

    /* Quick Actions */
    .quick-actions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
      margin-top: 2rem;
    }

    .quick-action-btn {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.5rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      color: #e0e6ed;
    }

    .quick-action-btn:hover {
      transform: translateY(-2px);
      border-color: #40e0d0;
      box-shadow: 0 4px 15px rgba(64, 224, 208, 0.2);
    }

    .action-icon {
      font-size: 2rem;
    }

    .action-text {
      font-size: 0.9rem;
      font-weight: 600;
    }

    /* Health Overview */
    .health-overview {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .health-card {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .health-icon {
      font-size: 2rem;
    }

    .health-info h3 {
      color: #e0e6ed;
      margin-bottom: 0.25rem;
    }

    .health-info p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .health-status {
      font-size: 0.8rem;
      font-weight: 600;
      color: #22c55e;
    }

    /* Navigation */
    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    /* Animations */
    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Integration Templates */
    .templates-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .template-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
      transition: all 0.3s ease;
      text-align: center;
    }

    .template-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .template-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .template-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .template-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .template-features {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    .template-features .feature {
      background: rgba(255, 215, 0, 0.1);
      color: #ffd700;
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .template-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .template-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .template-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    /* Notification Animations */
    @keyframes slideInRight {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @keyframes slideOutRight {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(100%);
        opacity: 0;
      }
    }

    /* Enhanced Integration Cards */
    .integrations-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .integration-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .integration-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .integration-card.connected {
      border-color: #22c55e;
      background: rgba(34, 197, 94, 0.05);
    }

    .integration-card.active {
      border-color: #ffd700;
      background: rgba(255, 215, 0, 0.05);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .api-overview-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .header-status {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
      }

      .metrics-grid,
      .api-categories-grid,
      .health-overview,
      .integrations-grid,
      .templates-grid {
        grid-template-columns: 1fr;
      }

      .endpoints-table {
        display: block;
        overflow-x: auto;
      }

      .table-header,
      .table-row {
        grid-template-columns: 1fr;
        gap: 0.5rem;
      }

      .table-header {
        display: none;
      }

      .table-row {
        padding: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        margin-bottom: 1rem;
      }

      .quick-actions-grid {
        grid-template-columns: repeat(2, 1fr);
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }
    }

    /* Enhanced Metrics Dashboard */
    .metrics-dashboard {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .header-actions {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-top: 1rem;
    }

    .refresh-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      border: 1px solid rgba(64, 224, 208, 0.3);
      background: rgba(64, 224, 208, 0.1);
      color: #40e0d0;
      cursor: pointer;
      font-size: 0.9rem;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .refresh-btn:hover {
      background: #40e0d0;
      color: #0a0e27;
      transform: translateY(-1px);
    }

    .auto-refresh {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .toggle {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }

    .toggle input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.2);
      transition: 0.4s;
      border-radius: 20px;
    }

    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 14px;
      width: 14px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked + .toggle-slider {
      background-color: #40e0d0;
    }

    input:checked + .toggle-slider:before {
      transform: translateX(20px);
    }

    .toggle-label {
      font-size: 0.85rem;
      color: #a0a9b8;
      font-weight: 600;
    }

    .metric-card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 16px;
      padding: 1.5rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }

    .metric-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .metric-card.up {
      border-left: 4px solid #22c55e;
    }

    .metric-card.down {
      border-left: 4px solid #ef4444;
    }

    .metric-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .metric-icon {
      font-size: 2rem;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      border-radius: 50%;
      flex-shrink: 0;
    }

    .metric-sparkline {
      opacity: 0.7;
    }

    .metric-content {
      margin-bottom: 1rem;
    }

    .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: #e0e6ed;
      margin-bottom: 0.25rem;
    }

    .metric-label {
      font-size: 0.9rem;
      color: #a0a9b8;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .metric-change {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-size: 0.85rem;
      font-weight: 600;
      margin-top: 0.5rem;
    }

    .metric-change.up {
      color: #22c55e;
    }

    .metric-change.down {
      color: #ef4444;
    }

    .metric-details {
      padding-top: 1rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .metric-trend,
    .metric-target {
      font-size: 0.8rem;
      color: #a0a9b8;
      margin-bottom: 0.25rem;
    }

    /* Performance Chart */
    .performance-chart {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(64, 224, 208, 0.2);
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .chart-header h3 {
      color: #e0e6ed;
      margin: 0;
    }

    .chart-controls {
      display: flex;
      gap: 0.5rem;
    }

    .chart-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: 1px solid rgba(64, 224, 208, 0.3);
      background: rgba(64, 224, 208, 0.1);
      color: #40e0d0;
      cursor: pointer;
      font-size: 0.8rem;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .chart-btn:hover,
    .chart-btn.active {
      background: #40e0d0;
      color: #0a0e27;
    }

    .chart-container {
      position: relative;
      height: 200px;
    }

    .chart-placeholder {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      color: #a0a9b8;
    }

    .placeholder-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    .placeholder-text {
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .loading-spinner {
      width: 20px;
      height: 20px;
      border: 2px solid rgba(64, 224, 208, 0.3);
      border-top: 2px solid #40e0d0;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Enhanced API Category Cards */
    .system-overview {
      display: flex;
      align-items: center;
      gap: 2rem;
    }

    .system-status {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: #22c55e;
      position: relative;
    }

    .status-indicator .pulse {
      position: absolute;
      top: -4px;
      left: -4px;
      right: -4px;
      bottom: -4px;
      border: 2px solid rgba(34, 197, 94, 0.3);
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .status-text {
      color: #22c55e;
      font-weight: 600;
      font-size: 0.9rem;
    }

    .system-metrics {
      display: flex;
      gap: 1rem;
    }

    .system-metrics .metric {
      color: #a0a9b8;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .api-category-card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 16px;
      padding: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }

    .api-category-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 12px 30px rgba(64, 224, 208, 0.2);
    }

    .category-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1.5rem;
    }

    .category-icon {
      font-size: 3rem;
      width: 70px;
      height: 70px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      border-radius: 50%;
      flex-shrink: 0;
    }

    .category-status {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 700;
      text-transform: uppercase;
    }

    .category-status.online {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: #22c55e;
    }

    .status-pulse {
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border: 1px solid rgba(34, 197, 94, 0.3);
      border-radius: 50%;
      animation: pulse-ring 2s infinite;
    }

    .category-actions {
      margin-top: 0.5rem;
    }

    .category-content {
      margin-bottom: 2rem;
    }

    .category-title {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
      font-size: 1.3rem;
    }

    .category-description {
      color: #a0a9b8;
      line-height: 1.5;
      margin-bottom: 1.5rem;
    }

    .category-metrics .metric-item.primary {
      background: rgba(64, 224, 208, 0.1);
      border-radius: 8px;
      padding: 0.75rem;
      margin-bottom: 0.75rem;
      border-left: 4px solid #40e0d0;
    }

    .metric-trend {
      margin-left: 0.5rem;
      font-size: 0.9rem;
    }

    .metric-trend.up {
      color: #22c55e;
    }

    .metric-trend.stable {
      color: #a0a9b8;
    }

    .category-footer {
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      padding-top: 1.5rem;
    }

    .category-btn.primary {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      background: linear-gradient(135deg, #40e0d0, #22c55e);
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-weight: 700;
      transition: all 0.3s ease;
      margin-bottom: 1rem;
    }

    .category-btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.4);
    }

    .category-links {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .link-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: 1px solid rgba(64, 224, 208, 0.3);
      background: rgba(64, 224, 208, 0.1);
      color: #40e0d0;
      cursor: pointer;
      font-size: 0.8rem;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .link-btn:hover {
      background: #40e0d0;
      color: #0a0e27;
    }

    /* Pulse Ring Animation */
    @keyframes pulse-ring {
      0% {
        transform: scale(0.33);
        opacity: 1;
      }
      40%, 50% {
        opacity: 0.7;
      }
      100% {
        transform: scale(1);
        opacity: 0;
      }
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      .metrics-dashboard {
        gap: 1.5rem;
      }

      .header-actions {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .system-overview {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .system-metrics {
        flex-direction: column;
        gap: 0.5rem;
      }

      .metric-card {
        padding: 1rem;
      }

      .metric-header {
        margin-bottom: 0.75rem;
      }

      .metric-value {
        font-size: 1.5rem;
      }

      .category-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }

      .category-icon {
        width: 50px;
        height: 50px;
        font-size: 2rem;
      }

      .category-footer {
        flex-direction: column;
      }

      .category-links {
        justify-content: center;
      }
    }
  `;
}

function getApiOverviewScripts(): string {
  return `
    // Enterprise API Management Platform - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiOverview();
    });

    function initializeApiOverview() {
      // Start live updates
      startLiveUpdates();

      // Initialize components
      updateEndpointStatus();

      // Setup event listeners
      setupEventListeners();

      // Initialize enhanced features
      initializeMetricsDashboard();
      initializePerformanceChart();
      initializeCategoryNavigation();
    }

    function startLiveUpdates() {
      // Update timestamps every second
      setInterval(() => {
        updateLastUpdated();
      }, 1000);

      // Update metrics every 30 seconds
      setInterval(() => {
        updateLiveMetrics();
      }, 30000);
    }

    function updateLastUpdated() {
      const lastUpdateElement = document.getElementById('lastUpdate');
      if (lastUpdateElement) {
        lastUpdateElement.textContent = new Date().toLocaleTimeString();
      }
    }

    function updateLiveMetrics() {
      // Simulate real-time metric updates
      const metricCards = document.querySelectorAll('.metric-card');
      metricCards.forEach(card => {
        // Add subtle animation to indicate update
        card.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => {
          card.style.animation = '';
        }, 500);
      });
    }

    function updateEndpointStatus() {
      // Simulate endpoint status updates
      const statusBadges = document.querySelectorAll('.status-badge');
      statusBadges.forEach(badge => {
        // Occasionally change status for demo
        if (Math.random() < 0.1) {
          const currentStatus = badge.classList.contains('status-success') ? 'error' : 'success';
          badge.className = \`status-badge status-\${currentStatus}\`;
          badge.textContent = currentStatus === 'success' ? '200' : '500';
        }
      });
    }

    function setupEventListeners() {
      // Quick action buttons
      document.querySelectorAll('.quick-action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const action = this.querySelector('.action-text').textContent;
          handleQuickAction(action);
        });
      });
    }

    // Global functions for button onclick handlers
    function viewEndpointDetails(endpoint) {
      alert(\`üîç Endpoint Details: \${endpoint}\\\\n\\\\nüìä Performance Metrics:\\\\n‚Ä¢ Response Time: 142ms\\\\n‚Ä¢ Success Rate: 99.9%\\\\n‚Ä¢ Daily Calls: 15.2K\\\\n‚Ä¢ Error Rate: 0.1%\\\\n\\\\nüìã Recent Activity:\\\\n‚Ä¢ Last Call: 2 seconds ago\\\\n‚Ä¢ Peak Usage: 8:30 PM\\\\n‚Ä¢ Avg Payload: 2.3KB\\\\n\\\\nüîß Configuration:\\\\n‚Ä¢ Rate Limit: 1000/min\\\\n‚Ä¢ Timeout: 30s\\\\n‚Ä¢ Caching: Enabled\`);
    }

    function testEndpoint(endpoint) {
      alert(\`üß™ Testing Endpoint: \${endpoint}\\\\n\\\\nüîÑ Sending test request...\\\\n‚úÖ Response: 200 OK\\\\n‚ö° Response Time: 89ms\\\\nüìä Payload Size: 1.2KB\\\\n\\\\nüõ°Ô∏è Security Check: Passed\\\\nüîí Authentication: Valid\\\\nüìã Validation: Successful\\\\n\\\\n‚úÖ Endpoint is healthy and responding correctly.\`);
    }

    function createNewApi() {
      alert('‚ûï Create New API\\\\n\\\\nüöÄ API Creation Wizard\\\\n\\\\nStep 1: Define API\\\\n‚Ä¢ Name: Fantasy Sports API\\\\n‚Ä¢ Version: v2.0\\\\n‚Ä¢ Base Path: /api/v2/fantasy\\\\n\\\\nStep 2: Configure Endpoints\\\\n‚Ä¢ GET /sports - List sports\\\\n‚Ä¢ GET /sports/{id}/odds - Get odds\\\\n‚Ä¢ POST /bets - Place bet\\\\n\\\\nStep 3: Set Policies\\\\n‚Ä¢ Rate Limit: 1000/min\\\\n‚Ä¢ Authentication: JWT\\\\n‚Ä¢ CORS: Enabled\\\\n\\\\n‚úÖ API created successfully!\\\\nüîó Endpoint: /api/v2/fantasy');
    }

    function generateApiKey() {
      const apiKey = 'sk_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      alert(\`üîë API Key Generated\\\\n\\\\nüîê New API Key:\\\\n\${apiKey}\\\\n\\\\n‚ö†Ô∏è Important:\\\\n‚Ä¢ Keep this key secure\\\\n‚Ä¢ Never share in public\\\\n‚Ä¢ Rotate regularly\\\\n‚Ä¢ Monitor usage\\\\n\\\\nüìã Key Details:\\\\n‚Ä¢ Created: \${new Date().toLocaleString()}\\\\n‚Ä¢ Expires: Never\\\\n‚Ä¢ Rate Limit: 1000/min\\\\n‚Ä¢ Permissions: Read/Write\\\\n\\\\n‚úÖ Key copied to clipboard\`);
    }

    async function runHealthCheck() {
      try {
        // Fetch real statistics from the logs API
        const response = await fetch('/api/logs?limit=1&hours=24');
        const logData = await response.json();
        const stats = logData.statistics;

        const performanceMetrics = '‚Ä¢ Response Time: ' + stats.avgResponseTime + 'ms\\n‚Ä¢ Success Rate: ' + stats.successRate + '%\\n‚Ä¢ Uptime: 99.9%\\n‚Ä¢ Error Rate: ' + (100 - parseFloat(stats.successRate)).toFixed(1) + '%';

        alert('üíö API Health Check\\n\\nüîç Scanning all endpoints...\\n\\n‚úÖ API Gateway: Healthy\\n‚úÖ Authentication: Working\\n‚úÖ Database: Connected\\n‚úÖ Cache: Operational\\n‚úÖ Monitoring: Active\\n\\nüìä Performance:\\n' + performanceMetrics + '\\n\\nüõ°Ô∏è Security:\\n‚Ä¢ SSL: Active\\n‚Ä¢ Firewall: Enabled\\n‚Ä¢ DDoS Protection: Active\\n‚Ä¢ Encryption: AES-256\\n\\n‚úÖ All systems operational!');

      } catch (error) {
        console.error('Error fetching health check data:', error);
        // Fallback to original hardcoded data
        alert('üíö API Health Check\\\\n\\\\nüîç Scanning all endpoints...\\\\n\\\\n‚úÖ API Gateway: Healthy\\\\n‚úÖ Authentication: Working\\\\n‚úÖ Database: Connected\\\\n‚úÖ Cache: Operational\\\\n‚úÖ Monitoring: Active\\\\n\\\\nüìä Performance:\\\\n‚Ä¢ Response Time: 142ms\\\\n‚Ä¢ Success Rate: 99.9%\\\\n‚Ä¢ Uptime: 99.9%\\\\n‚Ä¢ Error Rate: 0.1%\\\\n\\\\nüõ°Ô∏è Security:\\\\n‚Ä¢ SSL: Active\\\\n‚Ä¢ Firewall: Enabled\\\\n‚Ä¢ DDoS Protection: Active\\\\n‚Ä¢ Encryption: AES-256\\\\n\\\\n‚úÖ All systems operational!');
      }
    }

    async function viewApiLogs() {
      try {
        // Fetch real log data from the API
        const response = await fetch('/api/logs?limit=5&hours=24');
        const logData = await response.json();

        // Format recent activity
        const recentActivity = logData.recentActivity.map(function(log) {
          return '[' + log.timestamp + '] ' + log.method + ' ' + log.endpoint + ' - ' + log.status;
        }).join('\\n');

        // Format log statistics
        const stats = logData.statistics;
        const logStats = '‚Ä¢ Total Requests: ' + stats.totalRequests.toLocaleString() + '\\n‚Ä¢ Success Rate: ' + stats.successRate + '%\\n‚Ä¢ Peak Hour: ' + stats.peakHour + '\\n‚Ä¢ Avg Response: ' + stats.avgResponseTime + 'ms';

        // Format log management info
        const metadata = logData.metadata;
        const logManagement = '‚Ä¢ Retention: ' + metadata.retentionDays + ' days\\n‚Ä¢ Storage: ' + metadata.storageSize + '\\n‚Ä¢ Compression: ' + (metadata.compressionEnabled ? 'Enabled' : 'Disabled') + '\\n‚Ä¢ Export: ' + (metadata.exportAvailable ? 'Available' : 'Unavailable');

        alert('üìã API Logs & Activity\\n\\nüîç Recent API Activity:\\n\\n' + recentActivity + '\\n\\nüìä Log Statistics:\\n' + logStats + '\\n\\nüîß Log Management:\\n' + logManagement);

      } catch (error) {
        console.error('Error fetching API logs:', error);
        // Fallback to the original hardcoded data if fetch fails
        alert('üìã API Logs & Activity\\\\n\\\\nüîç Recent API Activity:\\\\n\\\\n[14:32:15] GET /api/v2/clients - 200 OK\\\\n[14:31:42] POST /api/v2/bets - 201 Created\\\\n[14:30:18] GET /api/v2/analytics - 200 OK\\\\n[14:29:55] PUT /api/v2/profiles - 200 OK\\\\n[14:28:33] GET /api/v2/health - 200 OK\\\\n\\\\nüìä Log Statistics:\\\\n‚Ä¢ Total Requests: 47,231\\\\n‚Ä¢ Success Rate: 99.9%\\\\n‚Ä¢ Peak Hour: 8:00 PM\\\\n‚Ä¢ Avg Response: 142ms\\\\n\\\\nüîß Log Management:\\\\n‚Ä¢ Retention: 90 days\\\\n‚Ä¢ Storage: 2.3GB\\\\n‚Ä¢ Compression: Enabled\\\\n‚Ä¢ Export: Available\');
      }
    }

    function exportApiData() {
      alert('üì§ API Data Export\\\\n\\\\nüìä Export Options:\\\\n\\\\nüìã Available Datasets:\\\\n‚Ä¢ API Usage Analytics\\\\n‚Ä¢ Endpoint Performance\\\\n‚Ä¢ Error Logs\\\\n‚Ä¢ Security Events\\\\n‚Ä¢ Rate Limiting Data\\\\n\\\\nüìÅ Export Formats:\\\\n‚Ä¢ JSON (Structured)\\\\n‚Ä¢ CSV (Spreadsheet)\\\\n‚Ä¢ PDF (Report)\\\\n‚Ä¢ Excel (Analysis)\\\\n\\\\nüìÖ Date Range:\\\\n‚Ä¢ Last 24 hours\\\\n‚Ä¢ Last 7 days\\\\n‚Ä¢ Last 30 days\\\\n‚Ä¢ Custom range\\\\n\\\\n‚è≥ Exporting...\\\\n‚úÖ Files generated:\\\\nüìÅ api_usage_2025-01-29.json\\\\nüìÅ performance_report.pdf\\\\nüìÅ security_audit.xlsx\');
    }

    function configureWebhook() {
      alert('üîó Webhook Configuration\\\\n\\\\nü™ù Webhook Management\\\\n\\\\nüì° Active Webhooks:\\\\n‚Ä¢ Bet Placed (12 endpoints)\\\\n‚Ä¢ Game Started (8 endpoints)\\\\n‚Ä¢ Payout Processed (15 endpoints)\\\\n‚Ä¢ Error Alert (5 endpoints)\\\\n\\\\n‚ûï Create New Webhook:\\\\n\\\\nEvent: Payment Received\\\\nURL: https://api.client.com/webhook\\\\nMethod: POST\\\\nHeaders: Authorization, Content-Type\\\\nSecret: whsec_...\\\\n\\\\n‚úÖ Webhook created!\\\\nüîó ID: wh_1234567890\\\\nüìä Status: Active\\\\n‚ö° Test sent successfully\');
    }

    // New enhanced quick action functions
    async function fetchApiEndpoint(endpoint) {
      try {
        console.log('Fetching API endpoint:', endpoint);
        const response = await fetch(endpoint);
        const data = await response.json();

        if (response.ok) {
          // Format the response for display
          const formattedData = JSON.stringify(data, null, 2);
          alert(`‚úÖ ${endpoint.toUpperCase()}\\n\\nüìä Response Data:\\n${formattedData.substring(0, 500)}${formattedData.length > 500 ? '\\n... (truncated)' : ''}`);
        } else {
          alert(`‚ùå ${endpoint.toUpperCase()}\\n\\nError: ${data.error || 'Unknown error'}\\nStatus: ${response.status}`);
        }
      } catch (error) {
        console.error('Error fetching API endpoint:', error);
        alert(`‚ùå ${endpoint.toUpperCase()}\\n\\nNetwork Error: ${error.message}`);
      }
    }

    async function clearCache() {
      try {
        console.log('Clearing API cache...');
        const response = await fetch('/api/cache/clear', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        const data = await response.json();

        if (response.ok) {
          alert(`üßπ Cache Cleared Successfully!\\n\\nüìä Cache Statistics:\\n‚Ä¢ Previous Size: ${data.previousStats?.size || 'Unknown'}\\\\n‚Ä¢ New Size: ${data.newStats?.size || 'Unknown'}\\\\n‚Ä¢ Cleared By: ${data.clearedBy}\\\\n‚Ä¢ Timestamp: ${new Date(data.timestamp).toLocaleString()}`);
        } else {
          alert(`‚ùå Cache Clear Failed\\n\\nError: ${data.error || 'Unknown error'}\\nCode: ${data.code || response.status}`);
        }
      } catch (error) {
        console.error('Error clearing cache:', error);
        alert(`‚ùå Cache Clear Failed\\n\\nNetwork Error: ${error.message}`);
      }
    }

    function handleQuickAction(action) {
      switch(action) {
        case 'Create API':
          createNewApi();
          break;
        case 'Generate Key':
          generateApiKey();
          break;
        case 'Health Check':
          runHealthCheck();
          break;
        case 'View Logs':
          viewApiLogs();
          break;
        case 'Export Data':
          exportApiData();
          break;
        case 'Webhooks':
          configureWebhook();
          break;
      }
    }
  `;
}

function generateApiGatewayContent(employee: EmployeeData): string {
  const gatewayMetrics = [
    { label: 'Total Routes', value: '247', change: '+12', trend: 'up' },
    { label: 'Active Connections', value: '1,234', change: '+8.3%', trend: 'up' },
    { label: 'Requests/Min', value: '2,847', change: '+15.2%', trend: 'up' },
    { label: 'Avg Latency', value: '142ms', change: '-12ms', trend: 'up' }
  ];

  const activeRoutes = [
    { path: '/api/v2/clients', method: 'GET', hits: '15.2K', status: '200', target: 'Client Service' },
    { path: '/api/v2/bets', method: 'POST', hits: '8.9K', status: '201', target: 'Betting Service' },
    { path: '/api/v2/analytics', method: 'GET', hits: '12.4K', status: '200', target: 'Analytics Service' },
    { path: '/api/v2/profiles', method: 'PUT', hits: '4.7K', status: '200', target: 'User Service' },
    { path: '/api/v2/health', method: 'GET', hits: '892', status: '200', target: 'Health Service' }
  ];

  const rateLimits = [
    { endpoint: '/api/v2/bets', limit: '1000/min', used: '234', status: 'normal' },
    { endpoint: '/api/v2/analytics', limit: '500/min', used: '89', status: 'normal' },
    { endpoint: '/api/v2/clients', limit: '2000/min', used: '456', status: 'normal' },
    { endpoint: '/api/v2/profiles', limit: '300/min', used: '67', status: 'normal' }
  ];

  return `
    <div class="api-gateway-container">
      <style>
        ${getApiGatewayStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üö™ API Gateway Management</h1>
          <p>Centralized API routing, traffic management, and request orchestration</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              Gateway Online - All Routes Active
            </div>
            <div class="last-update">Last updated: <span id="gatewayLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Enhanced Gateway Performance Dashboard -->
      <div class="api-section">
        <div class="section-header">
          <h2>‚ö° Gateway Performance</h2>
          <p>Real-time API gateway metrics and traffic statistics</p>
          <div class="header-actions">
            <button class="refresh-btn" onclick="refreshGatewayMetrics()">
              <span class="refresh-icon">üîÑ</span>
              Refresh
            </button>
            <div class="gateway-status">
              <div class="status-indicator online">
                <span class="pulse"></span>
              </div>
              <span class="status-text">All Systems Operational</span>
            </div>
          </div>
        </div>

        <!-- Performance Overview Cards -->
        <div class="performance-overview">
          <div class="overview-cards">
            ${gatewayMetrics.map((metric, index) => `
              <div class="overview-card" onclick="showMetricDetails('${metric.label}')">
                <div class="card-header">
                  <div class="metric-icon">${metric.label === 'Total Routes' ? 'üîå' : metric.label === 'Active Connections' ? 'üåê' : metric.label === 'Requests/Min' ? 'üì°' : '‚ö°'}</div>
                  <div class="metric-sparkline">
                    <svg width="60" height="20" viewBox="0 0 60 20">
                      <path d="M0,15 Q15,${10 + index * 2} 30,${8 + index * 1.5} T60,${12 + index * 1.8}" stroke="#40e0d0" stroke-width="2" fill="none"/>
                    </svg>
                  </div>
                </div>
                <div class="card-content">
                  <div class="metric-value">${metric.value}</div>
                  <div class="metric-label">${metric.label}</div>
                  <div class="metric-change ${metric.trend}">
                    <span class="change-icon">${metric.trend === 'up' ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'}</span>
                    <span class="change-value">${metric.change}</span>
                  </div>
                </div>
                <div class="card-footer">
                  <div class="metric-target">Target: ${metric.label === 'Avg Latency' ? '< 150ms' : 'Optimal'}</div>
                  <div class="metric-status ${metric.trend === 'up' ? 'good' : 'warning'}">${metric.trend === 'up' ? 'On Track' : 'Monitor'}</div>
                </div>
              </div>
            `).join('')}
          </div>

          <!-- Traffic Flow Visualization -->
          <div class="traffic-visualization">
            <div class="viz-header">
              <h3>üåä Real-time Traffic Flow</h3>
              <div class="viz-controls">
                <button class="viz-btn active" onclick="setTrafficView('requests')">Requests</button>
                <button class="viz-btn" onclick="setTrafficView('latency')">Latency</button>
                <button class="viz-btn" onclick="setTrafficView('errors')">Errors</button>
              </div>
            </div>
            <div class="traffic-chart">
              <div class="chart-placeholder">
                <div class="chart-icon">üìà</div>
                <div class="chart-text">Live traffic visualization</div>
                <div class="chart-bars">
                  <div class="bar" style="height: 40%"></div>
                  <div class="bar" style="height: 60%"></div>
                  <div class="bar" style="height: 80%"></div>
                  <div class="bar" style="height: 55%"></div>
                  <div class="bar" style="height: 70%"></div>
                  <div class="bar" style="height: 45%"></div>
                  <div class="bar" style="height: 85%"></div>
                  <div class="bar" style="height: 65%"></div>
                  <div class="bar" style="height: 75%"></div>
                  <div class="bar" style="height: 50%"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Advanced Route Management -->
      <div class="api-section">
        <div class="section-header">
          <h2>üõ£Ô∏è Route Management</h2>
          <p>Interactive API route configuration and traffic management</p>
          <div class="header-actions">
            <button class="action-btn primary" onclick="addNewRoute()">
              <span class="btn-icon">‚ûï</span>
              Add Route
            </button>
            <button class="action-btn secondary" onclick="bulkRouteActions()">
              <span class="btn-icon">‚öôÔ∏è</span>
              Bulk Actions
            </button>
            <div class="route-filters">
              <select id="methodFilter" onchange="filterRoutes()">
                <option value="">All Methods</option>
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
              </select>
              <input type="text" id="routeSearch" placeholder="Search routes..." onkeyup="filterRoutes()">
            </div>
          </div>
        </div>

        <!-- Route Statistics -->
        <div class="route-stats">
          <div class="stat-card">
            <div class="stat-icon">üîå</div>
            <div class="stat-content">
              <div class="stat-value">${activeRoutes.length}</div>
              <div class="stat-label">Active Routes</div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üìä</div>
            <div class="stat-content">
              <div class="stat-value">${activeRoutes.reduce((sum, route) => sum + parseFloat(route.hits.replace('K', '000')), 0)}K+</div>
              <div class="stat-label">Total Hits Today</div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">‚úÖ</div>
            <div class="stat-content">
              <div class="stat-value">99.8%</div>
              <div class="stat-label">Route Health</div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">‚ö°</div>
            <div class="stat-content">
              <div class="stat-value">142ms</div>
              <div class="stat-label">Avg Response</div>
            </div>
          </div>
        </div>

        <!-- Interactive Routes Table -->
        <div class="routes-container">
          <div class="routes-table" id="routesTable">
            <div class="table-header">
              <div class="table-cell">
                <input type="checkbox" id="selectAllRoutes" onchange="toggleSelectAll()">
              </div>
              <div class="table-cell">Method</div>
              <div class="table-cell">Route</div>
              <div class="table-cell">Traffic</div>
              <div class="table-cell">Status</div>
              <div class="table-cell">Target</div>
              <div class="table-cell">Actions</div>
            </div>
            ${activeRoutes.map((route, index) => `
              <div class="table-row" data-route="${route.path}">
                <div class="table-cell">
                  <input type="checkbox" class="route-checkbox" data-route="${route.path}">
                </div>
                <div class="table-cell">
                  <span class="method-badge method-${route.method.toLowerCase()}">${route.method}</span>
                </div>
                <div class="table-cell route-path">
                  <div class="route-name">${route.path}</div>
                  <div class="route-traffic-bar">
                    <div class="traffic-fill" style="width: ${Math.min(100, (parseFloat(route.hits.replace('K', '')) / 20) * 100)}%"></div>
                  </div>
                </div>
                <div class="table-cell">
                  <div class="traffic-metric">
                    <div class="traffic-value">${route.hits}</div>
                    <div class="traffic-change ${Math.random() > 0.5 ? 'up' : 'down'}">
                      ${Math.random() > 0.5 ? '+' : ''}${Math.floor(Math.random() * 20) + 5}%
                    </div>
                  </div>
                </div>
                <div class="table-cell">
                  <span class="status-badge status-${route.status.startsWith('2') ? 'success' : 'error'}">
                    ${route.status}
                  </span>
                </div>
                <div class="table-cell">
                  <div class="target-info">
                    <div class="target-name">${route.target}</div>
                    <div class="target-health ${Math.random() > 0.7 ? 'degraded' : 'healthy'}">
                      ‚óè ${Math.random() > 0.7 ? 'Degraded' : 'Healthy'}
                    </div>
                  </div>
                </div>
                <div class="table-cell">
                  <div class="route-actions">
                    <button class="action-btn small" onclick="editRoute('${route.path}')" title="Edit Route">
                      ‚úèÔ∏è
                    </button>
                    <button class="action-btn small" onclick="viewRouteMetrics('${route.path}')" title="View Metrics">
                      üìä
                    </button>
                    <button class="action-btn small ${route.status === '200' ? 'danger' : 'secondary'}" onclick="toggleRoute('${route.path}')" title="${route.status === '200' ? 'Disable' : 'Enable'} Route">
                      ${route.status === '200' ? 'üî¥' : 'üü¢'}
                    </button>
                  </div>
                </div>
              </div>
            `).join('')}
          </div>

          <!-- Route Configuration Panel -->
          <div class="route-config-panel" id="routeConfigPanel" style="display: none;">
            <div class="config-header">
              <h3>üîß Route Configuration</h3>
              <button class="close-btn" onclick="closeRouteConfig()">√ó</button>
            </div>
            <div class="config-content" id="configContent">
              <!-- Dynamic content loaded here -->
            </div>
          </div>
        </div>
      </div>

      <!-- Rate Limiting -->
      <div class="api-section">
        <div class="section-header">
          <h2>üö¶ Rate Limiting</h2>
          <p>API rate limits and usage monitoring</p>
        </div>

        <div class="rate-limits-grid">
          ${rateLimits.map(limit => `
            <div class="rate-limit-card ${limit.status}">
              <div class="rate-limit-header">
                <h3>${limit.endpoint}</h3>
                <div class="rate-limit-status ${limit.status}">
                  ${limit.status.toUpperCase()}
                </div>
              </div>
              <div class="rate-limit-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: ${(parseInt(limit.used) / parseInt(limit.limit.split('/')[0])) * 100}%"></div>
                </div>
                <div class="progress-text">${limit.used} / ${limit.limit}</div>
              </div>
              <div class="rate-limit-actions">
                <button class="action-btn small" onclick="adjustLimit('${limit.endpoint}')">Adjust</button>
                <button class="action-btn small secondary" onclick="viewLimitHistory('${limit.endpoint}')">History</button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Gateway Controls -->
      <div class="api-section">
        <div class="section-header">
          <h2>üéõÔ∏è Gateway Controls</h2>
          <p>Advanced gateway management and configuration</p>
        </div>

        <div class="control-panels">
          <div class="control-panel">
            <div class="panel-header">
              <div class="panel-icon">üîÑ</div>
              <h3>Traffic Management</h3>
            </div>
            <div class="panel-controls">
              <button class="control-btn" onclick="enableMaintenanceMode()">Maintenance Mode</button>
              <button class="control-btn secondary" onclick="adjustLoadBalancer()">Load Balancer</button>
              <button class="control-btn secondary" onclick="configureCircuitBreaker()">Circuit Breaker</button>
            </div>
          </div>

          <div class="control-panel">
            <div class="panel-header">
              <div class="panel-icon">üîí</div>
              <h3>Security Policies</h3>
            </div>
            <div class="panel-controls">
              <button class="control-btn" onclick="configureCors()">CORS Policy</button>
              <button class="control-btn secondary" onclick="setupIpWhitelist()">IP Whitelist</button>
              <button class="control-btn secondary" onclick="configureApiKeys()">API Keys</button>
            </div>
          </div>

          <div class="control-panel">
            <div class="panel-header">
              <div class="panel-icon">üìä</div>
              <h3>Monitoring</h3>
            </div>
            <div class="panel-controls">
              <button class="control-btn" onclick="enableTracing()">Request Tracing</button>
              <button class="control-btn secondary" onclick="setupAlerts()">Alert Rules</button>
              <button class="control-btn secondary" onclick="viewLogs()">Access Logs</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Service Discovery -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîç Service Discovery</h2>
          <p>Backend service registration and health monitoring</p>
        </div>

        <div class="service-discovery">
          <div class="service-card">
            <div class="service-header">
              <h3>Client Service</h3>
              <div class="service-status healthy">‚óè Healthy</div>
            </div>
            <div class="service-info">
              <div class="service-metric">Endpoints: 12</div>
              <div class="service-metric">Response: 89ms</div>
              <div class="service-metric">Load: 67%</div>
            </div>
          </div>

          <div class="service-card">
            <div class="service-header">
              <h3>Betting Service</h3>
              <div class="service-status healthy">‚óè Healthy</div>
            </div>
            <div class="service-info">
              <div class="service-metric">Endpoints: 8</div>
              <div class="service-metric">Response: 134ms</div>
              <div class="service-metric">Load: 45%</div>
            </div>
          </div>

          <div class="service-card">
            <div class="service-header">
              <h3>Analytics Service</h3>
              <div class="service-status healthy">‚óè Healthy</div>
            </div>
            <div class="service-info">
              <div class="service-metric">Endpoints: 15</div>
              <div class="service-metric">Response: 156ms</div>
              <div class="service-metric">Load: 78%</div>
            </div>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          API Overview
        </a>
        <a href="/api/monitoring" class="nav-btn primary">
          <span class="btn-icon">üìä</span>
          Monitoring
        </a>
        <a href="/api/security" class="nav-btn accent">
          <span class="btn-icon">üîí</span>
          Security
        </a>
      </div>
    </div>

    <script>
      ${getApiGatewayScripts()}
    </script>
  `;
}

function getApiGatewayStyles(): string {
  return `
    .api-gateway-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .metric-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .metric-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .metric-card.up {
      border-left: 4px solid #22c55e;
    }

    .routes-table, .rate-limits-grid {
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      overflow: hidden;
      margin-top: 2rem;
    }

    .table-header {
      display: grid;
      grid-template-columns: 100px 3fr 1fr 100px 1fr 150px;
      gap: 1rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.1);
      font-weight: 600;
      color: #e0e6ed;
    }

    .table-row {
      display: grid;
      grid-template-columns: 100px 3fr 1fr 100px 1fr 150px;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      transition: background 0.2s ease;
    }

    .table-row:hover {
      background: rgba(255, 255, 255, 0.05);
    }

    .method-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
      color: white;
    }

    .method-get {
      background: #22c55e;
    }

    .method-post {
      background: #3b82f6;
    }

    .method-put {
      background: #f59e0b;
    }

    .method-delete {
      background: #ef4444;
    }

    .route-path, .endpoint-path {
      color: #40e0d0;
      font-family: monospace;
      font-size: 0.9rem;
    }

    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .status-success {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .status-error {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .rate-limit-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(251, 191, 36, 0.3);
    }

    .rate-limit-card.normal {
      border-color: rgba(34, 197, 94, 0.3);
    }

    .rate-limit-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .rate-limit-header h3 {
      color: #e0e6ed;
      font-size: 1rem;
    }

    .rate-limit-status {
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      font-size: 0.7rem;
      font-weight: 600;
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .rate-limit-progress {
      margin-bottom: 1rem;
    }

    .progress-bar {
      width: 100%;
      height: 8px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 0.5rem;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #ffd700, #ff6b35);
      transition: width 0.3s ease;
    }

    .progress-text {
      font-size: 0.8rem;
      color: #a0a9b8;
    }

    .control-panels {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .control-panel {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
    }

    .panel-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .panel-icon {
      font-size: 2rem;
    }

    .panel-header h3 {
      color: #e0e6ed;
      margin: 0;
    }

    .panel-controls {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .control-btn {
      padding: 0.75rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }

    .control-btn:not(.secondary) {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .control-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .control-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    .service-discovery {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .service-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .service-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .service-header h3 {
      color: #e0e6ed;
      margin: 0;
    }

    .service-status {
      color: #22c55e;
      font-weight: 600;
    }

    .service-info {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .service-metric {
      font-size: 0.9rem;
      color: #a0a9b8;
    }

    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .api-gateway-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .control-panels {
        grid-template-columns: 1fr;
      }

      .service-discovery {
        grid-template-columns: 1fr;
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }

      /* Enhanced Performance Dashboard */
      .performance-overview {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
      }

      .overview-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
      }

      .overview-card {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 16px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
      }

      .overview-card:hover {
        transform: translateY(-5px);
        border-color: #40e0d0;
        box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
      }

      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }

      .metric-sparkline {
        opacity: 0.7;
      }

      .card-content {
        margin-bottom: 1rem;
      }

      .card-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .metric-target,
      .metric-status {
        font-size: 0.8rem;
        color: #a0a9b8;
      }

      .metric-status.good {
        color: #22c55e;
      }

      .metric-status.warning {
        color: #f59e0b;
      }

      /* Traffic Visualization */
      .traffic-visualization {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.2);
      }

      .viz-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
      }

      .viz-header h3 {
        color: #e0e6ed;
        margin: 0;
      }

      .viz-controls {
        display: flex;
        gap: 0.5rem;
      }

      .viz-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(64, 224, 208, 0.1);
        color: #40e0d0;
        cursor: pointer;
        font-size: 0.8rem;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .viz-btn:hover,
      .viz-btn.active {
        background: #40e0d0;
        color: #0a0e27;
      }

      .traffic-chart {
        height: 200px;
        position: relative;
      }

      .chart-placeholder {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #a0a9b8;
      }

      .chart-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
      }

      .chart-text {
        font-size: 0.9rem;
        margin-bottom: 1rem;
      }

      .chart-bars {
        display: flex;
        align-items: end;
        justify-content: center;
        gap: 4px;
        height: 60px;
      }

      .bar {
        width: 8px;
        background: linear-gradient(135deg, #40e0d0, #22c55e);
        border-radius: 4px;
        animation: barPulse 2s ease-in-out infinite;
      }

      .bar:nth-child(odd) {
        animation-delay: 0.2s;
      }

      .bar:nth-child(even) {
        animation-delay: 0.4s;
      }

      @keyframes barPulse {
        0%, 100% { opacity: 0.7; transform: scaleY(1); }
        50% { opacity: 1; transform: scaleY(1.1); }
      }

      /* Enhanced Route Management */
      .route-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
      }

      .stat-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1rem;
        border: 1px solid rgba(64, 224, 208, 0.2);
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .stat-icon {
        font-size: 2rem;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(64, 224, 208, 0.1);
        border-radius: 50%;
      }

      .stat-content {
        flex: 1;
      }

      .stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #e0e6ed;
      }

      .stat-label {
        font-size: 0.85rem;
        color: #a0a9b8;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .route-filters {
        display: flex;
        gap: 1rem;
        align-items: center;
      }

      .route-filters select,
      .route-filters input {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(255, 255, 255, 0.05);
        color: #e0e6ed;
        font-size: 0.9rem;
      }

      .route-filters input:focus,
      .route-filters select:focus {
        outline: none;
        border-color: #40e0d0;
      }

      .routes-container {
        position: relative;
      }

      .route-checkbox {
        width: 16px;
        height: 16px;
        accent-color: #40e0d0;
      }

      .route-path {
        max-width: 300px;
      }

      .route-name {
        color: #e0e6ed;
        font-family: 'Monaco', 'Menlo', monospace;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
      }

      .route-traffic-bar {
        width: 100%;
        height: 4px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
        overflow: hidden;
      }

      .traffic-fill {
        height: 100%;
        background: linear-gradient(90deg, #22c55e, #40e0d0);
        border-radius: 2px;
        transition: width 0.3s ease;
      }

      .traffic-metric {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
      }

      .traffic-value {
        color: #e0e6ed;
        font-weight: 600;
      }

      .traffic-change {
        font-size: 0.8rem;
        font-weight: 600;
      }

      .traffic-change.up {
        color: #22c55e;
      }

      .traffic-change.down {
        color: #ef4444;
      }

      .target-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
      }

      .target-name {
        color: #e0e6ed;
        font-weight: 600;
      }

      .target-health {
        font-size: 0.8rem;
        font-weight: 600;
      }

      .target-health.healthy {
        color: #22c55e;
      }

      .target-health.degraded {
        color: #f59e0b;
      }

      .route-actions {
        display: flex;
        gap: 0.5rem;
      }

      .route-actions .action-btn {
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
      }

      .route-config-panel {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(26, 31, 58, 0.95);
        border-radius: 16px;
        padding: 2rem;
        border: 1px solid rgba(64, 224, 208, 0.3);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        z-index: 1000;
        max-width: 600px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
      }

      .config-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .config-header h3 {
        color: #e0e6ed;
        margin: 0;
      }

      .close-btn {
        background: none;
        border: none;
        color: #a0a9b8;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
      }

      .close-btn:hover {
        background: rgba(255, 255, 255, 0.1);
        color: #e0e6ed;
      }

      /* Enhanced Rate Limiting */
      .rate-limits-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
      }

      .rate-limit-card {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.3);
        transition: all 0.3s ease;
      }

      .rate-limit-card.normal {
        border-color: rgba(34, 197, 94, 0.3);
      }

      .rate-limit-card.warning {
        border-color: rgba(245, 158, 11, 0.3);
      }

      .rate-limit-card.critical {
        border-color: rgba(239, 68, 68, 0.3);
      }

      .rate-limit-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
      }

      .rate-limit-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }

      .rate-limit-header h3 {
        color: #e0e6ed;
        margin: 0;
        font-size: 1.1rem;
      }

      .rate-limit-status {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
      }

      .rate-limit-status.normal {
        background: rgba(34, 197, 94, 0.2);
        color: #22c55e;
      }

      .rate-limit-status.warning {
        background: rgba(245, 158, 11, 0.2);
        color: #f59e0b;
      }

      .rate-limit-progress {
        margin-bottom: 1rem;
      }

      .progress-bar {
        width: 100%;
        height: 8px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #22c55e, #40e0d0);
        border-radius: 4px;
        transition: width 0.3s ease;
      }

      .progress-fill.warning {
        background: linear-gradient(90deg, #f59e0b, #f97316);
      }

      .progress-fill.critical {
        background: linear-gradient(90deg, #ef4444, #dc2626);
      }

      .progress-text {
        font-size: 0.9rem;
        color: #a0a9b8;
        text-align: center;
      }

      .rate-limit-actions {
        display: flex;
        gap: 0.75rem;
      }

      /* Mobile Responsive Enhancements */
      @media (max-width: 768px) {
        .performance-overview {
          grid-template-columns: 1fr;
          gap: 1.5rem;
        }

        .overview-cards {
          grid-template-columns: 1fr;
        }

        .route-stats {
          grid-template-columns: repeat(2, 1fr);
          gap: 1rem;
        }

        .route-filters {
          flex-direction: column;
          width: 100%;
        }

        .route-filters select,
        .route-filters input {
          flex: 1;
        }

        .route-config-panel {
          width: 95%;
          max-height: 90vh;
        }

        .rate-limits-grid {
          grid-template-columns: 1fr;
        }

        .control-panels {
          grid-template-columns: 1fr;
        }
      }
    }
  `;
}

function getApiGatewayScripts(): string {
  return `
    // API Gateway Management - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiGateway();
    });

    function initializeApiGateway() {
      startGatewayUpdates();
      setupGatewayListeners();

      // Initialize enhanced features
      initializeGatewayDashboard();
      initializeTrafficVisualization();
      initializeRouteManagement();
      initializeRateLimiting();
    }

    function startGatewayUpdates() {
      setInterval(() => {
        updateGatewayTimestamp();
        updateRouteMetrics();
      }, 1000);
    }

    function updateGatewayTimestamp() {
      const element = document.getElementById('gatewayLastUpdate');
      if (element) {
        element.textContent = new Date().toLocaleTimeString();
      }
    }

    function updateRouteMetrics() {
      // Simulate route metric updates
      const rows = document.querySelectorAll('.table-row');
      rows.forEach(row => {
        if (Math.random() < 0.1) {
          row.style.animation = 'pulse 0.5s ease-in-out';
          setTimeout(() => {
            row.style.animation = '';
          }, 500);
        }
      });
    }

    function setupGatewayListeners() {
      // Route management buttons
      document.querySelectorAll('.action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const action = this.textContent;
          const route = this.closest('.table-row').querySelector('.route-path').textContent;
          handleRouteAction(action, route);
        });
      });
    }

    // Global functions for button onclick handlers
    function editRoute(route) {
      alert(\`üîß Edit Route: \${route}\\\\n\\\\nüìù Route Configuration:\\\\n\\\\nCurrent Settings:\\\\n‚Ä¢ Method: GET, POST, PUT\\\\n‚Ä¢ Target: Client Service\\\\n‚Ä¢ Rate Limit: 1000/min\\\\n‚Ä¢ Timeout: 30s\\\\n‚Ä¢ Authentication: JWT\\\\n\\\\n‚úèÔ∏è Edit Options:\\\\n‚Ä¢ Change target service\\\\n‚Ä¢ Adjust rate limits\\\\n‚Ä¢ Modify authentication\\\\n‚Ä¢ Update timeout settings\\\\n‚Ä¢ Configure caching\\\\n\\\\n‚úÖ Changes saved successfully!\`);
    }

    function viewRouteMetrics(route) {
      alert(\`üìä Route Metrics: \${route}\\\\n\\\\nüìà Performance Data:\\\\n\\\\nResponse Times:\\\\n‚Ä¢ Average: 142ms\\\\n‚Ä¢ 95th percentile: 234ms\\\\n‚Ä¢ 99th percentile: 456ms\\\\n\\\\nTraffic Volume:\\\\n‚Ä¢ Daily requests: 15.2K\\\\n‚Ä¢ Peak hour: 8:00 PM\\\\n‚Ä¢ Error rate: 0.1%\\\\n\\\\nUsage Patterns:\\\\n‚Ä¢ Top client: VIP Client #247\\\\n‚Ä¢ Peak day: Saturday\\\\n‚Ä¢ Mobile traffic: 67%\\\\n\\\\nüîÑ Real-time monitoring active\`);
    }

    function adjustLimit(endpoint) {
      const newLimit = prompt(\`Adjust Rate Limit for \${endpoint}\\\\n\\\\nCurrent: 1000/min\\\\n\\\\nNew limit (requests/min):\`, '1000');
      if (newLimit && !isNaN(newLimit)) {
        alert(\`‚úÖ Rate limit updated!\\\\n\\\\nEndpoint: \${endpoint}\\\\nOld limit: 1000/min\\\\nNew limit: \${newLimit}/min\\\\n\\\\nüìä Impact Assessment:\\\\n‚Ä¢ Expected usage: \${Math.round(newLimit * 0.7)}/min\\\\n‚Ä¢ Safety margin: 30%\\\\n‚Ä¢ Auto-scaling: Enabled\\\\n\\\\nüîÑ Changes applied to all gateway instances\`);
      }
    }

    function viewLimitHistory(endpoint) {
      alert(\`üìã Rate Limit History: \${endpoint}\\\\n\\\\nüìä Historical Data:\\\\n\\\\nLast 24 Hours:\\\\n‚Ä¢ Peak usage: 892/min\\\\n‚Ä¢ Average usage: 456/min\\\\n‚Ä¢ Throttled requests: 23\\\\n\\\\nLast 7 Days:\\\\n‚Ä¢ Highest peak: 1,234/min\\\\n‚Ä¢ Average daily: 678/min\\\\n‚Ä¢ Total throttled: 156\\\\n\\\\nüìà Trends:\\\\n‚Ä¢ Growth rate: +15.3%\\\\n‚Ä¢ Seasonal peak: Weekends\\\\n‚Ä¢ Client distribution: 89% VIP\\\\n\\\\n‚öôÔ∏è Recommendations:\\\\n‚Ä¢ Current limit adequate\\\\n‚Ä¢ Monitor weekend usage\\\\n‚Ä¢ Consider client-specific limits\`);
    }

    function handleRouteAction(action, route) {
      switch(action) {
        case 'Edit':
          editRoute(route);
          break;
        case 'Metrics':
          viewRouteMetrics(route);
          break;
      }
    }

    function enableMaintenanceMode() {
      if (confirm('üõ†Ô∏è Enable Maintenance Mode?\\\\n\\\\nThis will:\\\\n‚Ä¢ Return 503 for all requests\\\\n‚Ä¢ Show maintenance page\\\\n‚Ä¢ Notify all services\\\\n‚Ä¢ Preserve user sessions\\\\n\\\\nDuration: Until manually disabled\\\\nImpact: All API traffic affected\\\\n\\\\nAre you sure?')) {
        alert('üõ†Ô∏è Maintenance Mode Enabled\\\\n\\\\n‚úÖ All endpoints returning 503\\\\nüìÑ Maintenance page active\\\\nüìß Services notified\\\\n‚è∞ Started: ' + new Date().toLocaleString() + '\\\\n\\\\nüîÑ To disable: Use control panel\\\\nüìû Emergency override available\\\\n\\\\n‚ö†Ô∏è Monitor system health during maintenance');
      }
    }

    function adjustLoadBalancer() {
      alert('‚öñÔ∏è Load Balancer Configuration\\\\n\\\\nüîß Current Setup:\\\\n\\\\nAlgorithm: Round Robin\\\\nInstances: 4 active\\\\nHealth checks: Every 30s\\\\nSession affinity: Disabled\\\\n\\\\nüìä Performance:\\\\n‚Ä¢ Total capacity: 10,000 RPS\\\\n‚Ä¢ Current load: 2,847 RPS\\\\n‚Ä¢ Utilization: 28%\\\\n‚Ä¢ Health score: 98/100\\\\n\\\\n‚öôÔ∏è Quick Actions:\\\\n‚Ä¢ Add instance (+25% capacity)\\\\n‚Ä¢ Change algorithm\\\\n‚Ä¢ Enable sticky sessions\\\\n‚Ä¢ Update health checks\\\\n\\\\n‚úÖ Configuration updated!');
    }

    function configureCircuitBreaker() {
      alert('üîå Circuit Breaker Settings\\\\n\\\\nüõ°Ô∏è Protection Configuration:\\\\n\\\\nCurrent Settings:\\\\n‚Ä¢ Failure threshold: 50%\\\\n‚Ä¢ Recovery timeout: 60s\\\\n‚Ä¢ Monitoring window: 10 requests\\\\n‚Ä¢ Half-open max calls: 5\\\\n\\\\nüìä Circuit Status:\\\\n‚Ä¢ State: CLOSED (healthy)\\\\n‚Ä¢ Success rate: 99.9%\\\\n‚Ä¢ Failures (last 10): 0\\\\n‚Ä¢ Last failure: Never\\\\n\\\\n‚öôÔ∏è Configuration Options:\\\\n‚Ä¢ Adjust failure threshold\\\\n‚Ä¢ Change recovery timeout\\\\n‚Ä¢ Modify monitoring window\\\\n‚Ä¢ Set half-open limits\\\\n\\\\n‚úÖ Circuit breaker optimized!');
    }

    function configureCors() {
      alert('üåê CORS Policy Configuration\\\\n\\\\nüîì Current Policy:\\\\n\\\\nAllowed Origins:\\\\n‚Ä¢ https://sportsfire.co\\\\n‚Ä¢ https://*.sportsfire.co\\\\n‚Ä¢ https://localhost:*\\\\n\\\\nAllowed Methods:\\\\n‚Ä¢ GET, POST, PUT, DELETE\\\\n‚Ä¢ OPTIONS (preflight)\\\\n\\\\nAllowed Headers:\\\\n‚Ä¢ Authorization\\\\n‚Ä¢ Content-Type\\\\n‚Ä¢ X-API-Key\\\\n‚Ä¢ X-Requested-With\\\\n\\\\nüìä Usage Stats:\\\\n‚Ä¢ Preflight requests: 2,847/day\\\\n‚Ä¢ CORS violations: 0\\\\n‚Ä¢ Blocked origins: 12\\\\n\\\\n‚úèÔ∏è Edit Policy:\\\\n‚Ä¢ Add/remove origins\\\\n‚Ä¢ Modify headers\\\\n‚Ä¢ Update methods\\\\n‚Ä¢ Enable credentials\\\\n\\\\n‚úÖ CORS policy updated!');
    }

    function setupIpWhitelist() {
      alert('üìã IP Whitelist Management\\\\n\\\\nüîí Access Control:\\\\n\\\\nCurrent Whitelist:\\\\n‚Ä¢ 192.168.1.0/24 (Office)\\\\n‚Ä¢ 10.0.0.0/8 (Internal)\\\\n‚Ä¢ 172.16.0.0/12 (VPN)\\\\n‚Ä¢ 203.0.113.0/24 (Partners)\\\\n\\\\nüìä Access Stats:\\\\n‚Ä¢ Total IPs: 1,247\\\\n‚Ä¢ Active today: 892\\\\n‚Ä¢ Blocked attempts: 34\\\\n‚Ä¢ Top source: Office network\\\\n\\\\n‚ûï Add IP/Network:\\\\n‚Ä¢ Single IP: 192.168.1.100\\\\n‚Ä¢ CIDR Block: 192.168.2.0/24\\\\n‚Ä¢ IP Range: 192.168.3.1-192.168.3.254\\\\n\\\\nüóëÔ∏è Remove Entries:\\\\n‚Ä¢ Select and delete\\\\n‚Ä¢ Bulk operations\\\\n‚Ä¢ Temporary blocks\\\\n\\\\n‚úÖ IP whitelist updated!');
    }

    function configureApiKeys() {
      alert('üîë API Key Management\\\\n\\\\nüóùÔ∏è Key Inventory:\\\\n\\\\nActive Keys: 247\\\\nTotal Issued: 892\\\\nExpired: 23\\\\nRevoked: 12\\\\n\\\\nüîê Key Types:\\\\n‚Ä¢ Production: 189 keys\\\\n‚Ä¢ Development: 45 keys\\\\n‚Ä¢ Testing: 13 keys\\\\n‚Ä¢ Legacy: 0 keys\\\\n\\\\nüìä Usage Stats:\\\\n‚Ä¢ Most active: prod_key_001\\\\n‚Ä¢ Highest usage: 15.2K calls/day\\\\n‚Ä¢ Average usage: 4.7K calls/day\\\\n\\\\nüîß Key Operations:\\\\n‚Ä¢ Generate new key\\\\n‚Ä¢ Rotate existing key\\\\n‚Ä¢ Revoke compromised key\\\\n‚Ä¢ Set rate limits\\\\n‚Ä¢ Configure permissions\\\\n\\\\n‚úÖ API key configuration saved!');
    }

    function enableTracing() {
      alert('üîç Request Tracing Enabled\\\\n\\\\nüì° Tracing Configuration:\\\\n\\\\nTrace Settings:\\\\n‚Ä¢ Sample rate: 10%\\\\n‚Ä¢ Max duration: 5 minutes\\\\n‚Ä¢ Include headers: Yes\\\\n‚Ä¢ Include body: No\\\\n\\\\nüìä Trace Data:\\\\n‚Ä¢ Traces collected: 2,847\\\\n‚Ä¢ Average latency: 142ms\\\\n‚Ä¢ Error traces: 23\\\\n‚Ä¢ Storage used: 1.2GB\\\\n\\\\nüîß Trace Features:\\\\n‚Ä¢ Distributed tracing\\\\n‚Ä¢ Performance profiling\\\\n‚Ä¢ Error correlation\\\\n‚Ä¢ Service mesh integration\\\\n\\\\n‚úÖ Request tracing active!\\\\nüìä View traces in monitoring dashboard');
    }

    function setupAlerts() {
      alert('üö® Alert Rules Configuration\\\\n\\\\n‚ö†Ô∏è Active Alerts:\\\\n\\\\nPerformance Alerts:\\\\n‚Ä¢ Response time > 500ms\\\\n‚Ä¢ Error rate > 5%\\\\n‚Ä¢ CPU usage > 80%\\\\n\\\\nSecurity Alerts:\\\\n‚Ä¢ Failed authentication\\\\n‚Ä¢ Rate limit exceeded\\\\n‚Ä¢ Suspicious patterns\\\\n\\\\nSystem Alerts:\\\\n‚Ä¢ Service down\\\\n‚Ä¢ Database connection\\\\n‚Ä¢ Memory usage\\\\n\\\\nüìß Notification Settings:\\\\n‚Ä¢ Email: alerts@company.com\\\\n‚Ä¢ Slack: #api-alerts\\\\n‚Ä¢ SMS: Emergency only\\\\n\\\\nüìä Alert History:\\\\n‚Ä¢ Today: 3 alerts\\\\n‚Ä¢ This week: 23 alerts\\\\n‚Ä¢ False positives: 2\\\\n\\\\n‚úÖ Alert rules updated!');
    }

    function viewLogs() {
      alert('üìã Access Logs & Audit Trail\\\\n\\\\nüìÑ Log Management:\\\\n\\\\nLog Files:\\\\n‚Ä¢ Access logs: 2.3GB\\\\n‚Ä¢ Error logs: 156MB\\\\n‚Ä¢ Security logs: 89MB\\\\n‚Ä¢ Audit logs: 445MB\\\\n\\\\nüìä Log Statistics:\\\\n‚Ä¢ Daily requests: 47.2K\\\\n‚Ä¢ Error rate: 0.1%\\\\n‚Ä¢ Top endpoint: /api/v2/clients\\\\n‚Ä¢ Peak hour: 8:00 PM\\\\n\\\\nüîç Log Analysis:\\\\n‚Ä¢ Search by IP\\\\n‚Ä¢ Filter by endpoint\\\\n‚Ä¢ Time range queries\\\\n‚Ä¢ Export capabilities\\\\n\\\\nüìà Insights:\\\\n‚Ä¢ Most active user: VIP Client #247\\\\n‚Ä¢ Common errors: Authentication\\\\n‚Ä¢ Geographic distribution: 67 countries\\\\n\\\\n‚úÖ Logs accessible via dashboard');
    }
  `;
}

function generateApiMonitoringContent(employee: EmployeeData): string {
  const monitoringMetrics = [
    { label: 'Active Alerts', value: '0', change: '0', trend: 'neutral', icon: 'üö®' },
    { label: 'Response Time', value: '142ms', change: '-12ms', trend: 'up', icon: '‚ö°' },
    { label: 'Throughput', value: '47.2K', change: '+8.3%', trend: 'up', icon: 'üìä' },
    { label: 'Error Rate', value: '0.1%', change: '-0.05%', trend: 'up', icon: '‚ùå' }
  ];

  const recentAlerts = [
    { type: 'info', message: 'Daily backup completed successfully', time: '2 hours ago', endpoint: '/api/backup' },
    { type: 'warning', message: 'High traffic detected on /api/analytics', time: '4 hours ago', endpoint: '/api/analytics' },
    { type: 'success', message: 'SSL certificate renewed', time: '1 day ago', endpoint: 'system' },
    { type: 'error', message: 'Database connection timeout', time: '2 days ago', endpoint: '/api/database' }
  ];

  const performanceMetrics = [
    { endpoint: '/api/v2/clients', p50: '89ms', p95: '234ms', p99: '456ms', calls: '15.2K', errors: '23' },
    { endpoint: '/api/v2/bets', p50: '134ms', p95: '345ms', p99: '678ms', calls: '8.9K', errors: '12' },
    { endpoint: '/api/v2/analytics', p50: '156ms', p95: '423ms', p99: '789ms', calls: '12.4K', errors: '8' },
    { endpoint: '/api/v2/profiles', p50: '98ms', p95: '267ms', p99: '543ms', calls: '4.7K', errors: '3' }
  ];

  return `
    <div class="api-monitoring-container">
      <style>
        ${getApiMonitoringStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üìä API Monitoring & Analytics</h1>
          <p>Real-time API performance monitoring, alerting, and comprehensive analytics</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              All Systems Monitored - 99.9% Uptime
            </div>
            <div class="last-update">Last updated: <span id="monitoringLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Enhanced Real-Time Monitoring Dashboard -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìà Real-Time Monitoring</h2>
          <p>Live API performance indicators and system health metrics</p>
          <div class="header-actions">
            <button class="refresh-btn" onclick="refreshMonitoring()">
              <span class="refresh-icon">üîÑ</span>
              Refresh
            </button>
            <div class="monitoring-status">
              <div class="status-indicator online">
                <span class="pulse"></span>
              </div>
              <span class="status-text">All Systems Normal</span>
            </div>
            <div class="time-range-selector">
              <select id="monitoringTimeRange" onchange="changeTimeRange()">
                <option value="1h">Last Hour</option>
                <option value="6h" selected>Last 6 Hours</option>
                <option value="24h">Last 24 Hours</option>
                <option value="7d">Last 7 Days</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Interactive Monitoring Cards -->
        <div class="monitoring-dashboard">
          <div class="monitoring-grid">
            ${monitoringMetrics.map((metric, index) => `
              <div class="monitoring-card ${metric.trend}" onclick="showMetricTrend('${metric.label}')">
                <div class="card-header">
                  <div class="monitoring-icon">${metric.icon}</div>
                  <div class="metric-sparkline">
                    <svg width="60" height="20" viewBox="0 0 60 20">
                      <path d="M0,15 Q15,${10 + index * 2} 30,${8 + index * 1.5} T60,${12 + index * 1.8}" stroke="#40e0d0" stroke-width="2" fill="none"/>
                    </svg>
                  </div>
                </div>
                <div class="card-content">
                  <div class="monitoring-value">${metric.value}</div>
                  <div class="monitoring-label">${metric.label}</div>
                  <div class="monitoring-change ${metric.trend}">
                    <span class="change-icon">${metric.trend === 'up' ? '‚ÜóÔ∏è' : metric.trend === 'down' ? '‚ÜòÔ∏è' : '‚Üí'}</span>
                    <span class="change-value">${metric.change}</span>
                  </div>
                </div>
                <div class="card-footer">
                  <div class="metric-target">Target: ${metric.label === 'Response Time' ? '< 150ms' : metric.label === 'Error Rate' ? '< 0.5%' : 'Optimal'}</div>
                  <div class="metric-status ${metric.trend === 'up' ? 'good' : metric.trend === 'down' ? 'warning' : 'neutral'}">
                    ${metric.trend === 'up' ? 'On Track' : metric.trend === 'down' ? 'Attention' : 'Stable'}
                  </div>
                </div>
              </div>
            `).join('')}
          </div>

          <!-- Live Performance Chart -->
          <div class="performance-chart-section">
            <div class="chart-header">
              <h3>üìä Live Performance Trends</h3>
              <div class="chart-controls">
                <button class="chart-btn active" onclick="setChartMetric('response')">Response Time</button>
                <button class="chart-btn" onclick="setChartMetric('throughput')">Throughput</button>
                <button class="chart-btn" onclick="setChartMetric('errors')">Error Rate</button>
                <button class="chart-btn" onclick="setChartMetric('alerts')">Alerts</button>
              </div>
            </div>
            <div class="live-chart-container">
              <canvas id="performanceChart" width="800" height="300"></canvas>
              <div class="chart-loading">
                <div class="loading-icon">üìà</div>
                <div class="loading-text">Loading real-time data...</div>
                <div class="loading-spinner"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Advanced Predictive Analytics -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîÆ Predictive Analytics & AI Insights</h2>
          <p>AI-powered predictions and intelligent recommendations for API optimization</p>
        </div>

        <div class="predictive-analytics-grid">
          <div class="predictive-card">
            <div class="card-header">
              <div class="predictive-icon">üéØ</div>
              <h3>Traffic Prediction</h3>
            </div>
            <div class="card-content">
              <div class="prediction-metric">
                <div class="metric-value">+23%</div>
                <div class="metric-label">Expected Growth (24h)</div>
              </div>
              <div class="confidence-indicator">
                <div class="confidence-bar">
                  <div class="confidence-fill" style="width: 89%"></div>
                </div>
                <span class="confidence-text">89% Confidence</span>
              </div>
            </div>
          </div>

          <div class="predictive-card">
            <div class="card-header">
              <div class="predictive-icon">‚ö°</div>
              <h3>Performance Forecast</h3>
            </div>
            <div class="card-content">
              <div class="prediction-alert warning">
                <span class="alert-icon">‚ö†Ô∏è</span>
                <span>Peak load expected at 2-4 PM EST</span>
              </div>
              <div class="recommendation">
                <span class="rec-icon">üí°</span>
                <span>Consider scaling up resources</span>
              </div>
            </div>
          </div>

          <div class="predictive-card">
            <div class="card-header">
              <div class="predictive-icon">üõ°Ô∏è</div>
              <h3>Security Threat Prediction</h3>
            </div>
            <div class="card-content">
              <div class="threat-level">
                <div class="threat-indicator low">
                  <span class="threat-dot"></span>
                  <span>Low Risk</span>
                </div>
              </div>
              <div class="threat-analysis">
                <div class="analysis-item">
                  <span class="analysis-label">Attack Vector:</span>
                  <span class="analysis-value">DDoS (2% probability)</span>
                </div>
              </div>
            </div>
          </div>

          <div class="predictive-card">
            <div class="card-header">
              <div class="predictive-icon">üí∞</div>
              <h3>Cost Optimization</h3>
            </div>
            <div class="card-content">
              <div class="cost-saving">
                <div class="saving-amount">$2,450</div>
                <div class="saving-period">Monthly Savings</div>
              </div>
              <div class="optimization-tips">
                <div class="tip">üîß Reduce caching TTL</div>
                <div class="tip">üì¶ Compress responses</div>
                <div class="tip">‚ö° Implement rate limiting</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- API Cost Analysis -->
      <div class="api-section">
        <div class="section-header">
          <h2>üí∞ Cost Analysis & Optimization</h2>
          <p>Real-time cost monitoring and optimization recommendations</p>
        </div>

        <div class="cost-analysis-dashboard">
          <div class="cost-metrics">
            <div class="cost-metric-card">
              <div class="metric-icon">üíµ</div>
              <div class="metric-content">
                <div class="metric-value">$12,847</div>
                <div class="metric-label">Monthly API Costs</div>
                <div class="metric-change up">+8.3%</div>
              </div>
            </div>

            <div class="cost-metric-card">
              <div class="metric-icon">üìä</div>
              <div class="metric-content">
                <div class="metric-value">$0.023</div>
                <div class="metric-label">Cost per Request</div>
                <div class="metric-change down">-12%</div>
              </div>
            </div>

            <div class="cost-metric-card">
              <div class="metric-icon">üéØ</div>
              <div class="metric-content">
                <div class="metric-value">94.2%</div>
                <div class="metric-label">Cost Efficiency</div>
                <div class="metric-change up">+5.1%</div>
              </div>
            </div>
          </div>

          <div class="cost-breakdown">
            <h3>Cost Breakdown by Service</h3>
            <div class="cost-breakdown-chart">
              <div class="cost-item">
                <div class="service-name">Compute</div>
                <div class="service-cost">$8,234</div>
                <div class="service-percentage">64%</div>
                <div class="cost-bar">
                  <div class="cost-fill compute" style="width: 64%"></div>
                </div>
              </div>
              <div class="cost-item">
                <div class="service-name">Storage</div>
                <div class="service-cost">$2,145</div>
                <div class="service-percentage">17%</div>
                <div class="cost-bar">
                  <div class="cost-fill storage" style="width: 17%"></div>
                </div>
              </div>
              <div class="cost-item">
                <div class="service-name">Bandwidth</div>
                <div class="service-cost">$1,678</div>
                <div class="service-percentage">13%</div>
                <div class="cost-bar">
                  <div class="cost-fill bandwidth" style="width: 13%"></div>
                </div>
              </div>
              <div class="cost-item">
                <div class="service-name">Monitoring</div>
                <div class="service-cost">$790</div>
                <div class="service-percentage">6%</div>
                <div class="cost-bar">
                  <div class="cost-fill monitoring" style="width: 6%"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- API Versioning & Deprecation Tracking -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîÑ API Versioning & Lifecycle</h2>
          <p>Version management, deprecation tracking, and migration planning</p>
        </div>

        <div class="versioning-dashboard">
          <div class="version-overview">
            <div class="version-card current">
              <div class="version-badge">v3.0.1</div>
              <div class="version-status">Current</div>
              <div class="version-usage">78% of traffic</div>
              <div class="version-date">Released: Dec 15, 2024</div>
            </div>

            <div class="version-card deprecated">
              <div class="version-badge">v2.8.4</div>
              <div class="version-status">Deprecated</div>
              <div class="version-usage">18% of traffic</div>
              <div class="version-date">EOL: March 31, 2025</div>
              <div class="deprecation-notice">
                <span class="warning-icon">‚ö†Ô∏è</span>
                <span>120 days remaining</span>
              </div>
            </div>

            <div class="version-card legacy">
              <div class="version-badge">v1.9.2</div>
              <div class="version-status">Legacy</div>
              <div class="version-usage">4% of traffic</div>
              <div class="version-date">EOL: January 31, 2025</div>
              <div class="deprecation-notice critical">
                <span class="warning-icon">üö®</span>
                <span>45 days remaining</span>
              </div>
            </div>
          </div>

          <div class="migration-planning">
            <h3>üìã Migration Planning</h3>
            <div class="migration-steps">
              <div class="migration-step completed">
                <div class="step-number">1</div>
                <div class="step-content">
                  <div class="step-title">Phase 1: Notification</div>
                  <div class="step-description">Sent deprecation notices to all API consumers</div>
                  <div class="step-date">Completed: Jan 15, 2025</div>
                </div>
                <div class="step-status">‚úÖ</div>
              </div>

              <div class="migration-step in-progress">
                <div class="step-number">2</div>
                <div class="step-content">
                  <div class="step-title">Phase 2: Migration Support</div>
                  <div class="step-description">Providing migration guides and technical support</div>
                  <div class="step-date">In Progress</div>
                </div>
                <div class="step-status">üîÑ</div>
              </div>

              <div class="migration-step upcoming">
                <div class="step-number">3</div>
                <div class="step-content">
                  <div class="step-title">Phase 3: Sunset</div>
                  <div class="step-description">Complete shutdown of deprecated endpoints</div>
                  <div class="step-date">Target: March 31, 2025</div>
                </div>
                <div class="step-status">‚è≥</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Advanced Error Analysis -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîç Advanced Error Analysis</h2>
          <p>Detailed error patterns, root cause analysis, and troubleshooting insights</p>
        </div>

        <div class="error-analysis-dashboard">
          <div class="error-overview">
            <div class="error-summary">
              <div class="error-metric">
                <div class="error-value">0.02%</div>
                <div class="error-label">Overall Error Rate</div>
                <div class="error-trend down">‚Üì 15% this week</div>
              </div>
              <div class="error-breakdown">
                <div class="error-type">
                  <span class="error-code">4xx</span>
                  <span class="error-count">1,247</span>
                  <span class="error-percentage">78%</span>
                </div>
                <div class="error-type">
                  <span class="error-code">5xx</span>
                  <span class="error-count">245</span>
                  <span class="error-percentage">15%</span>
                </div>
                <div class="error-type">
                  <span class="error-code">Timeout</span>
                  <span class="error-count">89</span>
                  <span class="error-percentage">7%</span>
                </div>
              </div>
            </div>

            <div class="error-heatmap">
              <h3>Error Distribution by Hour</h3>
              <div class="heatmap-grid">
                ${Array.from({length: 24}, (_, i) => `
                  <div class="heatmap-cell ${i >= 2 && i <= 4 ? 'high' : i >= 14 && i <= 16 ? 'medium' : 'low'}">
                    <div class="hour-label">${i}:00</div>
                    <div class="error-intensity"></div>
                  </div>
                `).join('')}
              </div>
            </div>
          </div>

          <div class="error-details">
            <h3>Top Error Patterns</h3>
            <div class="error-patterns">
              <div class="error-pattern-card">
                <div class="pattern-header">
                  <div class="error-code">429</div>
                  <div class="error-description">Rate Limit Exceeded</div>
                  <div class="error-count">423 occurrences</div>
                </div>
                <div class="pattern-analysis">
                  <div class="analysis-point">
                    <span class="point-icon">üéØ</span>
                    <span>Affects endpoint: /api/bets</span>
                  </div>
                  <div class="analysis-point">
                    <span class="point-icon">üë•</span>
                    <span>Mainly from mobile clients</span>
                  </div>
                  <div class="analysis-point">
                    <span class="point-icon">üí°</span>
                    <span>Recommendation: Implement client-side caching</span>
                  </div>
                </div>
              </div>

              <div class="error-pattern-card">
                <div class="pattern-header">
                  <div class="error-code">500</div>
                  <div class="error-description">Internal Server Error</div>
                  <div class="error-count">89 occurrences</div>
                </div>
                <div class="pattern-analysis">
                  <div class="analysis-point">
                    <span class="point-icon">üîß</span>
                    <span>Database connection issues</span>
                  </div>
                  <div class="analysis-point">
                    <span class="point-icon">‚ö°</span>
                    <span>Peak hours: 2-4 PM EST</span>
                  </div>
                  <div class="analysis-point">
                    <span class="point-icon">üìà</span>
                    <span>Recommendation: Add connection pooling</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Integration Health Monitoring -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîó Integration Health</h2>
          <p>Monitor the health and performance of all API integrations</p>
        </div>

        <div class="integration-health-dashboard">
          <div class="integration-grid">
            <div class="integration-card healthy">
              <div class="integration-header">
                <div class="integration-icon">üí≥</div>
                <div class="integration-info">
                  <h3>Stripe Payment Gateway</h3>
                  <div class="integration-status healthy">Healthy</div>
                </div>
              </div>
              <div class="integration-metrics">
                <div class="metric">Response: 145ms</div>
                <div class="metric">Uptime: 99.9%</div>
                <div class="metric">Success: 98.7%</div>
              </div>
            </div>

            <div class="integration-card warning">
              <div class="integration-header">
                <div class="integration-icon">üìß</div>
                <div class="integration-info">
                  <h3>SendGrid Email Service</h3>
                  <div class="integration-status warning">Degraded</div>
                </div>
              </div>
              <div class="integration-metrics">
                <div class="metric">Response: 2.3s</div>
                <div class="metric">Uptime: 98.2%</div>
                <div class="metric">Success: 95.1%</div>
              </div>
              <div class="integration-alert">
                <span class="alert-icon">‚ö†Ô∏è</span>
                <span>High latency detected</span>
              </div>
            </div>

            <div class="integration-card healthy">
              <div class="integration-header">
                <div class="integration-icon">üí¨</div>
                <div class="integration-info">
                  <h3>Telegram Bot API</h3>
                  <div class="integration-status healthy">Healthy</div>
                </div>
              </div>
              <div class="integration-metrics">
                <div class="metric">Response: 89ms</div>
                <div class="metric">Uptime: 100%</div>
                <div class="metric">Success: 99.8%</div>
              </div>
            </div>

            <div class="integration-card error">
              <div class="integration-header">
                <div class="integration-icon">üì±</div>
                <div class="integration-info">
                  <h3>Twilio SMS Gateway</h3>
                  <div class="integration-status error">Down</div>
                </div>
              </div>
              <div class="integration-metrics">
                <div class="metric">Response: Timeout</div>
                <div class="metric">Uptime: 87.3%</div>
                <div class="metric">Success: 0%</div>
              </div>
              <div class="integration-alert critical">
                <span class="alert-icon">üö®</span>
                <span>Service unavailable - failover active</span>
              </div>
            </div>
          </div>

          <div class="integration-summary">
            <div class="summary-stats">
              <div class="summary-stat">
                <div class="stat-value">3/4</div>
                <div class="stat-label">Services Healthy</div>
              </div>
              <div class="summary-stat">
                <div class="stat-value">98.5%</div>
                <div class="stat-label">Overall Uptime</div>
              </div>
              <div class="summary-stat">
                <div class="stat-value">247ms</div>
                <div class="stat-label">Avg Response Time</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Performance Optimization Engine -->
      <div class="api-section">
        <div class="section-header">
          <h2>üöÄ Performance Optimization</h2>
          <p>AI-powered recommendations for improving API performance and efficiency</p>
        </div>

        <div class="optimization-dashboard">
          <div class="optimization-recommendations">
            <div class="recommendation-card high-impact">
              <div class="rec-header">
                <div class="rec-priority high">High Impact</div>
                <div class="rec-icon">‚ö°</div>
                <h3>Implement Response Caching</h3>
              </div>
              <div class="rec-content">
                <p>Add Redis caching layer for frequently requested endpoints</p>
                <div class="rec-metrics">
                  <div class="metric">Potential: 45% faster responses</div>
                  <div class="metric">Cost Savings: $1,200/month</div>
                  <div class="metric">Effort: Medium</div>
                </div>
              </div>
              <div class="rec-actions">
                <button class="rec-btn primary" onclick="implementCaching()">Implement</button>
                <button class="rec-btn secondary" onclick="viewDetails('caching')">Details</button>
              </div>
            </div>

            <div class="recommendation-card medium-impact">
              <div class="rec-header">
                <div class="rec-priority medium">Medium Impact</div>
                <div class="rec-icon">üì¶</div>
                <h3>Response Compression</h3>
              </div>
              <div class="rec-content">
                <p>Enable gzip compression for API responses</p>
                <div class="rec-metrics">
                  <div class="metric">Potential: 60% smaller payloads</div>
                  <div class="metric">Cost Savings: $800/month</div>
                  <div class="metric">Effort: Low</div>
                </div>
              </div>
              <div class="rec-actions">
                <button class="rec-btn primary" onclick="enableCompression()">Enable</button>
                <button class="rec-btn secondary" onclick="viewDetails('compression')">Details</button>
              </div>
            </div>

            <div class="recommendation-card low-impact">
              <div class="rec-header">
                <div class="rec-priority low">Low Impact</div>
                <div class="rec-icon">üîÑ</div>
                <h3>Database Query Optimization</h3>
              </div>
              <div class="rec-content">
                <p>Add database indexes and optimize slow queries</p>
                <div class="rec-metrics">
                  <div class="metric">Potential: 30% faster queries</div>
                  <div class="metric">Cost Savings: $400/month</div>
                  <div class="metric">Effort: High</div>
                </div>
              </div>
              <div class="rec-actions">
                <button class="rec-btn primary" onclick="optimizeQueries()">Optimize</button>
                <button class="rec-btn secondary" onclick="viewDetails('queries')">Details</button>
              </div>
            </div>
          </div>

          <div class="optimization-simulator">
            <h3>üéØ Impact Simulator</h3>
            <div class="simulator-controls">
              <div class="simulator-input">
                <label>Monthly API Calls:</label>
                <input type="number" id="simulator-calls" value="1000000" onchange="calculateImpact()">
              </div>
              <div class="simulator-input">
                <label>Avg Response Time:</label>
                <input type="number" id="simulator-latency" value="200" onchange="calculateImpact()"> ms
              </div>
            </div>
            <div class="simulator-results">
              <div class="result-item">
                <span class="result-label">Current Monthly Cost:</span>
                <span class="result-value" id="current-cost">$2,400</span>
              </div>
              <div class="result-item">
                <span class="result-label">Optimized Cost:</span>
                <span class="result-value" id="optimized-cost">$1,680</span>
              </div>
              <div class="result-item savings">
                <span class="result-label">Monthly Savings:</span>
                <span class="result-value" id="monthly-savings">$720</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Live Betting Dashboard -->
      <div class="api-section">
        <div class="section-header">
          <h2>üé∞ Live Betting Operations</h2>
          <p>Real-time betting data, positions tracking, and market analysis</p>
          <div class="header-actions">
            <button class="refresh-btn" onclick="refreshBettingData()">
              <span class="refresh-icon">üîÑ</span>
              Refresh Live Data
            </button>
            <div class="live-status">
              <div class="status-indicator live">
                <span class="pulse"></span>
              </div>
              <span class="status-text">Live Data Active</span>
            </div>
            <div class="time-range-selector">
              <select id="bettingTimeRange" onchange="changeBettingView()">
                <option value="live">Live Now</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
              </select>
            </div>
          </div>
        </div>

        <div class="betting-dashboard">
          <!-- Live Betting Summary -->
          <div class="betting-summary-grid">
            <div class="betting-metric-card active-games">
              <div class="metric-icon">üèà</div>
              <div class="metric-content">
                <div class="metric-value" id="activeGames">24</div>
                <div class="metric-label">Active Games</div>
                <div class="metric-change up">+3 new today</div>
              </div>
            </div>

            <div class="betting-metric-card total-bets">
              <div class="metric-icon">üí∞</div>
              <div class="metric-content">
                <div class="metric-value" id="totalBets">$2.4M</div>
                <div class="metric-label">Total Bets Today</div>
                <div class="metric-change up">+12.3%</div>
              </div>
            </div>

            <div class="betting-metric-card live-positions">
              <div class="metric-icon">üìä</div>
              <div class="metric-content">
                <div class="metric-value" id="livePositions">1,247</div>
                <div class="metric-label">Live Positions</div>
                <div class="metric-change neutral">‚ÜóÔ∏è Trending up</div>
              </div>
            </div>

            <div class="betting-metric-card alerts-active">
              <div class="metric-icon">üö®</div>
              <div class="metric-content">
                <div class="metric-value" id="alertsCount">3</div>
                <div class="metric-label">Active Alerts</div>
                <div class="metric-change warning">‚ö†Ô∏è Requires attention</div>
              </div>
            </div>
          </div>

          <!-- Live Game Schedule -->
          <div class="live-games-section">
            <h3>üìÖ Live Game Schedule & Tracking</h3>
            <div class="games-grid">
              <div class="game-card live-game">
                <div class="game-header">
                  <div class="game-teams">
                    <div class="team">
                      <span class="team-name">Chiefs</span>
                      <span class="team-record">(8-3)</span>
                    </div>
                    <div class="vs">VS</div>
                    <div class="team">
                      <span class="team-name">49ers</span>
                      <span class="team-record">(9-2)</span>
                    </div>
                  </div>
                  <div class="game-status live">
                    <span class="status-dot"></span>
                    <span>LIVE - Q4 12:34</span>
                  </div>
                </div>
                <div class="game-metrics">
                  <div class="metric">
                    <span class="label">Total Bets:</span>
                    <span class="value">$485K</span>
                  </div>
                  <div class="metric">
                    <span class="label">Positions:</span>
                    <span class="value">234</span>
                  </div>
                  <div class="metric">
                    <span class="label">Avg Bet:</span>
                    <span class="value">$2,077</span>
                  </div>
                </div>
                <div class="game-actions">
                  <button class="action-btn" onclick="viewGameDetails('chiefs-49ers')">View Details</button>
                  <button class="action-btn secondary" onclick="managePositions('chiefs-49ers')">Positions</button>
                </div>
              </div>

              <div class="game-card upcoming-game">
                <div class="game-header">
                  <div class="game-teams">
                    <div class="team">
                      <span class="team-name">Bills</span>
                      <span class="team-record">(7-4)</span>
                    </div>
                    <div class="vs">VS</div>
                    <div class="team">
                      <span class="team-name">Dolphins</span>
                      <span class="team-record">(6-5)</span>
                    </div>
                  </div>
                  <div class="game-status upcoming">
                    <span class="status-time">8:20 PM EST</span>
                  </div>
                </div>
                <div class="game-metrics">
                  <div class="metric">
                    <span class="label">Line:</span>
                    <span class="value">Bills -3.5</span>
                  </div>
                  <div class="metric">
                    <span class="label">Total:</span>
                    <span class="value">47.5</span>
                  </div>
                  <div class="metric">
                    <span class="label">Pre-bets:</span>
                    <span class="value">$127K</span>
                  </div>
                </div>
                <div class="game-actions">
                  <button class="action-btn" onclick="setOdds('bills-dolphins')">Set Odds</button>
                  <button class="action-btn secondary" onclick="viewMarketData('bills-dolphins')">Market Data</button>
                </div>
              </div>

              <div class="game-card completed-game">
                <div class="game-header">
                  <div class="game-teams">
                    <div class="team winner">
                      <span class="team-name">Eagles</span>
                      <span class="team-record">(10-1)</span>
                    </div>
                    <div class="vs">VS</div>
                    <div class="team">
                      <span class="team-name">Cowboys</span>
                      <span class="team-record">(5-6)</span>
                    </div>
                  </div>
                  <div class="game-status completed">
                    <span>FINAL: 31-28</span>
                  </div>
                </div>
                <div class="game-metrics">
                  <div class="metric">
                    <span class="label">Total Bets:</span>
                    <span class="value">$892K</span>
                  </div>
                  <div class="metric">
                    <span class="label">Positions:</span>
                    <span class="value">445</span>
                  </div>
                  <div class="metric">
                    <span class="label">Payout:</span>
                    <span class="value">$1.2M</span>
                  </div>
                </div>
                <div class="game-actions">
                  <button class="action-btn" onclick="viewPayoutDetails('eagles-cowboys')">Payout Details</button>
                  <button class="action-btn secondary" onclick="analyzeGame('eagles-cowboys')">Analysis</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Odds Monitoring & Alerts -->
          <div class="odds-monitoring-section">
            <h3>üéØ Odds Monitoring & Market Comparison</h3>
            <div class="odds-alerts-grid">
              <div class="odds-alert-card warning">
                <div class="alert-header">
                  <div class="alert-icon">‚ö†Ô∏è</div>
                  <h4>Odds Discrepancy Alert</h4>
                  <div class="alert-time">2 min ago</div>
                </div>
                <div class="alert-content">
                  <div class="game-info">Chiefs vs 49ers</div>
                  <div class="odds-comparison">
                    <div class="our-odds">
                      <span class="label">Our Line:</span>
                      <span class="value">Chiefs -2.5 (-110)</span>
                    </div>
                    <div class="market-odds">
                      <span class="label">Market Avg:</span>
                      <span class="value">Chiefs -1.5 (-105)</span>
                    </div>
                    <div class="discrepancy">
                      <span class="label">Difference:</span>
                      <span class="value warning">-1.0 (+5)</span>
                    </div>
                  </div>
                  <div class="alert-actions">
                    <button class="alert-btn primary" onclick="adjustOdds('chiefs-49ers', 'line')">Adjust Line</button>
                    <button class="alert-btn secondary" onclick="viewMarketComparison('chiefs-49ers')">Compare</button>
                  </div>
                </div>
              </div>

              <div class="odds-alert-card info">
                <div class="alert-header">
                  <div class="alert-icon">üìä</div>
                  <h4>Market Movement</h4>
                  <div class="alert-time">5 min ago</div>
                </div>
                <div class="alert-content">
                  <div class="game-info">Bills vs Dolphins</div>
                  <div class="market-movement">
                    <div class="movement-item">
                      <span class="label">Line Movement:</span>
                      <span class="value">Bills -2.5 ‚Üí -3.0</span>
                    </div>
                    <div class="movement-item">
                      <span class="label">Total Movement:</span>
                      <span class="value">45.5 ‚Üí 46.0</span>
                    </div>
                    <div class="movement-item">
                      <span class="label">Sharp Money:</span>
                      <span class="value">Bills (+$45K)</span>
                    </div>
                  </div>
                  <div class="alert-actions">
                    <button class="alert-btn primary" onclick="followSharpMoney('bills-dolphins')">Follow Money</button>
                    <button class="alert-btn secondary" onclick="setAlerts('bills-dolphins')">Set Alert</button>
                  </div>
                </div>
              </div>

              <div class="odds-alert-card success">
                <div class="alert-header">
                  <div class="alert-icon">‚úÖ</div>
                  <h4>Optimal Positioning</h4>
                  <div class="alert-time">8 min ago</div>
                </div>
                <div class="alert-content">
                  <div class="game-info">Ravens vs Bengals</div>
                  <div class="position-recommendation">
                    <div class="rec-item">
                      <span class="label">Current Position:</span>
                      <span class="value">$127K on Ravens</span>
                    </div>
                    <div class="rec-item">
                      <span class="label">Recommended:</span>
                      <span class="value">Increase to $185K</span>
                    </div>
                    <div class="rec-item">
                      <span class="label">Expected Value:</span>
                      <span class="value">+15.3% ROI</span>
                    </div>
                  </div>
                  <div class="alert-actions">
                    <button class="alert-btn primary" onclick="optimizePosition('ravens-bengals')">Optimize</button>
                    <button class="alert-btn secondary" onclick="viewAnalytics('ravens-bengals')">Analytics</button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Real-time Position Tracking -->
          <div class="position-tracking-section">
            <h3>üìà Real-time Position Tracking</h3>
            <div class="position-dashboard">
              <div class="position-summary">
                <div class="position-card">
                  <div class="position-header">
                    <h4>Chiefs vs 49ers</h4>
                    <div class="position-status live">Live</div>
                  </div>
                  <div class="position-breakdown">
                    <div class="position-item">
                      <span class="bet-type">Moneyline</span>
                      <span class="amount">$245K</span>
                      <span class="positions">89 bets</span>
                    </div>
                    <div class="position-item">
                      <span class="bet-type">Spread</span>
                      <span class="amount">$189K</span>
                      <span class="positions">67 bets</span>
                    </div>
                    <div class="position-item">
                      <span class="bet-type">Total</span>
                      <span class="amount">$51K</span>
                      <span class="positions">23 bets</span>
                    </div>
                  </div>
                  <div class="position-actions">
                    <button class="position-btn" onclick="hedgePosition('chiefs-49ers')">Hedge</button>
                    <button class="position-btn secondary" onclick="adjustLine('chiefs-49ers')">Adjust</button>
                  </div>
                </div>

                <div class="position-card">
                  <div class="position-header">
                    <h4>Bills vs Dolphins</h4>
                    <div class="position-status upcoming">Pre-game</div>
                  </div>
                  <div class="position-breakdown">
                    <div class="position-item">
                      <span class="bet-type">Moneyline</span>
                      <span class="amount">$89K</span>
                      <span class="positions">34 bets</span>
                    </div>
                    <div class="position-item">
                      <span class="bet-type">Spread</span>
                      <span class="amount">$156K</span>
                      <span class="positions">78 bets</span>
                    </div>
                    <div class="position-item">
                      <span class="bet-type">Total</span>
                      <span class="amount">$23K</span>
                      <span class="positions">15 bets</span>
                    </div>
                  </div>
                  <div class="position-actions">
                    <button class="position-btn" onclick="balancePosition('bills-dolphins')">Balance</button>
                    <button class="position-btn secondary" onclick="setLimits('bills-dolphins')">Set Limits</button>
                  </div>
                </div>
              </div>

              <div class="position-analytics">
                <h4>Position Analytics</h4>
                <div class="analytics-metrics">
                  <div class="analytics-item">
                    <span class="label">Total Exposure:</span>
                    <span class="value">$1.2M</span>
                  </div>
                  <div class="analytics-item">
                    <span class="label">Risk Score:</span>
                    <span class="value low-risk">Low (2.3/10)</span>
                  </div>
                  <div class="analytics-item">
                    <span class="label">Hedged Amount:</span>
                    <span class="value">$856K</span>
                  </div>
                  <div class="analytics-item">
                    <span class="label">Unhedged Risk:</span>
                    <span class="value">$344K</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Market Data & Comparison -->
          <div class="market-data-section">
            <h3>üìä Market Data & Odds Comparison</h3>
            <div class="market-comparison-table">
              <div class="table-header">
                <div class="table-cell">Game</div>
                <div class="table-cell">Our Line</div>
                <div class="table-cell">Market Avg</div>
                <div class="table-cell">Difference</div>
                <div class="table-cell">Sharp Action</div>
                <div class="table-cell">Action</div>
              </div>
              <div class="table-row">
                <div class="table-cell game-cell">
                  <div class="game-name">Chiefs vs 49ers</div>
                  <div class="game-time">LIVE Q4</div>
                </div>
                <div class="table-cell">Chiefs -2.5</div>
                <div class="table-cell">Chiefs -1.5</div>
                <div class="table-cell warning">-1.0</div>
                <div class="table-cell">$45K on Chiefs</div>
                <div class="table-cell">
                  <button class="table-btn" onclick="adjustLine('chiefs-49ers')">Adjust</button>
                </div>
              </div>
              <div class="table-row">
                <div class="table-cell game-cell">
                  <div class="game-name">Bills vs Dolphins</div>
                  <div class="game-time">8:20 PM</div>
                </div>
                <div class="table-cell">Bills -3.5</div>
                <div class="table-cell">Bills -3.0</div>
                <div class="table-cell neutral">-0.5</div>
                <div class="table-cell">$23K on Bills</div>
                <div class="table-cell">
                  <button class="table-btn secondary" onclick="monitorLine('bills-dolphins')">Monitor</button>
                </div>
              </div>
              <div class="table-row">
                <div class="table-cell game-cell">
                  <div class="game-name">Ravens vs Bengals</div>
                  <div class="game-time">1:00 PM</div>
                </div>
                <div class="table-cell">Ravens -4.0</div>
                <div class="table-cell">Ravens -4.5</div>
                <div class="table-cell success">+0.5</div>
                <div class="table-cell">$67K on Ravens</div>
                <div class="table-cell">
                  <button class="table-btn success" onclick="exploitLine('ravens-bengals')">Exploit</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Performance Metrics -->
      <div class="api-section">
        <div class="section-header">
          <h2>‚ö° Endpoint Performance</h2>
          <p>Detailed performance metrics for all API endpoints</p>
        </div>

        <div class="performance-table">
          <div class="table-header">
            <div class="table-cell">Endpoint</div>
            <div class="table-cell">P50</div>
            <div class="table-cell">P95</div>
            <div class="table-cell">P99</div>
            <div class="table-cell">Calls Today</div>
            <div class="table-cell">Errors</div>
            <div class="table-cell">Actions</div>
          </div>
          ${performanceMetrics.map(metric => `
            <div class="table-row">
              <div class="table-cell endpoint-path">${metric.endpoint}</div>
              <div class="table-cell">${metric.p50}</div>
              <div class="table-cell">${metric.p95}</div>
              <div class="table-cell">${metric.p99}</div>
              <div class="table-cell">${metric.calls}</div>
              <div class="table-cell ${parseInt(metric.errors) > 10 ? 'high-error' : 'low-error'}">${metric.errors}</div>
              <div class="table-cell">
                <button class="action-btn small" onclick="viewEndpointPerformance('${metric.endpoint}')">View</button>
                <button class="action-btn small secondary" onclick="configureEndpointAlerts('${metric.endpoint}')">Alerts</button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Advanced Alert Management System -->
      <div class="api-section">
        <div class="section-header">
          <h2>üö® Alert Management</h2>
          <p>Intelligent system alerts, notifications, and incident management</p>
          <div class="header-actions">
            <button class="action-btn primary" onclick="createNewAlertRule()">
              <span class="btn-icon">‚ûï</span>
              New Rule
            </button>
            <button class="action-btn secondary" onclick="manageAlertChannels()">
              <span class="btn-icon">üì±</span>
              Channels
            </button>
            <div class="alert-filters">
              <select id="alertTypeFilter" onchange="filterAlerts()">
                <option value="">All Types</option>
                <option value="error">Errors</option>
                <option value="warning">Warnings</option>
                <option value="info">Info</option>
                <option value="success">Success</option>
              </select>
              <select id="alertTimeFilter" onchange="filterAlerts()">
                <option value="1h">Last Hour</option>
                <option value="24h" selected>Last 24 Hours</option>
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Interactive Alert Dashboard -->
        <div class="alerts-dashboard">
          <div class="alerts-summary-grid">
            <div class="alert-summary-card critical" onclick="viewActiveAlerts()">
              <div class="card-header">
                <div class="alert-icon">üö®</div>
                <div class="alert-pulse"></div>
              </div>
              <div class="card-content">
                <div class="alert-count">0</div>
                <div class="alert-label">Active Alerts</div>
                <div class="alert-trend good">‚Üì 23% from yesterday</div>
              </div>
            </div>

            <div class="alert-summary-card resolved" onclick="viewResolvedAlerts()">
              <div class="card-header">
                <div class="alert-icon">‚úÖ</div>
                <div class="resolution-rate">98%</div>
              </div>
              <div class="card-content">
                <div class="alert-count">23</div>
                <div class="alert-label">Resolved Today</div>
                <div class="alert-trend good">‚Üë 12% from yesterday</div>
              </div>
            </div>

            <div class="alert-summary-card weekly" onclick="viewWeeklyAlerts()">
              <div class="card-header">
                <div class="alert-icon">üìä</div>
                <div class="weekly-chart">
                  <svg width="40" height="20" viewBox="0 0 40 20">
                    <path d="M0,15 Q10,5 20,12 T40,8" stroke="#40e0d0" stroke-width="2" fill="none"/>
                  </svg>
                </div>
              </div>
              <div class="card-content">
                <div class="alert-count">156</div>
                <div class="alert-label">This Week</div>
                <div class="alert-trend neutral">‚Üí Stable trend</div>
              </div>
            </div>

            <div class="alert-summary-card rules" onclick="manageAlertRules()">
              <div class="card-header">
                <div class="alert-icon">‚öôÔ∏è</div>
                <div class="rules-status active"></div>
              </div>
              <div class="card-content">
                <div class="alert-count">12</div>
                <div class="alert-label">Active Rules</div>
                <div class="alert-trend good">All rules healthy</div>
              </div>
            </div>
          </div>

          <!-- Advanced Alert Timeline -->
          <div class="alerts-timeline">
            <div class="timeline-header">
              <h3>üìÖ Alert Timeline</h3>
              <div class="timeline-controls">
                <button class="timeline-btn active" onclick="setTimelineView('all')">All</button>
                <button class="timeline-btn" onclick="setTimelineView('critical')">Critical</button>
                <button class="timeline-btn" onclick="setTimelineView('warnings')">Warnings</button>
                <button class="timeline-btn" onclick="setTimelineView('resolved')">Resolved</button>
              </div>
            </div>

            <div class="timeline-container" id="alertsTimeline">
              ${recentAlerts.map((alert, index) => `
                <div class="timeline-item ${alert.type}" style="animation-delay: ${index * 0.1}s">
                  <div class="timeline-marker">
                    <div class="marker-dot ${alert.type}"></div>
                    <div class="marker-line"></div>
                  </div>
                  <div class="timeline-content">
                    <div class="alert-card ${alert.type}">
                      <div class="alert-header">
                        <div class="alert-type-icon">
                          ${alert.type === 'error' ? '‚ùå' : alert.type === 'warning' ? '‚ö†Ô∏è' : alert.type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è'}
                        </div>
                        <div class="alert-meta">
                          <span class="alert-time">${alert.time}</span>
                          <span class="alert-endpoint">${alert.endpoint}</span>
                        </div>
                        <div class="alert-actions">
                          <button class="alert-action-btn small" onclick="viewAlertDetails('${alert.message}')">View</button>
                          <button class="alert-action-btn small secondary" onclick="acknowledgeAlert('${alert.message}')">Ack</button>
                          ${alert.type === 'error' ? '<button class="alert-action-btn small danger" onclick="escalateAlert(\'' + alert.message + '\')">Escalate</button>' : ''}
                        </div>
                      </div>
                      <div class="alert-message">${alert.message}</div>
                      <div class="alert-details">
                        <span class="detail-item">Severity: ${alert.type.toUpperCase()}</span>
                        <span class="detail-item">Source: API Gateway</span>
                        <span class="detail-item">Duration: ${alert.type === 'error' ? '2m 34s' : 'Resolved'}</span>
                      </div>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      </div>

      <!-- Monitoring Controls -->
      <div class="api-section">
        <div class="section-header">
          <h2>üéõÔ∏è Monitoring Controls</h2>
          <p>Advanced monitoring configuration and management tools</p>
        </div>

        <div class="monitoring-controls">
          <div class="control-group">
            <h3>üìä Performance Monitoring</h3>
            <div class="control-buttons">
              <button class="control-btn" onclick="enableDetailedLogging()">Detailed Logging</button>
              <button class="control-btn secondary" onclick="configureMetrics()">Metrics Config</button>
              <button class="control-btn secondary" onclick="setupCustomDashboards()">Custom Dashboards</button>
            </div>
          </div>

          <div class="control-group">
            <h3>üö® Alert Configuration</h3>
            <div class="control-buttons">
              <button class="control-btn" onclick="createAlertRule()">Create Alert Rule</button>
              <button class="control-btn secondary" onclick="manageNotificationChannels()">Notification Channels</button>
              <button class="control-btn secondary" onclick="setupEscalationPolicies()">Escalation Policies</button>
            </div>
          </div>

          <div class="control-group">
            <h3>üìà Analytics & Reporting</h3>
            <div class="control-buttons">
              <button class="control-btn" onclick="generatePerformanceReport()">Performance Report</button>
              <button class="control-btn secondary" onclick="setupAutomatedReports()">Automated Reports</button>
              <button class="control-btn secondary" onclick="configureDataRetention()">Data Retention</button>
            </div>
          </div>
        </div>
      </div>

      <!-- System Health Dashboard -->
      <div class="api-section">
        <div class="section-header">
          <h2>üíö System Health Dashboard</h2>
          <p>Comprehensive system health monitoring and status overview</p>
        </div>

        <div class="health-dashboard">
          <div class="health-component">
            <div class="component-header">
              <h3>üåê API Gateway</h3>
              <div class="component-status healthy">‚óè Online</div>
            </div>
            <div class="component-metrics">
              <div class="metric">Requests: 47.2K/min</div>
              <div class="metric">Latency: 142ms</div>
              <div class="metric">Errors: 0.1%</div>
            </div>
          </div>

          <div class="health-component">
            <div class="component-header">
              <h3>üóÑÔ∏è Database</h3>
              <div class="component-status healthy">‚óè Healthy</div>
            </div>
            <div class="component-metrics">
              <div class="metric">Connections: 234</div>
              <div class="metric">Query Time: 23ms</div>
              <div class="metric">Uptime: 99.9%</div>
            </div>
          </div>

          <div class="health-component">
            <div class="component-header">
              <h3>üîÑ Cache Layer</h3>
              <div class="component-status healthy">‚óè Optimal</div>
            </div>
            <div class="component-metrics">
              <div class="metric">Hit Rate: 94.2%</div>
              <div class="metric">Size: 2.3GB</div>
              <div class="metric">Evictions: 0/min</div>
            </div>
          </div>

          <div class="health-component">
            <div class="component-header">
              <h3>üîí Security Systems</h3>
              <div class="component-status healthy">‚óè Secure</div>
            </div>
            <div class="component-metrics">
              <div class="metric">Threats: 0</div>
              <div class="metric">SSL: Valid</div>
              <div class="metric">Auth Rate: 99.9%</div>
            </div>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          API Overview
        </a>
        <a href="/api/gateway" class="nav-btn secondary">
          <span class="btn-icon">üö™</span>
          Gateway
        </a>
        <a href="/api/security" class="nav-btn primary">
          <span class="btn-icon">üîí</span>
          Security
        </a>
      </div>
    </div>

    <script>
      ${getApiMonitoringScripts()}
    </script>
  `;
}

function generateApiSecurityContent(employee: EmployeeData): string {
  const securityMetrics = [
    { label: 'Threats Detected', value: '0', change: '0', trend: 'neutral', icon: 'üõ°Ô∏è' },
    { label: 'Security Rating', value: 'A+', change: '0', trend: 'neutral', icon: '‚≠ê' },
    { label: 'Auth Success', value: '99.9%', change: '+0.1%', trend: 'up', icon: 'üîê' },
    { label: 'Active Policies', value: '156', change: '+12', trend: 'up', icon: 'üìã' }
  ];

  const activePolicies = [
    { name: 'Rate Limiting', status: 'active', violations: '23', description: 'API rate limiting and throttling' },
    { name: 'IP Whitelist', status: 'active', violations: '0', description: 'IP-based access control' },
    { name: 'JWT Authentication', status: 'active', violations: '12', description: 'Token-based authentication' },
    { name: 'CORS Policy', status: 'active', violations: '0', description: 'Cross-origin resource sharing' },
    { name: 'SQL Injection', status: 'active', violations: '0', description: 'SQL injection prevention' },
    { name: 'XSS Protection', status: 'active', violations: '0', description: 'Cross-site scripting prevention' }
  ];

  const securityEvents = [
    { type: 'auth_failure', message: 'Invalid JWT token attempt', ip: '192.168.1.100', time: '5 min ago', severity: 'low' },
    { type: 'rate_limit', message: 'Rate limit exceeded', ip: '10.0.0.50', time: '12 min ago', severity: 'medium' },
    { type: 'auth_success', message: 'Successful API key authentication', ip: '172.16.0.25', time: '1 hour ago', severity: 'info' },
    { type: 'suspicious', message: 'Unusual request pattern detected', ip: '203.0.113.10', time: '2 hours ago', severity: 'high' }
  ];

  return `
    <div class="api-security-container">
      <style>
        ${getApiSecurityStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üîí API Security & Compliance</h1>
          <p>Advanced security policies, authentication, compliance monitoring, and threat protection</p>
          <div class="header-status">
            <div class="status-indicator secure">
              <span class="pulse"></span>
              Security Systems Active - Zero Threats Detected
            </div>
            <div class="last-update">Last updated: <span id="securityLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Security Overview -->
      <div class="api-section">
        <div class="section-header">
          <h2>üõ°Ô∏è Security Overview</h2>
          <p>Real-time security metrics and threat monitoring</p>
        </div>

        <div class="security-metrics-grid">
          ${securityMetrics.map(metric => `
            <div class="security-metric-card ${metric.trend}">
              <div class="metric-icon">${metric.icon}</div>
              <div class="metric-value">${metric.value}</div>
              <div class="metric-label">${metric.label}</div>
              <div class="metric-change ${metric.trend}">${metric.change}</div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Security Policies -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìã Active Security Policies</h2>
          <p>Comprehensive security policies and their enforcement status</p>
        </div>

        <div class="policies-grid">
          ${activePolicies.map(policy => `
            <div class="policy-card ${policy.status} ${parseInt(policy.violations) > 10 ? 'high-violations' : 'low-violations'}">
              <div class="policy-header">
                <h3>${policy.name}</h3>
                <div class="policy-status ${policy.status}">
                  ${policy.status.toUpperCase()}
                </div>
              </div>
              <p class="policy-description">${policy.description}</p>
              <div class="policy-stats">
                <div class="violation-count">
                  <span class="violation-label">Violations:</span>
                  <span class="violation-value ${parseInt(policy.violations) > 10 ? 'high' : 'low'}">${policy.violations}</span>
                </div>
              </div>
              <div class="policy-actions">
                <button class="action-btn small" onclick="editPolicy('${policy.name}')">Edit</button>
                <button class="action-btn small secondary" onclick="viewPolicyLogs('${policy.name}')">Logs</button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Security Events -->
      <div class="api-section">
        <div class="section-header">
          <h2>üö® Security Events</h2>
          <p>Recent security events and incident monitoring</p>
        </div>

        <div class="security-events">
          <div class="events-filter">
            <select id="eventFilter">
              <option>All Events</option>
              <option>High Severity</option>
              <option>Medium Severity</option>
              <option>Low Severity</option>
              <option>Authentication</option>
              <option>Rate Limiting</option>
            </select>
            <button class="filter-btn" onclick="exportSecurityEvents()">Export Events</button>
          </div>

          <div class="events-list">
            ${securityEvents.map(event => `
              <div class="event-item ${event.severity}">
                <div class="event-severity">
                  <span class="severity-indicator ${event.severity}"></span>
                  ${event.severity.toUpperCase()}
                </div>
                <div class="event-content">
                  <div class="event-message">${event.message}</div>
                  <div class="event-meta">
                    <span class="event-ip">${event.ip}</span>
                    <span class="event-time">${event.time}</span>
                    <span class="event-type">${event.type.replace('_', ' ').toUpperCase()}</span>
                  </div>
                </div>
                <button class="event-action-btn" onclick="investigateEvent('${event.message}')">Investigate</button>
              </div>
            `).join('')}
          </div>
        </div>
      </div>

      <!-- Authentication Management -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîê Authentication Management</h2>
          <p>API authentication methods and access control</p>
        </div>

        <div class="auth-management">
          <div class="auth-methods">
            <div class="auth-method-card">
              <div class="method-header">
                <div class="method-icon">üîë</div>
                <h3>API Keys</h3>
              </div>
              <div class="method-stats">
                <div class="stat">Active: 247 keys</div>
                <div class="stat">Usage: 89% of traffic</div>
                <div class="stat">Revoked: 12 keys</div>
              </div>
              <div class="method-actions">
                <button class="action-btn" onclick="manageApiKeys()">Manage Keys</button>
                <button class="action-btn secondary" onclick="rotateKeys()">Rotate Keys</button>
              </div>
            </div>

            <div class="auth-method-card">
              <div class="method-header">
                <div class="method-icon">üé´</div>
                <h3>JWT Tokens</h3>
              </div>
              <div class="method-stats">
                <div class="stat">Active: 1,247 tokens</div>
                <div class="stat">Success Rate: 99.9%</div>
                <div class="stat">Avg Lifespan: 2 hours</div>
              </div>
              <div class="method-actions">
                <button class="action-btn" onclick="configureJwt()">Configure JWT</button>
                <button class="action-btn secondary" onclick="viewTokenLogs()">Token Logs</button>
              </div>
            </div>

            <div class="auth-method-card">
              <div class="method-header">
                <div class="method-icon">üåê</div>
                <h3>OAuth 2.0</h3>
              </div>
              <div class="method-stats">
                <div class="stat">Clients: 89</div>
                <div class="stat">Grants: 15,234</div>
                <div class="stat">Success Rate: 99.8%</div>
              </div>
              <div class="method-actions">
                <button class="action-btn" onclick="manageOAuthClients()">Manage Clients</button>
                <button class="action-btn secondary" onclick="configureOAuth()">Configure OAuth</button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Compliance Dashboard -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìã Compliance Dashboard</h2>
          <p>Regulatory compliance monitoring and audit trails</p>
        </div>

        <div class="compliance-dashboard">
          <div class="compliance-metrics">
            <div class="compliance-card">
              <div class="compliance-icon">üîí</div>
              <div class="compliance-info">
                <h3>GDPR Compliance</h3>
                <p>Data protection and privacy</p>
                <div class="compliance-status compliant">‚úÖ Compliant</div>
              </div>
            </div>

            <div class="compliance-card">
              <div class="compliance-icon">üõ°Ô∏è</div>
              <div class="compliance-info">
                <h3>SOC 2 Type II</h3>
                <p>Security and availability</p>
                <div class="compliance-status compliant">‚úÖ Certified</div>
              </div>
            </div>

            <div class="compliance-card">
              <div class="compliance-icon">üìä</div>
              <div class="compliance-info">
                <h3>PCI DSS</h3>
                <p>Payment card security</p>
                <div class="compliance-status compliant">‚úÖ Compliant</div>
              </div>
            </div>

            <div class="compliance-card">
              <div class="compliance-icon">üîç</div>
              <div class="compliance-info">
                <h3>Audit Logs</h3>
                <p>Complete audit trails</p>
                <div class="compliance-status compliant">‚úÖ Active</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Security Controls -->
      <div class="api-section">
        <div class="section-header">
          <h2>üéõÔ∏è Security Controls</h2>
          <p>Advanced security configuration and management tools</p>
        </div>

        <div class="security-controls">
          <div class="control-group">
            <h3>üõ°Ô∏è Threat Protection</h3>
            <div class="control-buttons">
              <button class="control-btn" onclick="configureWaf()">WAF Settings</button>
              <button class="control-btn secondary" onclick="setupDdosProtection()">DDoS Protection</button>
              <button class="control-btn secondary" onclick="manageBlacklist()">IP Blacklist</button>
            </div>
          </div>

          <div class="control-group">
            <h3>üîê Access Control</h3>
            <div class="control-buttons">
              <button class="control-btn" onclick="manageRoles()">Role Management</button>
              <button class="control-btn secondary" onclick="configureMfa()">MFA Settings</button>
              <button class="control-btn secondary" onclick="setupSso()">SSO Configuration</button>
            </div>
          </div>

          <div class="control-group">
            <h3>üìä Monitoring & Audit</h3>
            <div class="control-buttons">
              <button class="control-btn" onclick="enableSecurityAuditing()">Security Auditing</button>
              <button class="control-btn secondary" onclick="configureComplianceReports()">Compliance Reports</button>
              <button class="control-btn secondary" onclick="setupIntrusionDetection()">Intrusion Detection</button>
            </div>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          API Overview
        </a>
        <a href="/api/monitoring" class="nav-btn secondary">
          <span class="btn-icon">üìä</span>
          Monitoring
        </a>
        <a href="/api/documentation" class="nav-btn primary">
          <span class="btn-icon">üìö</span>
          Documentation
        </a>
      </div>
    </div>

    <script>
      ${getApiSecurityScripts()}
    </script>
  `;
}

function getApiMonitoringStyles(): string {
  return `
    .api-monitoring-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .monitoring-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .monitoring-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .monitoring-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .monitoring-card.neutral {
      border-left: 4px solid #6b7280;
    }

    .monitoring-card.up {
      border-left: 4px solid #22c55e;
    }

    .monitoring-card.down {
      border-left: 4px solid #ef4444;
    }

    .monitoring-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .monitoring-value {
      font-size: 2.5rem;
      font-weight: 800;
      color: #40e0d0;
      margin-bottom: 0.5rem;
    }

    .monitoring-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .monitoring-change {
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .monitoring-change.neutral {
      background: rgba(107, 114, 128, 0.2);
      color: #6b7280;
    }

    .monitoring-change.up {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .monitoring-change.down {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .performance-table {
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      overflow: hidden;
      margin-top: 2rem;
    }

    .table-header {
      display: grid;
      grid-template-columns: 2fr 80px 80px 80px 100px 80px 150px;
      gap: 1rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.1);
      font-weight: 600;
      color: #e0e6ed;
    }

    .table-row {
      display: grid;
      grid-template-columns: 2fr 80px 80px 80px 100px 80px 150px;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      transition: background 0.2s ease;
    }

    .table-row:hover {
      background: rgba(255, 255, 255, 0.05);
    }

    .endpoint-path {
      color: #40e0d0;
      font-family: monospace;
      font-size: 0.9rem;
    }

    .high-error {
      color: #ef4444;
      font-weight: 600;
    }

    .low-error {
      color: #22c55e;
    }

    .alerts-container {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 2rem;
      margin-top: 2rem;
    }

    .alerts-summary {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .alert-summary-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
      border: 1px solid rgba(251, 191, 36, 0.3);
    }

    .alert-icon {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }

    .alert-count {
      font-size: 2rem;
      font-weight: 800;
      color: #f59e0b;
      display: block;
      margin-bottom: 0.5rem;
    }

    .alert-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .recent-alerts {
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      padding: 1.5rem;
    }

    .recent-alerts h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .alerts-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .alert-item {
      display: grid;
      grid-template-columns: 50px 1fr auto;
      gap: 1rem;
      align-items: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border-left: 4px solid;
    }

    .alert-item.error {
      border-left-color: #ef4444;
    }

    .alert-item.warning {
      border-left-color: #f59e0b;
    }

    .alert-item.success {
      border-left-color: #22c55e;
    }

    .alert-item.info {
      border-left-color: #3b82f6;
    }

    .alert-type-icon {
      font-size: 1.2rem;
    }

    .alert-content {
      flex: 1;
    }

    .alert-message {
      color: #e0e6ed;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }

    .alert-meta {
      color: #a0a9b8;
      font-size: 0.8rem;
    }

    .alert-action-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .alert-action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .monitoring-controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .control-group {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
    }

    .control-group h3 {
      color: #e0e6ed;
      margin-bottom: 1.5rem;
    }

    .control-buttons {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .control-btn {
      padding: 0.75rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }

    .control-btn:not(.secondary) {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .control-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .control-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    .health-dashboard {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .health-component {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .component-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .component-header h3 {
      color: #e0e6ed;
      margin: 0;
    }

    .component-status {
      color: #22c55e;
      font-weight: 600;
    }

    .component-metrics {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .metric {
      font-size: 0.9rem;
      color: #a0a9b8;
    }

    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .api-monitoring-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .alerts-container {
        grid-template-columns: 1fr;
      }

      .monitoring-controls {
        grid-template-columns: 1fr;
      }

      .health-dashboard {
        grid-template-columns: 1fr;
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }

      /* Enhanced Monitoring Dashboard */
      .monitoring-dashboard {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
      }

      .monitoring-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
      }

      .monitoring-card {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 16px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
      }

      .monitoring-card:hover {
        transform: translateY(-5px);
        border-color: #40e0d0;
        box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
      }

      .monitoring-card.up {
        border-left: 4px solid #22c55e;
      }

      .monitoring-card.down {
        border-left: 4px solid #ef4444;
      }

      .monitoring-card.neutral {
        border-left: 4px solid #a0a9b8;
      }

      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }

      .metric-sparkline {
        opacity: 0.7;
      }

      .card-content {
        margin-bottom: 1rem;
      }

      .card-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .metric-target,
      .metric-status {
        font-size: 0.8rem;
        color: #a0a9b8;
      }

      .metric-status.good {
        color: #22c55e;
      }

      .metric-status.warning {
        color: #f59e0b;
      }

      .metric-status.neutral {
        color: #a0a9b8;
      }

      /* Performance Chart Section */
      .performance-chart-section {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.2);
      }

      .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
      }

      .chart-header h3 {
        color: #e0e6ed;
        margin: 0;
      }

      .chart-controls {
        display: flex;
        gap: 0.5rem;
      }

      .chart-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(64, 224, 208, 0.1);
        color: #40e0d0;
        cursor: pointer;
        font-size: 0.8rem;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .chart-btn:hover,
      .chart-btn.active {
        background: #40e0d0;
        color: #0a0e27;
      }

      .live-chart-container {
        position: relative;
        height: 300px;
      }

      .chart-loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #a0a9b8;
      }

      .loading-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
      }

      .loading-text {
        font-size: 0.9rem;
        margin-bottom: 1rem;
      }

      .loading-spinner {
        width: 20px;
        height: 20px;
        border: 2px solid rgba(64, 224, 208, 0.3);
        border-top: 2px solid #40e0d0;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* Advanced Alert Management */
      .alerts-dashboard {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2rem;
      }

      .alerts-summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
      }

      .alert-summary-card {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 16px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
      }

      .alert-summary-card:hover {
        transform: translateY(-5px);
        border-color: #40e0d0;
        box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
      }

      .alert-summary-card.critical {
        border-left: 4px solid #ef4444;
      }

      .alert-summary-card.resolved {
        border-left: 4px solid #22c55e;
      }

      .alert-summary-card.weekly {
        border-left: 4px solid #40e0d0;
      }

      .alert-summary-card.rules {
        border-left: 4px solid #f59e0b;
      }

      .alert-summary-card .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }

      .alert-summary-card .card-content {
        flex: 1;
      }

      .alert-pulse {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #ef4444;
        animation: pulse 2s infinite;
      }

      .resolution-rate {
        font-size: 0.8rem;
        color: #22c55e;
        font-weight: 700;
        background: rgba(34, 197, 94, 0.1);
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
      }

      .weekly-chart {
        opacity: 0.7;
      }

      .rules-status.active {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #f59e0b;
      }

      .alert-trend {
        font-size: 0.8rem;
        font-weight: 600;
        margin-top: 0.5rem;
      }

      .alert-trend.good {
        color: #22c55e;
      }

      .alert-trend.warning {
        color: #f59e0b;
      }

      .alert-trend.neutral {
        color: #a0a9b8;
      }

      /* Alert Timeline */
      .alerts-timeline {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.2);
      }

      .timeline-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
      }

      .timeline-header h3 {
        color: #e0e6ed;
        margin: 0;
      }

      .timeline-controls {
        display: flex;
        gap: 0.5rem;
      }

      .timeline-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(64, 224, 208, 0.1);
        color: #40e0d0;
        cursor: pointer;
        font-size: 0.8rem;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .timeline-btn:hover,
      .timeline-btn.active {
        background: #40e0d0;
        color: #0a0e27;
      }

      .timeline-container {
        position: relative;
      }

      .timeline-item {
        display: flex;
        margin-bottom: 2rem;
        position: relative;
        animation: fadeInUp 0.6s ease-out both;
      }

      .timeline-marker {
        flex-shrink: 0;
        width: 40px;
        position: relative;
        margin-right: 1rem;
      }

      .marker-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        position: absolute;
        top: 6px;
        left: 14px;
        z-index: 2;
      }

      .marker-dot.error {
        background: #ef4444;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
      }

      .marker-dot.warning {
        background: #f59e0b;
        box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.2);
      }

      .marker-dot.success {
        background: #22c55e;
        box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.2);
      }

      .marker-dot.info {
        background: #40e0d0;
        box-shadow: 0 0 0 3px rgba(64, 224, 208, 0.2);
      }

      .marker-line {
        width: 2px;
        height: 100%;
        background: rgba(64, 224, 208, 0.2);
        position: absolute;
        left: 20px;
        top: 18px;
      }

      .timeline-content {
        flex: 1;
      }

      .alert-card {
        background: rgba(255, 255, 255, 0.08);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(64, 224, 208, 0.3);
        transition: all 0.3s ease;
      }

      .alert-card:hover {
        border-color: #40e0d0;
        box-shadow: 0 4px 15px rgba(64, 224, 208, 0.1);
      }

      .alert-card.error {
        border-left: 4px solid #ef4444;
      }

      .alert-card.warning {
        border-left: 4px solid #f59e0b;
      }

      .alert-card.success {
        border-left: 4px solid #22c55e;
      }

      .alert-card.info {
        border-left: 4px solid #40e0d0;
      }

      .alert-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
      }

      .alert-type-icon {
        font-size: 1.5rem;
        margin-right: 1rem;
      }

      .alert-meta {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        font-size: 0.8rem;
        color: #a0a9b8;
      }

      .alert-time {
        font-weight: 600;
      }

      .alert-endpoint {
        color: #40e0d0;
      }

      .alert-actions {
        display: flex;
        gap: 0.5rem;
      }

      .alert-action-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(64, 224, 208, 0.1);
        color: #40e0d0;
        cursor: pointer;
        font-size: 0.8rem;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .alert-action-btn:hover {
        background: #40e0d0;
        color: #0a0e27;
      }

      .alert-action-btn.secondary {
        background: rgba(255, 255, 255, 0.1);
        color: #a0a9b8;
        border-color: rgba(255, 255, 255, 0.2);
      }

      .alert-action-btn.secondary:hover {
        background: rgba(255, 255, 255, 0.2);
        color: #e0e6ed;
      }

      .alert-action-btn.danger {
        background: rgba(239, 68, 68, 0.1);
        color: #ef4444;
        border-color: rgba(239, 68, 68, 0.3);
      }

      .alert-action-btn.danger:hover {
        background: #ef4444;
        color: white;
      }

      .alert-message {
        color: #e0e6ed;
        font-weight: 600;
        margin-bottom: 1rem;
        line-height: 1.4;
      }

      .alert-details {
        display: flex;
        gap: 2rem;
        font-size: 0.8rem;
        color: #a0a9b8;
      }

      .detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      /* Filters */
      .alert-filters {
        display: flex;
        gap: 1rem;
        align-items: center;
      }

      .alert-filters select {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(255, 255, 255, 0.05);
        color: #e0e6ed;
        font-size: 0.9rem;
      }

      .alert-filters select:focus {
        outline: none;
        border-color: #40e0d0;
      }

      .time-range-selector select {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: 1px solid rgba(64, 224, 208, 0.3);
        background: rgba(255, 255, 255, 0.05);
        color: #e0e6ed;
        font-size: 0.9rem;
      }

      .time-range-selector select:focus {
        outline: none;
        border-color: #40e0d0;
      }

      /* Animations */
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Mobile Responsive */
      @media (max-width: 768px) {
        .monitoring-dashboard {
          gap: 1.5rem;
        }

        .monitoring-grid {
          grid-template-columns: 1fr;
        }

        .alerts-summary-grid {
          grid-template-columns: 1fr;
          gap: 1rem;
        }

        .alert-filters {
          flex-direction: column;
          width: 100%;
        }

        .alert-filters select {
          flex: 1;
        }

        .timeline-header {
          flex-direction: column;
          gap: 1rem;
          align-items: flex-start;
        }

        .timeline-controls {
          width: 100%;
          justify-content: center;
        }

        .alert-header {
          flex-direction: column;
          gap: 1rem;
          align-items: flex-start;
        }

        .alert-actions {
          width: 100%;
          justify-content: center;
        }

        .alert-details {
          flex-direction: column;
          gap: 0.5rem;
        }
      }
    }

    /* Enhanced API Monitoring Styles */

    /* Predictive Analytics */
    .predictive-analytics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .predictive-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 215, 0, 0.3);
      border-radius: 12px;
      padding: 1.5rem;
      transition: all 0.3s ease;
    }

    .predictive-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .predictive-card .card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .predictive-icon {
      font-size: 2rem;
    }

    .predictive-card h3 {
      color: #e0e6ed;
      margin: 0;
      font-size: 1.3rem;
    }

    .prediction-metric {
      text-align: center;
      margin-bottom: 1rem;
    }

    .prediction-metric .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: #22c55e;
      margin-bottom: 0.5rem;
    }

    .prediction-metric .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .confidence-indicator {
      text-align: center;
    }

    .confidence-bar {
      width: 100%;
      height: 8px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      margin-bottom: 0.5rem;
      overflow: hidden;
    }

    .confidence-fill {
      height: 100%;
      background: linear-gradient(90deg, #22c55e, #40e0d0);
      border-radius: 4px;
      transition: width 0.3s ease;
    }

    .confidence-text {
      color: #40e0d0;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .prediction-alert {
      padding: 0.75rem;
      border-radius: 8px;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .prediction-alert.warning {
      background: rgba(251, 191, 36, 0.1);
      border: 1px solid rgba(251, 191, 36, 0.3);
    }

    .prediction-alert .alert-icon {
      color: #fbbf24;
    }

    .recommendation {
      padding: 0.75rem;
      background: rgba(34, 197, 94, 0.1);
      border: 1px solid rgba(34, 197, 94, 0.3);
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .recommendation .rec-icon {
      color: #22c55e;
    }

    .threat-level {
      text-align: center;
      margin-bottom: 1rem;
    }

    .threat-indicator {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-weight: 600;
    }

    .threat-indicator.low {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .threat-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: #22c55e;
    }

    .threat-analysis {
      margin-top: 1rem;
    }

    .analysis-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
      margin-bottom: 0.5rem;
    }

    .analysis-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .analysis-value {
      color: #e0e6ed;
      font-weight: 600;
      font-size: 0.9rem;
    }

    .cost-saving {
      text-align: center;
      margin-bottom: 1rem;
    }

    .saving-amount {
      font-size: 2rem;
      font-weight: 700;
      color: #ffd700;
      margin-bottom: 0.5rem;
    }

    .saving-period {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .optimization-tips {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .optimization-tips .tip {
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    /* Cost Analysis */
    .cost-analysis-dashboard {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 2rem;
    }

    .cost-metrics {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .cost-metric-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 215, 0, 0.3);
      border-radius: 12px;
      padding: 1.5rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      transition: all 0.3s ease;
    }

    .cost-metric-card:hover {
      transform: translateY(-2px);
      border-color: #ffd700;
    }

    .cost-metric-card .metric-icon {
      font-size: 2rem;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(255, 215, 0, 0.1);
      border-radius: 50%;
    }

    .cost-metric-card .metric-content {
      flex: 1;
    }

    .cost-metric-card .metric-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #ffd700;
      margin-bottom: 0.25rem;
    }

    .cost-metric-card .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .cost-metric-card .metric-change {
      font-size: 0.8rem;
      font-weight: 600;
    }

    .cost-metric-card .metric-change.up {
      color: #22c55e;
    }

    .cost-metric-card .metric-change.down {
      color: #ef4444;
    }

    .cost-breakdown h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .cost-breakdown-chart {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .cost-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
    }

    .service-name {
      flex: 1;
      font-weight: 600;
      color: #e0e6ed;
    }

    .service-cost {
      color: #ffd700;
      font-weight: 600;
      min-width: 80px;
      text-align: right;
    }

    .service-percentage {
      color: #a0a9b8;
      font-size: 0.9rem;
      min-width: 50px;
      text-align: right;
    }

    .cost-bar {
      flex: 2;
      height: 12px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 6px;
      overflow: hidden;
      margin-left: 1rem;
    }

    .cost-fill {
      height: 100%;
      border-radius: 6px;
      transition: width 0.3s ease;
    }

    .cost-fill.compute {
      background: linear-gradient(90deg, #ffd700, #ff6b35);
    }

    .cost-fill.storage {
      background: linear-gradient(90deg, #40e0d0, #06b6d4);
    }

    .cost-fill.bandwidth {
      background: linear-gradient(90deg, #a855f7, #8b5cf6);
    }

    .cost-fill.monitoring {
      background: linear-gradient(90deg, #22c55e, #16a34a);
    }

    /* Versioning */
    .versioning-dashboard {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
    }

    .version-overview {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .version-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border-left: 4px solid;
      position: relative;
    }

    .version-card.current {
      border-left-color: #22c55e;
    }

    .version-card.deprecated {
      border-left-color: #f59e0b;
    }

    .version-card.legacy {
      border-left-color: #ef4444;
    }

    .version-badge {
      font-size: 1.2rem;
      font-weight: 700;
      color: #ffd700;
      margin-bottom: 0.5rem;
    }

    .version-status {
      font-size: 0.9rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .version-card.current .version-status {
      color: #22c55e;
    }

    .version-card.deprecated .version-status {
      color: #f59e0b;
    }

    .version-card.legacy .version-status {
      color: #ef4444;
    }

    .version-usage {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .version-date {
      color: #40e0d0;
      font-size: 0.8rem;
      margin-bottom: 1rem;
    }

    .deprecation-notice {
      padding: 0.75rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
      font-weight: 600;
    }

    .version-card.deprecated .deprecation-notice {
      background: rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.3);
      color: #f59e0b;
    }

    .version-card.legacy .deprecation-notice {
      background: rgba(239, 68, 68, 0.1);
      border: 1px solid rgba(239, 68, 68, 0.3);
      color: #ef4444;
    }

    .warning-icon {
      font-size: 1.2rem;
    }

    .migration-planning h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
    }

    .migration-steps {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .migration-step {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
      border-left: 4px solid;
    }

    .migration-step.completed {
      border-left-color: #22c55e;
      background: rgba(34, 197, 94, 0.05);
    }

    .migration-step.in-progress {
      border-left-color: #ffd700;
      background: rgba(255, 215, 0, 0.05);
    }

    .migration-step.upcoming {
      border-left-color: #a0a9b8;
      background: rgba(160, 169, 184, 0.05);
    }

    .step-number {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      font-size: 1.1rem;
    }

    .migration-step.completed .step-number {
      background: #22c55e;
      color: white;
    }

    .migration-step.in-progress .step-number {
      background: #ffd700;
      color: #000;
    }

    .migration-step.upcoming .step-number {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
    }

    .step-content {
      flex: 1;
    }

    .step-title {
      font-weight: 600;
      color: #e0e6ed;
      margin-bottom: 0.25rem;
    }

    .step-description {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .step-date {
      color: #40e0d0;
      font-size: 0.8rem;
    }

    .step-status {
      font-size: 1.5rem;
    }

    /* Error Analysis */
    .error-analysis-dashboard {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }

    .error-overview {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    .error-summary {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .error-metric {
      text-align: center;
      margin-bottom: 1.5rem;
    }

    .error-value {
      font-size: 2rem;
      font-weight: 700;
      color: #ef4444;
      margin-bottom: 0.5rem;
    }

    .error-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .error-trend {
      font-size: 0.8rem;
      font-weight: 600;
    }

    .error-trend.down {
      color: #22c55e;
    }

    .error-breakdown {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
    }

    .error-type {
      text-align: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
    }

    .error-code {
      font-size: 1.2rem;
      font-weight: 700;
      color: #ef4444;
      display: block;
      margin-bottom: 0.5rem;
    }

    .error-count {
      font-size: 1.1rem;
      font-weight: 600;
      color: #e0e6ed;
      display: block;
      margin-bottom: 0.25rem;
    }

    .error-percentage {
      font-size: 0.9rem;
      color: #a0a9b8;
    }

    .error-heatmap h3 {
      color: #ef4444;
      margin-bottom: 1rem;
      text-align: center;
    }

    .heatmap-grid {
      display: grid;
      grid-template-columns: repeat(6, 1fr);
      gap: 0.5rem;
    }

    .heatmap-cell {
      aspect-ratio: 1;
      border-radius: 4px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    .heatmap-cell.high {
      background: rgba(239, 68, 68, 0.8);
    }

    .heatmap-cell.medium {
      background: rgba(251, 191, 36, 0.6);
    }

    .heatmap-cell.low {
      background: rgba(34, 197, 94, 0.4);
    }

    .hour-label {
      font-size: 0.7rem;
      color: white;
      font-weight: 600;
      z-index: 1;
    }

    .error-intensity {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(255, 255, 255, 0.2);
      height: 20%;
    }

    .error-details h3 {
      color: #ef4444;
      margin-bottom: 1rem;
    }

    .error-patterns {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .error-pattern-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(239, 68, 68, 0.3);
      border-radius: 12px;
      padding: 1.5rem;
    }

    .pattern-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .error-description {
      color: #e0e6ed;
      font-weight: 600;
    }

    .pattern-analysis {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .analysis-point {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
    }

    .point-icon {
      color: #40e0d0;
    }

    /* Integration Health */
    .integration-health-dashboard {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    .integration-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }

    .integration-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border-left: 4px solid;
      transition: all 0.3s ease;
    }

    .integration-card:hover {
      transform: translateY(-5px);
    }

    .integration-card.healthy {
      border-left-color: #22c55e;
    }

    .integration-card.warning {
      border-left-color: #f59e0b;
    }

    .integration-card.error {
      border-left-color: #ef4444;
    }

    .integration-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .integration-icon {
      font-size: 2.5rem;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
    }

    .integration-info h3 {
      color: #e0e6ed;
      margin-bottom: 0.25rem;
      font-size: 1.2rem;
    }

    .integration-status {
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .integration-card.healthy .integration-status {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .integration-card.warning .integration-status {
      background: rgba(245, 158, 11, 0.2);
      color: #f59e0b;
    }

    .integration-card.error .integration-status {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .integration-metrics {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1rem;
    }

    .integration-metrics .metric {
      text-align: center;
      font-size: 0.9rem;
    }

    .integration-metrics .metric:first-child {
      color: #40e0d0;
    }

    .integration-metrics .metric:nth-child(2) {
      color: #ffd700;
    }

    .integration-metrics .metric:last-child {
      color: #22c55e;
    }

    .integration-alert {
      padding: 0.75rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
    }

    .integration-alert.warning {
      background: rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.3);
    }

    .integration-alert.critical {
      background: rgba(239, 68, 68, 0.1);
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .alert-icon {
      font-size: 1.2rem;
    }

    .integration-summary {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .summary-stats {
      display: flex;
      justify-content: space-around;
      text-align: center;
    }

    .summary-stat .stat-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #40e0d0;
      display: block;
      margin-bottom: 0.25rem;
    }

    .summary-stat .stat-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    /* Performance Optimization */
    .optimization-dashboard {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
    }

    .optimization-recommendations {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .recommendation-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border-left: 4px solid;
      transition: all 0.3s ease;
    }

    .recommendation-card:hover {
      transform: translateY(-5px);
    }

    .recommendation-card.high-impact {
      border-left-color: #22c55e;
    }

    .recommendation-card.medium-impact {
      border-left-color: #ffd700;
    }

    .recommendation-card.low-impact {
      border-left-color: #a0a9b8;
    }

    .rec-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .rec-priority {
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .rec-priority.high {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .rec-priority.medium {
      background: rgba(255, 215, 0, 0.2);
      color: #ffd700;
    }

    .rec-priority.low {
      background: rgba(160, 169, 184, 0.2);
      color: #a0a9b8;
    }

    .rec-icon {
      font-size: 1.5rem;
    }

    .recommendation-card h3 {
      color: #e0e6ed;
      margin: 0;
      font-size: 1.2rem;
    }

    .rec-content p {
      color: #a0a9b8;
      margin-bottom: 1rem;
      line-height: 1.6;
    }

    .rec-metrics {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .rec-metrics .metric {
      font-size: 0.9rem;
      color: #40e0d0;
    }

    .rec-actions {
      display: flex;
      gap: 0.5rem;
    }

    .rec-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.2s ease;
    }

    .rec-btn.primary {
      background: linear-gradient(135deg, #22c55e, #16a34a);
      color: white;
    }

    .rec-btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);
    }

    .rec-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .rec-btn.secondary:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    .optimization-simulator {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
    }

    .optimization-simulator h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .simulator-controls {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .simulator-input {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .simulator-input label {
      color: #a0a9b8;
      font-size: 0.9rem;
      font-weight: 600;
    }

    .simulator-input input {
      padding: 0.75rem;
      border-radius: 8px;
      border: 1px solid rgba(255, 255, 255, 0.2);
      background: rgba(255, 255, 255, 0.05);
      color: #e0e6ed;
      font-size: 1rem;
    }

    .simulator-input input:focus {
      outline: none;
      border-color: #40e0d0;
      box-shadow: 0 0 0 2px rgba(64, 224, 208, 0.1);
    }

    .simulator-results {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .result-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
    }

    .result-item.savings {
      background: rgba(34, 197, 94, 0.1);
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .result-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .result-value {
      color: #ffd700;
      font-weight: 600;
      font-size: 1rem;
    }

    .result-item.savings .result-value {
      color: #22c55e;
    }

    /* Live Betting Dashboard Styles */
    .betting-dashboard {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    /* Betting Summary Grid */
    .betting-summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .betting-metric-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .betting-metric-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .betting-metric-card .metric-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(255, 215, 0, 0.1);
      border-radius: 50%;
    }

    .betting-metric-card .metric-content {
      text-align: center;
    }

    .betting-metric-card .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: #ffd700;
      margin-bottom: 0.5rem;
    }

    .betting-metric-card .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .betting-metric-card .metric-change {
      font-size: 0.8rem;
      font-weight: 600;
    }

    .betting-metric-card .metric-change.up {
      color: #22c55e;
    }

    .betting-metric-card .metric-change.down {
      color: #ef4444;
    }

    .betting-metric-card .metric-change.warning {
      color: #f59e0b;
    }

    .betting-metric-card .metric-change.neutral {
      color: #40e0d0;
    }

    /* Live Games Section */
    .live-games-section h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .games-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
    }

    .game-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid;
      transition: all 0.3s ease;
      position: relative;
    }

    .game-card:hover {
      transform: translateY(-5px);
    }

    .game-card.live-game {
      border-color: #22c55e;
      background: rgba(34, 197, 94, 0.05);
    }

    .game-card.live-game:hover {
      border-color: #22c55e;
      box-shadow: 0 8px 25px rgba(34, 197, 94, 0.2);
    }

    .game-card.upcoming-game {
      border-color: #40e0d0;
      background: rgba(64, 224, 208, 0.05);
    }

    .game-card.upcoming-game:hover {
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .game-card.completed-game {
      border-color: #a0a9b8;
      background: rgba(160, 169, 184, 0.05);
    }

    .game-card.completed-game:hover {
      border-color: #a0a9b8;
      box-shadow: 0 8px 25px rgba(160, 169, 184, 0.2);
    }

    .game-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .game-teams {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .team {
      text-align: center;
    }

    .team.winner {
      font-weight: 700;
    }

    .team-name {
      font-weight: 600;
      color: #e0e6ed;
      display: block;
    }

    .team-record {
      font-size: 0.8rem;
      color: #a0a9b8;
    }

    .vs {
      font-weight: 700;
      color: #ffd700;
      padding: 0.5rem;
    }

    .game-status {
      font-size: 0.9rem;
      font-weight: 600;
      padding: 0.5rem 1rem;
      border-radius: 20px;
    }

    .game-status.live {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .game-status.upcoming {
      background: rgba(64, 224, 208, 0.2);
      color: #40e0d0;
    }

    .game-status.completed {
      background: rgba(160, 169, 184, 0.2);
      color: #a0a9b8;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: #22c55e;
      animation: pulse 2s infinite;
    }

    .game-metrics {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .game-metrics .metric {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
    }

    .game-metrics .label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .game-metrics .value {
      color: #e0e6ed;
      font-weight: 600;
    }

    .game-actions {
      display: flex;
      gap: 0.5rem;
      justify-content: flex-end;
    }

    .game-actions .action-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.85rem;
      transition: all 0.2s ease;
    }

    .game-actions .action-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .game-actions .action-btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .game-actions .action-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .game-actions .action-btn.secondary:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    /* Odds Monitoring Section */
    .odds-monitoring-section h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .odds-alerts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
    }

    .odds-alert-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid;
      transition: all 0.3s ease;
    }

    .odds-alert-card:hover {
      transform: translateY(-5px);
    }

    .odds-alert-card.warning {
      border-color: #f59e0b;
      background: rgba(245, 158, 11, 0.05);
    }

    .odds-alert-card.warning:hover {
      border-color: #f59e0b;
      box-shadow: 0 8px 25px rgba(245, 158, 11, 0.2);
    }

    .odds-alert-card.info {
      border-color: #40e0d0;
      background: rgba(64, 224, 208, 0.05);
    }

    .odds-alert-card.info:hover {
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .odds-alert-card.success {
      border-color: #22c55e;
      background: rgba(34, 197, 94, 0.05);
    }

    .odds-alert-card.success:hover {
      border-color: #22c55e;
      box-shadow: 0 8px 25px rgba(34, 197, 94, 0.2);
    }

    .alert-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .alert-icon {
      font-size: 1.5rem;
    }

    .odds-alert-card h4 {
      color: #e0e6ed;
      margin: 0;
      font-size: 1.1rem;
    }

    .alert-time {
      margin-left: auto;
      color: #a0a9b8;
      font-size: 0.8rem;
    }

    .alert-content {
      margin-bottom: 1rem;
    }

    .game-info {
      font-weight: 600;
      color: #ffd700;
      margin-bottom: 1rem;
    }

    .odds-comparison {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .our-odds, .market-odds, .discrepancy {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
    }

    .discrepancy .value.warning {
      color: #ef4444;
      font-weight: 700;
    }

    .market-movement {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .movement-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
    }

    .position-recommendation {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .rec-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
    }

    .alert-actions {
      display: flex;
      gap: 0.5rem;
      justify-content: flex-end;
    }

    .alert-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.85rem;
      transition: all 0.2s ease;
    }

    .alert-btn.primary {
      background: linear-gradient(135deg, #22c55e, #16a34a);
      color: white;
    }

    .alert-btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(34, 197, 94, 0.3);
    }

    .alert-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .alert-btn.secondary:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    /* Position Tracking Section */
    .position-tracking-section h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .position-dashboard {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
    }

    .position-summary {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .position-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
      transition: all 0.3s ease;
    }

    .position-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .position-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .position-card h4 {
      color: #e0e6ed;
      margin: 0;
      font-size: 1.2rem;
    }

    .position-status {
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .position-status.live {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .position-status.upcoming {
      background: rgba(64, 224, 208, 0.2);
      color: #40e0d0;
    }

    .position-breakdown {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .position-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
    }

    .bet-type {
      font-weight: 600;
      color: #e0e6ed;
    }

    .amount {
      color: #ffd700;
      font-weight: 700;
    }

    .positions {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .position-actions {
      display: flex;
      gap: 0.5rem;
      justify-content: flex-end;
    }

    .position-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.85rem;
      transition: all 0.2s ease;
    }

    .position-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .position-btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .position-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .position-btn.secondary:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    .position-analytics {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .position-analytics h4 {
      color: #40e0d0;
      margin-bottom: 1rem;
      text-align: center;
    }

    .analytics-metrics {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .analytics-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
    }

    .analytics-item .label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .analytics-item .value {
      color: #e0e6ed;
      font-weight: 600;
    }

    .analytics-item .value.low-risk {
      color: #22c55e;
    }

    /* Market Data Section */
    .market-data-section h3 {
      color: #ffd700;
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .market-comparison-table {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      overflow: hidden;
      border: 1px solid rgba(255, 215, 0, 0.3);
    }

    .market-comparison-table .table-header {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr;
      gap: 1rem;
      padding: 1rem;
      background: rgba(255, 215, 0, 0.1);
      border-bottom: 1px solid rgba(255, 215, 0, 0.3);
    }

    .market-comparison-table .table-header .table-cell {
      font-weight: 700;
      color: #ffd700;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .table-row {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      transition: all 0.2s ease;
    }

    .table-row:hover {
      background: rgba(255, 255, 255, 0.02);
    }

    .table-row .table-cell {
      display: flex;
      align-items: center;
      color: #e0e6ed;
    }

    .game-cell {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }

    .game-name {
      font-weight: 600;
      color: #e0e6ed;
    }

    .game-time {
      font-size: 0.8rem;
      color: #a0a9b8;
    }

    .table-cell.warning {
      color: #ef4444;
      font-weight: 700;
    }

    .table-cell.success {
      color: #22c55e;
      font-weight: 700;
    }

    .table-cell.neutral {
      color: #40e0d0;
    }

    .table-btn {
      padding: 0.4rem 0.8rem;
      border-radius: 4px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.8rem;
      transition: all 0.2s ease;
    }

    .table-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .table-btn.primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(255, 215, 0, 0.3);
    }

    .table-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .table-btn.secondary:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    .table-btn.success {
      background: linear-gradient(135deg, #22c55e, #16a34a);
      color: white;
    }

    .table-btn.success:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(34, 197, 94, 0.3);
    }

    /* Live Status Indicator */
    .live-status .status-indicator.live::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border: 2px solid rgba(34, 197, 94, 0.3);
      border-radius: 50%;
      animation: pulse-ring 2s infinite;
    }

    .live-status .status-text {
      color: #22c55e;
      font-weight: 600;
    }

    /* Responsive Design for Betting Dashboard */
    @media (max-width: 768px) {
      .betting-summary-grid {
        grid-template-columns: 1fr;
      }

      .games-grid {
        grid-template-columns: 1fr;
      }

      .odds-alerts-grid {
        grid-template-columns: 1fr;
      }

      .position-dashboard {
        grid-template-columns: 1fr;
      }

      .market-comparison-table .table-header,
      .market-comparison-table .table-row {
        grid-template-columns: 1fr;
        gap: 0.5rem;
      }

      .market-comparison-table .table-header {
        display: none;
      }

      .table-row .table-cell {
        justify-content: space-between;
        padding: 0.25rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .table-row .table-cell::before {
        content: attr(data-label);
        font-weight: 600;
        color: #a0a9b8;
        font-size: 0.8rem;
      }

      .game-cell::before {
        content: "Game";
      }

      .table-cell:nth-child(2)::before {
        content: "Our Line";
      }

      .table-cell:nth-child(3)::before {
        content: "Market Avg";
      }

      .table-cell:nth-child(4)::before {
        content: "Difference";
      }

      .table-cell:nth-child(5)::before {
        content: "Sharp Action";
      }

      .table-cell:nth-child(6)::before {
        content: "Action";
      }
    }
  `;
}

function getApiMonitoringScripts(): string {
  return `
    // API Monitoring - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiMonitoring();
    });

    function initializeApiMonitoring() {
      startMonitoringUpdates();
      setupMonitoringListeners();

      // Initialize enhanced features
      initializeMonitoringDashboard();
      initializePerformanceChart();
      initializeAlertManagement();

      // Initialize new enhanced features
      initializePredictiveAnalytics();
      initializeCostAnalysis();
      initializeErrorAnalysis();
      initializeIntegrationHealth();
      startBettingUpdates();
    }

    function startMonitoringUpdates() {
      setInterval(() => {
        updateMonitoringTimestamp();
        updateMonitoringMetrics();
      }, 1000);
    }

    function updateMonitoringTimestamp() {
      const element = document.getElementById('monitoringLastUpdate');
      if (element) {
        element.textContent = new Date().toLocaleTimeString();
      }
    }

    function updateMonitoringMetrics() {
      // Simulate metric updates
      const monitoringCards = document.querySelectorAll('.monitoring-card');
      monitoringCards.forEach(card => {
        if (Math.random() < 0.1) {
          card.style.animation = 'pulse 0.5s ease-in-out';
          setTimeout(() => {
            card.style.animation = '';
          }, 500);
        }
      });
    }

    function setupMonitoringListeners() {
      // Control buttons
      document.querySelectorAll('.control-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const action = this.textContent;
          handleMonitoringAction(action);
        });
      });
    }

    // Global functions for button onclick handlers
    function viewEndpointPerformance(endpoint) {
      alert(\`üìä Endpoint Performance: \${endpoint}\\\\n\\\\nüìà Performance Metrics:\\\\n‚Ä¢ Response Time: 142ms (P50), 234ms (P95), 456ms (P99)\\\\n‚Ä¢ Success Rate: 99.9%\\\\n‚Ä¢ Error Rate: 0.1%\\\\n‚Ä¢ Daily Calls: 15.2K\\\\n\\\\nüìä Usage Trends:\\\\n‚Ä¢ Peak hour: 8:00 PM\\\\n‚Ä¢ Average payload: 2.3KB\\\\n‚Ä¢ Cache hit rate: 94.2%\\\\n‚Ä¢ Geographic distribution: 67 countries\\\\n\\\\nüîß Optimization Recommendations:\\\\n‚Ä¢ Consider implementing response caching\\\\n‚Ä¢ Evaluate load balancer distribution\\\\n‚Ä¢ Monitor for seasonal traffic patterns\`);
    }

    function configureEndpointAlerts(endpoint) {
      alert(\`üö® Endpoint Alert Configuration: \${endpoint}\\\\n\\\\n‚ö†Ô∏è Current Alert Rules:\\\\n‚Ä¢ Response time > 500ms\\\\n‚Ä¢ Error rate > 5%\\\\n‚Ä¢ Success rate < 95%\\\\n‚Ä¢ Daily calls > 20K\\\\n\\\\nüìß Notification Settings:\\\\n‚Ä¢ Email: alerts@company.com\\\\n‚Ä¢ Slack: #api-alerts\\\\n‚Ä¢ SMS: Emergency only\\\\n‚Ä¢ PagerDuty: Critical alerts\\\\n\\\\nüîß Alert Actions:\\\\n‚Ä¢ Log to monitoring system\\\\n‚Ä¢ Send notification\\\\n‚Ä¢ Trigger escalation\\\\n‚Ä¢ Auto-mitigation attempt\\\\n\\\\n‚úÖ Alert rules configured for \${endpoint}\`);
    }

    function viewAlertDetails(message) {
      alert(\`üîç Alert Details: \${message}\\\\n\\\\nüìã Alert Information:\\\\n‚Ä¢ Severity: Medium\\\\n‚Ä¢ Status: Resolved\\\\n‚Ä¢ Duration: 15 minutes\\\\n‚Ä¢ Affected endpoints: 3\\\\n‚Ä¢ User impact: Minimal\\\\n\\\\nüîß Resolution Steps:\\\\n‚Ä¢ Database connection restored\\\\n‚Ä¢ Cache cleared and rebuilt\\\\n‚Ä¢ Load balancer rebalanced\\\\n‚Ä¢ Monitoring alerts reset\\\\n\\\\nüìä Impact Assessment:\\\\n‚Ä¢ Total downtime: 15 minutes\\\\n‚Ä¢ Affected requests: 2,847\\\\n‚Ä¢ User notifications: 0\\\\n‚Ä¢ Recovery time: 2 minutes\\\\n\\\\n‚úÖ Incident resolved successfully\`);
    }

    function handleMonitoringAction(action) {
      switch(action) {
        case 'Detailed Logging':
          alert('üìù Detailed Logging Enabled\\\\n\\\\nüîç Enhanced Logging Configuration:\\\\n‚Ä¢ Request/Response headers\\\\n‚Ä¢ Query parameters\\\\n‚Ä¢ User agent details\\\\n‚Ä¢ Geographic information\\\\n‚Ä¢ Performance timings\\\\n\\\\nüìä Log Analysis Features:\\\\n‚Ä¢ Real-time log streaming\\\\n‚Ä¢ Advanced search filters\\\\n‚Ä¢ Pattern recognition\\\\n‚Ä¢ Anomaly detection\\\\n‚Ä¢ Automated alerting\\\\n\\\\nüìÅ Log Storage:\\\\n‚Ä¢ Retention: 90 days\\\\n‚Ä¢ Compression: Enabled\\\\n‚Ä¢ Encryption: AES-256\\\\n‚Ä¢ Backup: Daily\\\\n\\\\n‚úÖ Detailed logging active for all endpoints');
          break;
        case 'Metrics Config':
          alert('üìä Metrics Configuration\\\\n\\\\n‚öôÔ∏è Current Metrics:\\\\n‚Ä¢ Response time percentiles\\\\n‚Ä¢ Error rates and types\\\\n‚Ä¢ Request throughput\\\\n‚Ä¢ Resource utilization\\\\n‚Ä¢ Geographic distribution\\\\n\\\\nüìà Custom Metrics:\\\\n‚Ä¢ Business KPIs\\\\n‚Ä¢ User experience metrics\\\\n‚Ä¢ Performance benchmarks\\\\n‚Ä¢ SLA compliance\\\\n‚Ä¢ Cost optimization\\\\n\\\\nüîß Configuration Options:\\\\n‚Ä¢ Sampling rates\\\\n‚Ä¢ Retention policies\\\\n‚Ä¢ Aggregation intervals\\\\n‚Ä¢ Alert thresholds\\\\n‚Ä¢ Export formats\\\\n\\\\n‚úÖ Metrics configuration updated');
          break;
        case 'Custom Dashboards':
          alert('üìä Custom Dashboard Builder\\\\n\\\\nüéõÔ∏è Dashboard Components:\\\\n‚Ä¢ Real-time metrics charts\\\\n‚Ä¢ Performance trend graphs\\\\n‚Ä¢ Error rate visualizations\\\\n‚Ä¢ Geographic heatmaps\\\\n‚Ä¢ Custom KPI widgets\\\\n\\\\nüìã Available Widgets:\\\\n‚Ä¢ Line charts\\\\n‚Ä¢ Bar charts\\\\n‚Ä¢ Pie charts\\\\n‚Ä¢ Gauge meters\\\\n‚Ä¢ Data tables\\\\n‚Ä¢ Status indicators\\\\n\\\\nüîß Dashboard Features:\\\\n‚Ä¢ Drag-and-drop layout\\\\n‚Ä¢ Real-time updates\\\\n‚Ä¢ Custom time ranges\\\\n‚Ä¢ Alert integration\\\\n‚Ä¢ Export capabilities\\\\n\\\\n‚úÖ Custom dashboard created and saved');
          break;
        case 'Create Alert Rule':
          alert('üö® Create Alert Rule\\\\n\\\\n‚ö†Ô∏è Alert Rule Builder:\\\\n\\\\nüìä Metric Selection:\\\\n‚Ä¢ Response time\\\\n‚Ä¢ Error rate\\\\n‚Ä¢ Request count\\\\n‚Ä¢ Resource usage\\\\n‚Ä¢ Custom metrics\\\\n\\\\nüîß Condition Builder:\\\\n‚Ä¢ Greater than\\\\n‚Ä¢ Less than\\\\n‚Ä¢ Percentage change\\\\n‚Ä¢ Absolute value\\\\n‚Ä¢ Trend analysis\\\\n\\\\nüìß Notification Settings:\\\\n‚Ä¢ Email recipients\\\\n‚Ä¢ Slack channels\\\\n‚Ä¢ SMS numbers\\\\n‚Ä¢ Webhook URLs\\\\n‚Ä¢ Escalation rules\\\\n\\\\n‚è∞ Schedule Settings:\\\\n‚Ä¢ 24/7 monitoring\\\\n‚Ä¢ Business hours\\\\n‚Ä¢ Maintenance windows\\\\n‚Ä¢ Custom schedules\\\\n\\\\n‚úÖ Alert rule created and activated');
          break;
        case 'Notification Channels':
          alert('üì¢ Notification Channels\\\\n\\\\nüìß Email Notifications:\\\\n‚Ä¢ SMTP configuration\\\\n‚Ä¢ Template customization\\\\n‚Ä¢ Recipient management\\\\n‚Ä¢ Delivery tracking\\\\n\\\\nüí¨ Slack Integration:\\\\n‚Ä¢ Webhook setup\\\\n‚Ä¢ Channel selection\\\\n‚Ä¢ Message formatting\\\\n‚Ä¢ User mentions\\\\n\\\\nüì± SMS Notifications:\\\\n‚Ä¢ Provider configuration\\\\n‚Ä¢ Phone number management\\\\n‚Ä¢ Message templates\\\\n‚Ä¢ Delivery confirmation\\\\n\\\\nüîó Webhook Integration:\\\\n‚Ä¢ Custom endpoints\\\\n‚Ä¢ Authentication\\\\n‚Ä¢ Payload formatting\\\\n‚Ä¢ Retry policies\\\\n\\\\n‚úÖ Notification channels configured');
          break;
        case 'Escalation Policies':
          alert('üìà Escalation Policies\\\\n\\\\n‚ö†Ô∏è Escalation Rules:\\\\n\\\\nüìä Severity Levels:\\\\n‚Ä¢ Low: Email notification\\\\n‚Ä¢ Medium: Slack + email\\\\n‚Ä¢ High: SMS + Slack + email\\\\n‚Ä¢ Critical: Phone call + all channels\\\\n\\\\n‚è∞ Time-based Escalation:\\\\n‚Ä¢ Immediate: 0 minutes\\\\n‚Ä¢ Fast: 5 minutes\\\\n‚Ä¢ Normal: 15 minutes\\\\n‚Ä¢ Slow: 60 minutes\\\\n\\\\nüë• Escalation Contacts:\\\\n‚Ä¢ Level 1: On-call engineer\\\\n‚Ä¢ Level 2: Team lead\\\\n‚Ä¢ Level 3: Engineering manager\\\\n‚Ä¢ Level 4: CTO\\\\n\\\\nüîÑ Auto-Resolution:\\\\n‚Ä¢ Self-healing attempts\\\\n‚Ä¢ Rollback procedures\\\\n‚Ä¢ Service restart\\\\n‚Ä¢ Load balancer switch\\\\n\\\\n‚úÖ Escalation policies configured');
          break;
        case 'Performance Report':
          alert('üìä Performance Report Generation\\\\n\\\\nüìã Report Types:\\\\n‚Ä¢ Daily performance summary\\\\n‚Ä¢ Weekly trend analysis\\\\n‚Ä¢ Monthly executive report\\\\n‚Ä¢ Custom date range\\\\n\\\\nüìä Report Sections:\\\\n‚Ä¢ Executive summary\\\\n‚Ä¢ Key performance indicators\\\\n‚Ä¢ System health overview\\\\n‚Ä¢ Incident analysis\\\\n‚Ä¢ Recommendations\\\\n\\\\nüìÅ Export Formats:\\\\n‚Ä¢ PDF (Executive)\\\\n‚Ä¢ Excel (Detailed)\\\\n‚Ä¢ CSV (Raw data)\\\\n‚Ä¢ JSON (API)\\\\n\\\\nüìß Distribution:\\\\n‚Ä¢ Email delivery\\\\n‚Ä¢ Dashboard access\\\\n‚Ä¢ Slack sharing\\\\n‚Ä¢ API endpoints\\\\n\\\\n‚úÖ Performance report generated and distributed');
          break;
        case 'Automated Reports':
          alert('‚è∞ Automated Report Scheduling\\\\n\\\\nüìÖ Schedule Types:\\\\n‚Ä¢ Daily reports (9 AM)\\\\n‚Ä¢ Weekly reports (Monday 9 AM)\\\\n‚Ä¢ Monthly reports (1st 9 AM)\\\\n‚Ä¢ Quarterly reports (Q1 9 AM)\\\\n\\\\nüë• Recipients:\\\\n‚Ä¢ Executive team\\\\n‚Ä¢ Engineering leads\\\\n‚Ä¢ Product managers\\\\n‚Ä¢ External stakeholders\\\\n\\\\nüìä Report Content:\\\\n‚Ä¢ Performance metrics\\\\n‚Ä¢ Error analysis\\\\n‚Ä¢ Usage statistics\\\\n‚Ä¢ Cost optimization\\\\n‚Ä¢ Security status\\\\n\\\\nüîß Automation Features:\\\\n‚Ä¢ Conditional sending\\\\n‚Ä¢ Custom date ranges\\\\n‚Ä¢ Multiple formats\\\\n‚Ä¢ Archive retention\\\\n‚Ä¢ Delivery confirmation\\\\n\\\\n‚úÖ Automated reporting configured');
          break;
        case 'Data Retention':
          alert('üìä Data Retention Policies\\\\n\\\\nüóÇÔ∏è Data Types:\\\\n‚Ä¢ Access logs: 90 days\\\\n‚Ä¢ Error logs: 180 days\\\\n‚Ä¢ Performance metrics: 1 year\\\\n‚Ä¢ Security events: 7 years\\\\n‚Ä¢ Audit trails: 7 years\\\\n\\\\nüíæ Storage Configuration:\\\\n‚Ä¢ Hot storage: 30 days\\\\n‚Ä¢ Warm storage: 90 days\\\\n‚Ä¢ Cold storage: 1 year\\\\n‚Ä¢ Archive storage: 7 years\\\\n\\\\nüîß Retention Rules:\\\\n‚Ä¢ Automatic deletion\\\\n‚Ä¢ Compression enabled\\\\n‚Ä¢ Encryption at rest\\\\n‚Ä¢ Backup verification\\\\n\\\\nüìä Storage Analytics:\\\\n‚Ä¢ Current usage: 2.3TB\\\\n‚Ä¢ Growth rate: +15%/month\\\\n‚Ä¢ Cost optimization: Active\\\\n‚Ä¢ Compliance: GDPR/SOC2\\\\n\\\\n‚úÖ Data retention policies updated');
          break;
      }
    }

    // Enhanced API Monitoring Functions
    function initializePredictiveAnalytics() {
      updateTrafficPredictions();
      setupPerformanceForecasting();
      initializeThreatDetection();
      setupCostOptimization();

      // Auto-refresh predictions
      setInterval(updateTrafficPredictions, 300000);
    }

    // Real-time Log Streaming Functions
    let logStreamingInterval: number | null = null;
    let isLogStreamingActive = false;

    function startLogStreaming() {
      if (isLogStreamingActive) return;

      isLogStreamingActive = true;
      updateLogStreamingStatus(true);

      // Update logs every 30 seconds
      logStreamingInterval = setInterval(async () => {
        try {
          const response = await fetch('/api/logs?limit=10&hours=1');
          const logData = await response.json();

          // Update the log display if it exists
          updateLiveLogDisplay(logData.recentActivity);
        } catch (error) {
          console.error('Error updating live logs:', error);
        }
      }, 30000);
    }

    function stopLogStreaming() {
      if (logStreamingInterval) {
        clearInterval(logStreamingInterval);
        logStreamingInterval = null;
      }
      isLogStreamingActive = false;
      updateLogStreamingStatus(false);
    }

    function updateLogStreamingStatus(active: boolean) {
      const statusElement = document.querySelector('.log-streaming-status');
      if (statusElement) {
        statusElement.textContent = active ? 'üü¢ LIVE' : 'üî¥ OFFLINE';
        statusElement.className = `log-streaming-status ${active ? 'streaming-active' : 'streaming-inactive'}`;
      }
    }

    function updateLiveLogDisplay(logs: any[]) {
      const logContainer = document.querySelector('.live-log-container');
      if (!logContainer) return;

      const logHtml = logs.map(log => `
        <div class="log-entry ${log.status.includes('200') || log.status.includes('201') ? 'success' : 'error'}">
          <span class="log-timestamp">[${log.timestamp}]</span>
          <span class="log-method">${log.method}</span>
          <span class="log-endpoint">${log.endpoint}</span>
          <span class="log-status">${log.status}</span>
        </div>
      `).join('');

      logContainer.innerHTML = logHtml;
    }

    // Log Analytics Dashboard Functions
    async function generateLogAnalytics() {
      try {
        const response = await fetch('/api/logs?limit=100&hours=24');
        const logData = await response.json();

        const analytics = analyzeLogData(logData.recentActivity);
        displayLogAnalytics(analytics);
      } catch (error) {
        console.error('Error generating log analytics:', error);
      }
    }

    function analyzeLogData(logs: any[]) {
      const analytics = {
        totalRequests: logs.length,
        methodBreakdown: {} as Record<string, number>,
        statusBreakdown: {} as Record<string, number>,
        endpointBreakdown: {} as Record<string, number>,
        hourlyDistribution: {} as Record<string, number>,
        responseTimeDistribution: [] as number[],
        errorRate: 0,
        successRate: 0,
        avgResponseTime: 0,
        peakHour: '',
        topEndpoints: [] as Array<{endpoint: string, count: number}>
      };

      logs.forEach(log => {
        // Method breakdown
        analytics.methodBreakdown[log.method] = (analytics.methodBreakdown[log.method] || 0) + 1;

        // Status breakdown
        analytics.statusBreakdown[log.status] = (analytics.statusBreakdown[log.status] || 0) + 1;

        // Endpoint breakdown
        analytics.endpointBreakdown[log.endpoint] = (analytics.endpointBreakdown[log.endpoint] || 0) + 1;

        // Hourly distribution (simplified - using timestamp as hour)
        const hour = log.timestamp.split(':')[0];
        analytics.hourlyDistribution[hour] = (analytics.hourlyDistribution[hour] || 0) + 1;

        // Response time distribution
        if (log.responseTime) {
          analytics.responseTimeDistribution.push(log.responseTime);
        }
      });

      // Calculate rates
      const totalRequests = analytics.totalRequests;
      const successRequests = Object.entries(analytics.statusBreakdown)
        .filter(([status]) => status.includes('200') || status.includes('201'))
        .reduce((sum, [, count]) => sum + count, 0);

      analytics.successRate = totalRequests > 0 ? (successRequests / totalRequests) * 100 : 0;
      analytics.errorRate = 100 - analytics.successRate;

      // Average response time
      if (analytics.responseTimeDistribution.length > 0) {
        analytics.avgResponseTime = analytics.responseTimeDistribution.reduce((sum, time) => sum + time, 0) / analytics.responseTimeDistribution.length;
      }

      // Find peak hour
      let maxCount = 0;
      let peakHour = '';
      Object.entries(analytics.hourlyDistribution).forEach(([hour, count]) => {
        if (count > maxCount) {
          maxCount = count;
          peakHour = hour;
        }
      });
      analytics.peakHour = peakHour + ':00';

      // Top endpoints
      analytics.topEndpoints = Object.entries(analytics.endpointBreakdown)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 5)
        .map(([endpoint, count]) => ({ endpoint, count }));

      return analytics;
    }

    function displayLogAnalytics(analytics: any) {
      // Create method distribution HTML
      const methodDistributionHtml = Object.entries(analytics.methodBreakdown).map(function(entry) {
        var method = entry[0];
        var count = entry[1];
        return '<div class="chart-bar">' +
          '<span class="method-label">' + method + '</span>' +
          '<div class="bar" style="width: ' + ((count / analytics.totalRequests) * 100) + '%"></div>' +
          '<span class="count">' + count + '</span>' +
          '</div>';
      }).join('');

      // Create top endpoints HTML
      const topEndpointsHtml = analytics.topEndpoints.map(function(item: any, index: number) {
        return '<div class="endpoint-item">' +
          '<span class="rank">#' + (index + 1) + '</span>' +
          '<span class="endpoint">' + item.endpoint + '</span>' +
          '<span class="count">' + item.count + '</span>' +
          '</div>';
      }).join('');

      const analyticsHtml =
        '<div class="log-analytics-dashboard">' +
          '<h3>üìä Log Analytics Dashboard</h3>' +

          '<div class="analytics-grid">' +
            '<div class="analytics-card">' +
              '<h4>Total Requests</h4>' +
              '<div class="metric-value">' + analytics.totalRequests.toLocaleString() + '</div>' +
            '</div>' +

            '<div class="analytics-card">' +
              '<h4>Success Rate</h4>' +
              '<div class="metric-value success">' + analytics.successRate.toFixed(1) + '%</div>' +
            '</div>' +

            '<div class="analytics-card">' +
              '<h4>Error Rate</h4>' +
              '<div class="metric-value error">' + analytics.errorRate.toFixed(1) + '%</div>' +
            '</div>' +

            '<div class="analytics-card">' +
              '<h4>Avg Response Time</h4>' +
              '<div class="metric-value">' + analytics.avgResponseTime.toFixed(0) + 'ms</div>' +
            '</div>' +

            '<div class="analytics-card">' +
              '<h4>Peak Hour</h4>' +
              '<div class="metric-value">' + analytics.peakHour + '</div>' +
            '</div>' +
          '</div>' +

          '<div class="analytics-charts">' +
            '<div class="chart-container">' +
              '<h4>Method Distribution</h4>' +
              '<div class="method-chart">' +
                methodDistributionHtml +
              '</div>' +
            '</div>' +

            '<div class="chart-container">' +
              '<h4>Top Endpoints</h4>' +
              '<div class="endpoint-list">' +
                topEndpointsHtml +
              '</div>' +
            '</div>' +
          '</div>' +
        '</div>';

      // Insert analytics into the page
      const analyticsContainer = document.querySelector('.log-analytics-container');
      if (analyticsContainer) {
        analyticsContainer.innerHTML = analyticsHtml;
      } else {
        // Create a modal or alert with analytics
        const analyticsModal = document.createElement('div');
        analyticsModal.innerHTML = analyticsHtml;
        analyticsModal.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: white;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 4px 20px rgba(0,0,0,0.3);
          max-width: 800px;
          max-height: 80vh;
          overflow-y: auto;
          z-index: 10000;
        `;

        // Add close button
        const closeButton = document.createElement('button');
        closeButton.textContent = '√ó';
        closeButton.style.cssText = `
          position: absolute;
          top: 10px;
          right: 10px;
          background: #ff4444;
          color: white;
          border: none;
          border-radius: 50%;
          width: 30px;
          height: 30px;
          cursor: pointer;
        `;
        closeButton.onclick = () => document.body.removeChild(analyticsModal);

        analyticsModal.appendChild(closeButton);
        document.body.appendChild(analyticsModal);
      }
    }

    // Log Filtering and Search Functions
    let currentLogFilters = {
      method: '',
      status: '',
      endpoint: '',
      searchTerm: '',
      timeRange: 24,
      limit: 50
    };

    async function applyLogFilters() {
      try {
        const params = new URLSearchParams({
          limit: currentLogFilters.limit.toString(),
          hours: currentLogFilters.timeRange.toString(),
          method: currentLogFilters.method,
          status: currentLogFilters.status,
          endpoint: currentLogFilters.endpoint,
          search: currentLogFilters.searchTerm
        });

        const response = await fetch(`/api/logs/filtered?${params}`);
        const filteredData = await response.json();

        // Update the log display with filtered results
        updateFilteredLogDisplay(filteredData.logs);
        updateLogStatistics(filteredData.statistics);

      } catch (error) {
        console.error('Error applying log filters:', error);
      }
    }

    function updateFilteredLogDisplay(logs: any[]) {
      const logContainer = document.querySelector('.filtered-log-container');
      if (!logContainer) return;

      const filteredLogs = filterLogsLocally(logs);
      const logHtml = filteredLogs.map(function(log) {
        return '<div class="log-entry ' + getLogEntryClass(log) + '" data-log=\'' + JSON.stringify(log) + '\'>' +
          '<span class="log-timestamp">[' + log.timestamp + ']</span>' +
          '<span class="log-method">' + log.method + '</span>' +
          '<span class="log-endpoint">' + log.endpoint + '</span>' +
          '<span class="log-status">' + log.status + '</span>' +
          '<span class="log-response-time">' + (log.responseTime || 'N/A') + 'ms</span>' +
          '<button class="log-details-btn" onclick="showLogDetails(\'' + JSON.stringify(log).replace(/'/g, '\\\'').replace(/"/g, '&quot;') + '\')">üìã</button>' +
          '</div>';
      }).join('');

      logContainer.innerHTML = logHtml;
    }

    function filterLogsLocally(logs: any[]): any[] {
      return logs.filter(log => {
        // Method filter
        if (currentLogFilters.method && log.method !== currentLogFilters.method) {
          return false;
        }

        // Status filter
        if (currentLogFilters.status && !log.status.includes(currentLogFilters.status)) {
          return false;
        }

        // Endpoint filter
        if (currentLogFilters.endpoint && !log.endpoint.includes(currentLogFilters.endpoint)) {
          return false;
        }

        // Search term filter
        if (currentLogFilters.searchTerm) {
          const searchLower = currentLogFilters.searchTerm.toLowerCase();
          const logText = `${log.method} ${log.endpoint} ${log.status}`.toLowerCase();
          if (!logText.includes(searchLower)) {
            return false;
          }
        }

        return true;
      });
    }

    function getLogEntryClass(log: any): string {
      if (log.status.includes('200') || log.status.includes('201')) {
        return 'success';
      } else if (log.status.includes('400') || log.status.includes('500')) {
        return 'error';
      } else if (log.status.includes('300')) {
        return 'warning';
      }
      return 'info';
    }

    function updateLogStatistics(statistics: any) {
      const statsContainer = document.querySelector('.log-statistics');
      if (!statsContainer) return;

      statsContainer.innerHTML =
        '<div class="stats-grid">' +
          '<div class="stat-item">' +
            '<span class="stat-label">Total Filtered:</span>' +
            '<span class="stat-value">' + statistics.filteredCount + '</span>' +
          '</div>' +
          '<div class="stat-item">' +
            '<span class="stat-label">Success Rate:</span>' +
            '<span class="stat-value success">' + statistics.successRate + '%</span>' +
          '</div>' +
          '<div class="stat-item">' +
            '<span class="stat-label">Avg Response:</span>' +
            '<span class="stat-value">' + statistics.avgResponseTime + 'ms</span>' +
          '</div>' +
          '<div class="stat-item">' +
            '<span class="stat-label">Error Count:</span>' +
            '<span class="stat-value error">' + statistics.errorCount + '</span>' +
          '</div>' +
        '</div>';
    }

    function showLogDetails(logJson: string) {
      try {
        const log = JSON.parse(logJson);

        // Build optional fields HTML
        var optionalFields = '';
        if (log.userAgent) {
          optionalFields += '<div class="detail-row">' +
            '<span class="detail-label">User Agent:</span>' +
            '<span class="detail-value">' + log.userAgent + '</span>' +
            '</div>';
        }
        if (log.ipAddress) {
          optionalFields += '<div class="detail-row">' +
            '<span class="detail-label">IP Address:</span>' +
            '<span class="detail-value">' + log.ipAddress + '</span>' +
            '</div>';
        }

        const detailsHtml =
          '<div class="log-details-modal">' +
            '<h3>üìã Log Entry Details</h3>' +
            '<div class="details-grid">' +
              '<div class="detail-row">' +
                '<span class="detail-label">Timestamp:</span>' +
                '<span class="detail-value">' + log.timestamp + '</span>' +
              '</div>' +
              '<div class="detail-row">' +
                '<span class="detail-label">Method:</span>' +
                '<span class="detail-value">' + log.method + '</span>' +
              '</div>' +
              '<div class="detail-row">' +
                '<span class="detail-label">Endpoint:</span>' +
                '<span class="detail-value">' + log.endpoint + '</span>' +
              '</div>' +
              '<div class="detail-row">' +
                '<span class="detail-label">Status:</span>' +
                '<span class="detail-value ' + (log.status.includes('200') ? 'success' : 'error') + '">' + log.status + '</span>' +
              '</div>' +
              '<div class="detail-row">' +
                '<span class="detail-label">Response Time:</span>' +
                '<span class="detail-value">' + (log.responseTime || 'N/A') + 'ms</span>' +
              '</div>' +
              optionalFields +
            '</div>' +
            '<div class="modal-actions">' +
              '<button onclick="copyLogDetails(\'' + logJson.replace(/'/g, '\\\'') + '\')">üìã Copy Details</button>' +
              '<button onclick="closeLogDetailsModal()">‚ùå Close</button>' +
            '</div>' +
          '</div>';

        const modal = document.createElement('div');
        modal.innerHTML = detailsHtml;
        modal.className = 'log-details-overlay';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.7);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10000;
        `;

        document.body.appendChild(modal);
      } catch (error) {
        console.error('Error showing log details:', error);
      }
    }

    // Global functions for onclick handlers
    function copyLogDetails(logJson: string) {
      navigator.clipboard.writeText(logJson).then(() => {
        alert('‚úÖ Log details copied to clipboard!');
      });
    }

    function closeLogDetailsModal() {
      const modal = document.querySelector('.log-details-overlay');
      if (modal) {
        document.body.removeChild(modal);
      }
    }

    function updateFilterCriteria(criteria: string, value: string) {
      currentLogFilters[criteria as keyof typeof currentLogFilters] = value;
      applyLogFilters();
    }

    function clearAllFilters() {
      currentLogFilters = {
        method: '',
        status: '',
        endpoint: '',
        searchTerm: '',
        timeRange: 24,
        limit: 50
      };

      // Reset form inputs
      const filterInputs = document.querySelectorAll('.log-filter-input');
      filterInputs.forEach(input => {
        if (input instanceof HTMLInputElement || input instanceof HTMLSelectElement) {
          input.value = '';
        }
      });

      applyLogFilters();
    }

    // Auto-initialize log streaming when page loads
    document.addEventListener('DOMContentLoaded', function() {
      // Start log streaming by default for monitoring pages
      const currentPath = window.location.pathname;
      if (currentPath.includes('api') || currentPath.includes('monitoring')) {
        startLogStreaming();
      }
    });

    function updateTrafficPredictions() {
      const predictionElement = document.querySelector('.prediction-metric .metric-value');
      if (predictionElement) {
        const currentValue = Math.floor(Math.random() * 10) + 15;
        predictionElement.textContent = '+' + currentValue + '%';
      }

      const confidenceBar = document.querySelector('.confidence-fill');
      if (confidenceBar) {
        const confidence = Math.floor(Math.random() * 20) + 75;
        confidenceBar.style.width = confidence + '%';
        const confidenceText = document.querySelector('.confidence-text');
        if (confidenceText) {
          confidenceText.textContent = confidence + '% Confidence';
        }
      }
    }

    function setupPerformanceForecasting() {
      setInterval(() => {
        const alerts = ['Peak load expected at 2-4 PM EST', 'Normal traffic patterns', 'High throughput detected'];
        const randomAlert = alerts[Math.floor(Math.random() * alerts.length)];
        updatePerformanceAlert(randomAlert);
      }, 300000);
    }

    function updatePerformanceAlert(alert) {
      const alertElement = document.querySelector('.prediction-alert');
      if (alertElement) {
        alertElement.querySelector('.prediction-alert span:last-child').textContent = alert;
      }
    }

    function initializeCostAnalysis() {
      updateCostBreakdown();
      initializeCostSimulator();
      setInterval(updateCostBreakdown, 600000);
    }

    function updateCostBreakdown() {
      const costItems = document.querySelectorAll('.cost-item');
      costItems.forEach((item, index) => {
        const costElement = item.querySelector('.service-cost');
        if (costElement) {
          const baseCosts = ['$8,234', '$2,145', '$1,678', '$790'];
          const variations = Math.floor(Math.random() * 200) - 100;
          const baseCost = parseInt(baseCosts[index].replace(/[$,]/g, ''));
          const newCost = Math.max(0, baseCost + variations);
          costElement.textContent = '$' + newCost.toLocaleString();

          const percentage = Math.min(100, Math.max(0, (newCost / 12847) * 100));
          const costBar = item.querySelector('.cost-fill');
          if (costBar) {
            costBar.style.width = percentage + '%';
          }

          const percentageElement = item.querySelector('.service-percentage');
          if (percentageElement) {
            percentageElement.textContent = Math.round(percentage) + '%';
          }
        }
      });
    }

    function initializeErrorAnalysis() {
      updateErrorHeatmap();
      analyzeErrorPatterns();
      setInterval(updateErrorHeatmap, 120000);
    }

    function updateErrorHeatmap() {
      const cells = document.querySelectorAll('.heatmap-cell');
      cells.forEach((cell, index) => {
        const hour = index;
        let intensity = 'low';

        if (hour >= 2 && hour <= 4) {
          intensity = 'high';
        } else if (hour >= 14 && hour <= 16) {
          intensity = 'medium';
        }

        cell.classList.remove('high', 'medium', 'low');
        cell.classList.add(intensity);
      });
    }

    function initializeIntegrationHealth() {
      checkIntegrationStatus();
      monitorIntegrationMetrics();
      setInterval(checkIntegrationStatus, 60000);
    }

    function checkIntegrationStatus() {
      const integrations = document.querySelectorAll('.integration-card');
      integrations.forEach((integration, index) => {
        if (Math.random() < 0.9) {
          integration.classList.remove('warning', 'error');
          integration.classList.add('healthy');
          updateIntegrationMetrics(integration, 'healthy');
        } else if (Math.random() < 0.5) {
          integration.classList.remove('healthy', 'error');
          integration.classList.add('warning');
          updateIntegrationMetrics(integration, 'warning');
        } else {
          integration.classList.remove('healthy', 'warning');
          integration.classList.add('error');
          updateIntegrationMetrics(integration, 'error');
        }
      });
    }

    function updateIntegrationMetrics(integration: Element, status: string) {
      const metrics = integration.querySelectorAll('.metric');
      if (metrics.length >= 3) {
        const responseTime = status === 'error' ? 'Timeout' :
                           status === 'warning' ? (Math.floor(Math.random() * 1000) + 1000) + 'ms' :
                           (Math.floor(Math.random() * 100) + 50) + 'ms';

        const uptime = status === 'error' ? '87.3%' :
                      status === 'warning' ? (Math.floor(Math.random() * 10) + 90) + '%' :
                      '99.' + (Math.floor(Math.random() * 9) + 1) + '%';

        const success = status === 'error' ? '0%' :
                       status === 'warning' ? (Math.floor(Math.random() * 20) + 80) + '%' :
                       (Math.floor(Math.random() * 5) + 95) + '%';

        metrics[0].textContent = 'Response: ' + responseTime;
        metrics[1].textContent = 'Uptime: ' + uptime;
        metrics[2].textContent = 'Success: ' + success;
      }
    }

    // Action Functions
    function implementCaching() {
      showNotification('üîß Starting Redis caching implementation...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Response caching implemented successfully!', 'success');
      }, 3000);
    }

    function enableCompression() {
      showNotification('üì¶ Enabling gzip compression...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Response compression enabled!', 'success');
      }, 2000);
    }

    function optimizeQueries() {
      showNotification('üîÑ Analyzing database queries...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Database optimization completed!', 'success');
      }, 5000);
    }

    function viewDetails(feature) {
      showNotification('üìä Opening detailed analysis for ' + feature + '...', 'info');
      setTimeout(() => {
        showNotification('üìà Detailed analysis loaded!', 'success');
      }, 1500);
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = 'notification ' + type;
      notification.innerHTML = \`
        <div class="notification-icon">\${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</div>
        <div class="notification-message">\${message}</div>
      \`;

      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }

    // Live Betting Functions
    function refreshBettingData() {
      showNotification('üîÑ Refreshing live betting data...', 'info');
      setTimeout(() => {
        updateBettingMetrics();
        showNotification('‚úÖ Betting data refreshed successfully!', 'success');
      }, 2000);
    }

    function changeBettingView() {
      const select = document.getElementById('bettingTimeRange') as HTMLSelectElement;
      const view = select.value;
      showNotification(\`üìä Switching to \${view} view...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìà \${view} betting data loaded!\`, 'success');
      }, 1500);
    }

    function updateBettingMetrics() {
      // Simulate real-time updates
      const activeGamesEl = document.getElementById('activeGames');
      const totalBetsEl = document.getElementById('totalBets');
      const livePositionsEl = document.getElementById('livePositions');
      const alertsCountEl = document.getElementById('alertsCount');

      if (activeGamesEl) {
        const current = parseInt(activeGamesEl.textContent || '0');
        const newValue = Math.max(0, current + Math.floor(Math.random() * 4) - 2);
        activeGamesEl.textContent = newValue.toString();
      }

      if (totalBetsEl) {
        const current = totalBetsEl.textContent || '$0';
        const currentNum = parseFloat(current.replace(/[$,]/g, ''));
        const newValue = Math.max(0, currentNum + Math.floor(Math.random() * 10000) - 5000);
        totalBetsEl.textContent = '$' + newValue.toLocaleString();
      }

      if (livePositionsEl) {
        const current = parseInt(livePositionsEl.textContent || '0');
        const newValue = Math.max(0, current + Math.floor(Math.random() * 100) - 50);
        livePositionsEl.textContent = newValue.toString();
      }

      if (alertsCountEl) {
        const current = parseInt(alertsCountEl.textContent || '0');
        const newValue = Math.max(0, current + Math.floor(Math.random() * 4) - 2);
        alertsCountEl.textContent = newValue.toString();
      }
    }

    // Game Management Functions
    function viewGameDetails(gameId) {
      showNotification(\`üìä Loading details for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìà Game details for \${gameId} loaded!\`, 'success');
      }, 1500);
    }

    function managePositions(gameId) {
      showNotification(\`üìä Opening position manager for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üéØ Position manager for \${gameId} ready!\`, 'success');
      }, 1000);
    }

    function setOdds(gameId) {
      showNotification(\`üéØ Opening odds setter for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`‚öôÔ∏è Odds configuration for \${gameId} loaded!\`, 'success');
      }, 1200);
    }

    function viewMarketData(gameId) {
      showNotification(\`üìà Fetching market data for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìä Market data for \${gameId} displayed!\`, 'success');
      }, 1800);
    }

    function viewPayoutDetails(gameId) {
      showNotification(\`üí∞ Calculating payout details for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üíµ Payout details for \${gameId} ready!\`, 'success');
      }, 1000);
    }

    function analyzeGame(gameId) {
      showNotification(\`üìä Analyzing performance for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìà Analysis complete for \${gameId}!\`, 'success');
      }, 2500);
    }

    // Odds Management Functions
    function adjustOdds(gameId, type) {
      showNotification(\`üéØ Adjusting \${type} odds for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`‚úÖ Odds adjusted for \${gameId}!\`, 'success');
      }, 1500);
    }

    function viewMarketComparison(gameId) {
      showNotification(\`üìä Comparing market data for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìà Market comparison for \${gameId} ready!\`, 'success');
      }, 2000);
    }

    function followSharpMoney(gameId) {
      showNotification(\`üí∞ Following sharp money movement for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üéØ Sharp money tracking enabled for \${gameId}!\`, 'success');
      }, 1000);
    }

    function setAlerts(gameId) {
      showNotification(\`üö® Setting up alerts for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`‚ö†Ô∏è Alerts configured for \${gameId}!\`, 'success');
      }, 1200);
    }

    function optimizePosition(gameId) {
      showNotification(\`üéØ Optimizing position for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üíπ Position optimized for \${gameId}!\`, 'success');
      }, 3000);
    }

    function viewAnalytics(gameId) {
      showNotification(\`üìä Loading analytics for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìà Analytics dashboard for \${gameId} ready!\`, 'success');
      }, 1800);
    }

    // Position Management Functions
    function hedgePosition(gameId) {
      showNotification(\`üõ°Ô∏è Setting up hedge for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`‚úÖ Hedge position established for \${gameId}!\`, 'success');
      }, 2000);
    }

    function adjustLine(gameId) {
      showNotification(\`üìä Adjusting betting line for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üéØ Line adjusted for \${gameId}!\`, 'success');
      }, 1500);
    }

    function balancePosition(gameId) {
      showNotification(\`‚öñÔ∏è Balancing position for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`‚úÖ Position balanced for \${gameId}!\`, 'success');
      }, 2500);
    }

    function setLimits(gameId) {
      showNotification(\`üìã Setting betting limits for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üîí Limits configured for \${gameId}!\`, 'success');
      }, 1200);
    }

    // Market Data Functions
    function monitorLine(gameId) {
      showNotification(\`üëÅÔ∏è Monitoring line movement for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üìä Line monitoring active for \${gameId}!\`, 'success');
      }, 1000);
    }

    function exploitLine(gameId) {
      showNotification(\`üíé Identifying line exploitation opportunity for \${gameId}...\`, 'info');
      setTimeout(() => {
        showNotification(\`üéØ Exploitation strategy ready for \${gameId}!\`, 'success');
      }, 2000);
    }

    // Real-time Updates
    function startBettingUpdates() {
      // Update betting metrics every 30 seconds
      setInterval(() => {
        updateBettingMetrics();
      }, 30000);

      // Update odds comparisons every 60 seconds
      setInterval(() => {
        updateOddsComparisons();
      }, 60000);

      // Check for new alerts every 45 seconds
      setInterval(() => {
        checkForAlerts();
      }, 45000);
    }

    function updateOddsComparisons() {
      // Simulate real-time odds updates
      const rows = document.querySelectorAll('.table-row');
      rows.forEach((row, index) => {
        const cells = row.querySelectorAll('.table-cell');
        if (cells.length >= 4) {
          // Randomly update market averages and differences
          const ourLine = cells[1].textContent || '';
          if (Math.random() < 0.3) { // 30% chance of update
            const marketAvg = cells[2];
            const difference = cells[3];

            // Simulate market movement
            const movement = (Math.random() - 0.5) * 2; // -1 to +1
            const newDifference = parseFloat(difference.textContent?.replace(/[^\d.-]/g, '') || '0') + movement;

            difference.textContent = (newDifference > 0 ? '+' : '') + newDifference.toFixed(1);
            difference.className = 'table-cell ' +
              (Math.abs(newDifference) > 1 ? 'warning' : Math.abs(newDifference) > 0.5 ? 'neutral' : 'success');
          }
        }
      });
    }

    function checkForAlerts() {
      // Simulate alert generation
      if (Math.random() < 0.1) { // 10% chance of new alert
        const alerts = [
          'Line discrepancy detected on Chiefs vs 49ers',
          'Sharp money movement on Bills game',
          'Market inefficiency identified',
          'Position optimization opportunity'
        ];

        const randomAlert = alerts[Math.floor(Math.random() * alerts.length)];
        showNotification(\`üö® \${randomAlert}\`, 'warning');
      }
    }

    // Initialize betting updates when page loads
    startBettingUpdates();
  `;
}

function getApiSecurityStyles(): string {
  return `
    .api-security-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator.secure {
      color: #22c55e;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .security-metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .security-metric-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .security-metric-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .security-metric-card.neutral {
      border-left: 4px solid #6b7280;
    }

    .security-metric-card.up {
      border-left: 4px solid #22c55e;
    }

    .security-metric-card.down {
      border-left: 4px solid #ef4444;
    }

    .metric-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .metric-value {
      font-size: 2.5rem;
      font-weight: 800;
      color: #40e0d0;
      margin-bottom: 0.5rem;
    }

    .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .metric-change {
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .metric-change.neutral {
      background: rgba(107, 114, 128, 0.2);
      color: #6b7280;
    }

    .metric-change.up {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .metric-change.down {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .policies-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .policy-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(251, 191, 36, 0.3);
      transition: all 0.3s ease;
    }

    .policy-card:hover {
      transform: translateY(-5px);
      border-color: #f59e0b;
      box-shadow: 0 8px 25px rgba(251, 191, 36, 0.2);
    }

    .policy-card.active {
      border-color: rgba(34, 197, 94, 0.3);
    }

    .policy-card.high-violations {
      border-color: rgba(239, 68, 68, 0.3);
    }

    .policy-card.low-violations {
      border-color: rgba(34, 197, 94, 0.3);
    }

    .policy-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .policy-header h3 {
      color: #e0e6ed;
      margin: 0;
    }

    .policy-status {
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .policy-description {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1.5rem;
    }

    .policy-stats {
      margin-bottom: 1.5rem;
    }

    .violation-count {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.5rem;
    }

    .violation-label {
      color: #a0a9b8;
      font-size: 0.8rem;
    }

    .violation-value {
      font-weight: 600;
    }

    .violation-value.high {
      color: #ef4444;
    }

    .violation-value.low {
      color: #22c55e;
    }

    .policy-actions {
      display: flex;
      gap: 0.5rem;
    }

    .security-events {
      margin-top: 2rem;
    }

    .events-filter {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      align-items: center;
    }

    .events-filter select {
      padding: 0.5rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 6px;
      background: rgba(255, 255, 255, 0.05);
      color: #e0e6ed;
      font-size: 0.9rem;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .filter-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .events-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .event-item {
      display: grid;
      grid-template-columns: 100px 1fr 2fr 100px auto;
      gap: 1rem;
      align-items: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border-left: 4px solid;
      transition: background 0.2s ease;
    }

    .event-item:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    .event-item.low {
      border-left-color: #22c55e;
    }

    .event-item.medium {
      border-left-color: #f59e0b;
    }

    .event-item.high {
      border-left-color: #ef4444;
    }

    .event-item.info {
      border-left-color: #3b82f6;
    }

    .event-severity {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .severity-indicator.low {
      color: #22c55e;
    }

    .severity-indicator.medium {
      color: #f59e0b;
    }

    .severity-indicator.high {
      color: #ef4444;
    }

    .severity-indicator.info {
      color: #3b82f6;
    }

    .event-content {
      flex: 1;
    }

    .event-message {
      color: #e0e6ed;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }

    .event-meta {
      display: flex;
      gap: 1rem;
      color: #a0a9b8;
      font-size: 0.8rem;
    }

    .event-ip {
      color: #40e0d0;
    }

    .event-time {
      color: #a0a9b8;
    }

    .event-type {
      color: #ffd700;
    }

    .event-action-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .event-action-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .auth-management {
      margin-top: 2rem;
    }

    .auth-methods {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
    }

    .auth-method-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(168, 85, 247, 0.3);
      transition: all 0.3s ease;
    }

    .auth-method-card:hover {
      transform: translateY(-5px);
      border-color: #a855f7;
      box-shadow: 0 8px 25px rgba(168, 85, 247, 0.2);
    }

    .method-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .method-icon {
      font-size: 2rem;
    }

    .method-header h3 {
      color: #e0e6ed;
      margin: 0;
    }

    .method-stats {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    .stat {
      font-size: 0.9rem;
      color: #a0a9b8;
    }

    .method-actions {
      display: flex;
      gap: 0.5rem;
    }

    .compliance-dashboard {
      margin-top: 2rem;
    }

    .compliance-metrics {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
    }

    .compliance-card {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .compliance-icon {
      font-size: 2rem;
    }

    .compliance-info h3 {
      color: #e0e6ed;
      margin-bottom: 0.25rem;
    }

    .compliance-info p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .compliance-status {
      font-size: 0.8rem;
      font-weight: 600;
      color: #22c55e;
    }

    .security-controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .control-group {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .control-group h3 {
      color: #e0e6ed;
      margin-bottom: 1.5rem;
    }

    .control-buttons {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .control-btn {
      padding: 0.75rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }

    .control-btn:not(.secondary) {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .control-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .control-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .api-security-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .auth-methods {
        grid-template-columns: 1fr;
      }

      .compliance-metrics {
        grid-template-columns: 1fr;
      }

      .security-controls {
        grid-template-columns: 1fr;
      }

      .event-item {
        grid-template-columns: 1fr;
        gap: 0.5rem;
        text-align: center;
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }
    }
  `;
}

function getApiSecurityScripts(): string {
  return `
    // API Security - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiSecurity();
    });

    function initializeApiSecurity() {
      startSecurityUpdates();
      setupSecurityListeners();
    }

    function startSecurityUpdates() {
      setInterval(() => {
        updateSecurityTimestamp();
        updateSecurityMetrics();
      }, 1000);
    }

    function updateSecurityTimestamp() {
      const element = document.getElementById('securityLastUpdate');
      if (element) {
        element.textContent = new Date().toLocaleTimeString();
      }
    }

    function updateSecurityMetrics() {
      // Simulate security metric updates
      const metricCards = document.querySelectorAll('.security-metric-card');
      metricCards.forEach(card => {
        if (Math.random() < 0.05) {
          card.style.animation = 'pulse 0.5s ease-in-out';
          setTimeout(() => {
            card.style.animation = '';
          }, 500);
        }
      });
    }

    function setupSecurityListeners() {
      // Event filter
      const eventFilter = document.getElementById('eventFilter');
      if (eventFilter) {
        eventFilter.addEventListener('change', function() {
          filterSecurityEvents(this.value);
        });
      }

      // Control buttons
      document.querySelectorAll('.control-btn, .action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const action = this.textContent;
          handleSecurityAction(action);
        });
      });
    }

    function filterSecurityEvents(filterValue) {
      const eventItems = document.querySelectorAll('.event-item');
      eventItems.forEach(item => {
        const severity = item.classList.contains('low') ? 'low' :
                        item.classList.contains('medium') ? 'medium' :
                        item.classList.contains('high') ? 'high' : 'info';

        let show = true;
        switch(filterValue) {
          case 'High Severity':
            show = severity === 'high';
            break;
          case 'Medium Severity':
            show = severity === 'medium';
            break;
          case 'Low Severity':
            show = severity === 'low';
            break;
          case 'Authentication':
            show = item.querySelector('.event-type').textContent.includes('AUTH');
            break;
          case 'Rate Limiting':
            show = item.querySelector('.event-type').textContent.includes('RATE');
            break;
          default:
            show = true;
        }

        item.style.display = show ? 'grid' : 'none';
      });
    }

    function handleSecurityAction(action) {
      switch(action) {
        case 'Export Events':
          alert('üì§ Security Events Export\\\\n\\\\nüìã Export Configuration:\\\\n\\\\nüìÖ Date Range:\\\\n‚Ä¢ Last 24 hours\\\\n‚Ä¢ Last 7 days\\\\n‚Ä¢ Custom range\\\\n\\\\nüìä Event Types:\\\\n‚Ä¢ Authentication events\\\\n‚Ä¢ Security violations\\\\n‚Ä¢ Policy breaches\\\\n‚Ä¢ System alerts\\\\n\\\\nüìÅ Export Formats:\\\\n‚Ä¢ JSON (Structured)\\\\n‚Ä¢ CSV (Spreadsheet)\\\\n‚Ä¢ PDF (Report)\\\\n\\\\nüîê Security Features:\\\\n‚Ä¢ Encrypted export\\\\n‚Ä¢ Audit trail\\\\n‚Ä¢ Access logging\\\\n\\\\n‚úÖ Security events exported successfully');
          break;
        case 'Investigate':
          alert('üîç Security Investigation\\\\n\\\\nüî¨ Investigation Tools:\\\\n\\\\nüìä Event Analysis:\\\\n‚Ä¢ IP geolocation\\\\n‚Ä¢ User agent parsing\\\\n‚Ä¢ Request pattern analysis\\\\n‚Ä¢ Threat intelligence\\\\n\\\\nüïµÔ∏è Automated Analysis:\\\\n‚Ä¢ Anomaly detection\\\\n‚Ä¢ Pattern recognition\\\\n‚Ä¢ Risk scoring\\\\n‚Ä¢ Correlation analysis\\\\n\\\\nüìã Investigation Report:\\\\n‚Ä¢ Event timeline\\\\n‚Ä¢ Related events\\\\n‚Ä¢ Risk assessment\\\\n‚Ä¢ Recommended actions\\\\n\\\\nüîí Security Actions:\\\\n‚Ä¢ Block IP address\\\\n‚Ä¢ Revoke API key\\\\n‚Ä¢ Update policies\\\\n‚Ä¢ Send alerts\\\\n\\\\n‚úÖ Investigation completed');
          break;
        case 'Manage Keys':
          alert('üîë API Key Management\\\\n\\\\nüóùÔ∏è Key Inventory:\\\\n\\\\nüìä Current Keys:\\\\n‚Ä¢ Production: 247 keys\\\\n‚Ä¢ Development: 45 keys\\\\n‚Ä¢ Testing: 13 keys\\\\n‚Ä¢ Legacy: 0 keys\\\\n\\\\nüîß Key Operations:\\\\n‚Ä¢ Generate new key\\\\n‚Ä¢ Rotate existing key\\\\n‚Ä¢ Revoke compromised key\\\\n‚Ä¢ Set rate limits\\\\n‚Ä¢ Configure permissions\\\\n\\\\nüìà Key Analytics:\\\\n‚Ä¢ Most active: prod_key_001\\\\n‚Ä¢ Highest usage: 15.2K calls/day\\\\n‚Ä¢ Average usage: 4.7K calls/day\\\\n‚Ä¢ Failed auth: 12 attempts\\\\n\\\\nüîê Security Settings:\\\\n‚Ä¢ Expiration: 90 days\\\\n‚Ä¢ Rotation: Automatic\\\\n‚Ä¢ Multi-factor: Required\\\\n\\\\n‚úÖ API key management updated');
          break;
        case 'Rotate Keys':
          alert('üîÑ API Key Rotation\\\\n\\\\nüîë Rotation Process:\\\\n\\\\nüìã Key Selection:\\\\n‚Ä¢ Production keys: 247\\\\n‚Ä¢ Development keys: 45\\\\n‚Ä¢ Testing keys: 13\\\\n\\\\n‚è∞ Rotation Schedule:\\\\n‚Ä¢ Immediate rotation\\\\n‚Ä¢ Gradual rollout\\\\n‚Ä¢ Scheduled rotation\\\\n\\\\nüìß Notification Process:\\\\n‚Ä¢ Email alerts\\\\n‚Ä¢ Slack notifications\\\\n‚Ä¢ API announcements\\\\n\\\\nüîÑ Rotation Steps:\\\\n1. Generate new keys\\\\n2. Update applications\\\\n3. Test new keys\\\\n4. Deactivate old keys\\\\n5. Monitor usage\\\\n\\\\n‚ö†Ô∏è Important Notes:\\\\n‚Ä¢ Zero downtime process\\\\n‚Ä¢ Rollback capability\\\\n‚Ä¢ Audit trail maintained\\\\n\\\\n‚úÖ Key rotation initiated');
          break;
        case 'Configure JWT':
          alert('üé´ JWT Configuration\\\\n\\\\nüîê JWT Settings:\\\\n\\\\nüìã Token Configuration:\\\\n‚Ä¢ Algorithm: RS256\\\\n‚Ä¢ Expiration: 2 hours\\\\n‚Ä¢ Issuer: api.company.com\\\\n‚Ä¢ Audience: client_apps\\\\n\\\\nüîë Key Management:\\\\n‚Ä¢ Private key rotation\\\\n‚Ä¢ Public key distribution\\\\n‚Ä¢ Key backup\\\\n‚Ä¢ Emergency key\\\\n\\\\nüõ°Ô∏è Security Features:\\\\n‚Ä¢ Token validation\\\\n‚Ä¢ Revocation checking\\\\n‚Ä¢ Replay attack prevention\\\\n‚Ä¢ Brute force protection\\\\n\\\\nüìä Usage Analytics:\\\\n‚Ä¢ Active tokens: 1,247\\\\n‚Ä¢ Tokens issued today: 3,456\\\\n‚Ä¢ Failed validations: 12\\\\n‚Ä¢ Average lifespan: 1.8 hours\\\\n\\\\n‚úÖ JWT configuration updated');
          break;
        case 'Token Logs':
          alert('üìã JWT Token Logs\\\\n\\\\nüìÑ Token Activity:\\\\n\\\\nüîç Log Analysis:\\\\n‚Ä¢ Token issuance\\\\n‚Ä¢ Token validation\\\\n‚Ä¢ Token expiration\\\\n‚Ä¢ Failed attempts\\\\n\\\\nüìä Token Metrics:\\\\n‚Ä¢ Total tokens: 15,234\\\\n‚Ä¢ Active tokens: 1,247\\\\n‚Ä¢ Expired tokens: 12,456\\\\n‚Ä¢ Failed validations: 89\\\\n\\\\nüîí Security Events:\\\\n‚Ä¢ Suspicious patterns\\\\n‚Ä¢ Failed authentications\\\\n‚Ä¢ Token abuse attempts\\\\n\\\\nüìà Usage Patterns:\\\\n‚Ä¢ Peak hours: 9 AM - 11 AM\\\\n‚Ä¢ Most active client\\\\n‚Ä¢ Geographic distribution\\\\n\\\\n‚úÖ Token logs accessible');
          break;
        case 'Manage Clients':
          alert('üë• OAuth Client Management\\\\n\\\\nüåê OAuth Clients:\\\\n\\\\nüìã Client Inventory:\\\\n‚Ä¢ Active clients: 89\\\\n‚Ä¢ Pending approval: 12\\\\n‚Ä¢ Suspended: 3\\\\n‚Ä¢ Total grants: 15,234\\\\n\\\\nüîß Client Operations:\\\\n‚Ä¢ Register new client\\\\n‚Ä¢ Update client settings\\\\n‚Ä¢ Revoke client access\\\\n‚Ä¢ Rotate client secrets\\\\n\\\\nüìä Client Analytics:\\\\n‚Ä¢ Most active client\\\\n‚Ä¢ Highest grant volume\\\\n‚Ä¢ Geographic distribution\\\\n‚Ä¢ Usage patterns\\\\n\\\\nüîê Security Settings:\\\\n‚Ä¢ Client authentication\\\\n‚Ä¢ Grant types\\\\n‚Ä¢ Scope management\\\\n‚Ä¢ Token policies\\\\n\\\\n‚úÖ OAuth clients managed successfully');
          break;
        case 'Configure OAuth':
          alert('üåê OAuth Configuration\\\\n\\\\n‚öôÔ∏è OAuth Settings:\\\\n\\\\nüîß Grant Types:\\\\n‚Ä¢ Authorization Code\\\\n‚Ä¢ Client Credentials\\\\n‚Ä¢ Refresh Token\\\\n‚Ä¢ Implicit (deprecated)\\\\n\\\\nüõ°Ô∏è Security Policies:\\\\n‚Ä¢ PKCE requirement\\\\n‚Ä¢ State parameter\\\\n‚Ä¢ Redirect URI validation\\\\n‚Ä¢ Token expiration\\\\n\\\\nüìä Scope Management:\\\\n‚Ä¢ Read access\\\\n‚Ä¢ Write access\\\\n‚Ä¢ Admin access\\\\n‚Ä¢ Custom scopes\\\\n\\\\nüîÑ Token Management:\\\\n‚Ä¢ Access token: 1 hour\\\\n‚Ä¢ Refresh token: 30 days\\\\n‚Ä¢ ID token: 1 hour\\\\n\\\\nüìã Integration:\\\\n‚Ä¢ Discovery endpoint\\\\n‚Ä¢ JWKS endpoint\\\\n‚Ä¢ User info endpoint\\\\n\\\\n‚úÖ OAuth configuration updated');
          break;
        case 'WAF Settings':
          alert('üõ°Ô∏è Web Application Firewall\\\\n\\\\nüî• WAF Configuration:\\\\n\\\\nüìã Rule Sets:\\\\n‚Ä¢ OWASP Top 10\\\\n‚Ä¢ Custom rules\\\\n‚Ä¢ Rate limiting\\\\n‚Ä¢ Geo-blocking\\\\n\\\\n‚öôÔ∏è Protection Levels:\\\\n‚Ä¢ Low: Basic protection\\\\n‚Ä¢ Medium: Standard protection\\\\n‚Ä¢ High: Strict protection\\\\n‚Ä¢ Custom: Tailored rules\\\\n\\\\nüìä WAF Analytics:\\\\n‚Ä¢ Blocked requests: 2,847\\\\n‚Ä¢ False positives: 12\\\\n‚Ä¢ Response time impact: +5ms\\\\n‚Ä¢ Coverage: 99.9%\\\\n\\\\nüîß Rule Management:\\\\n‚Ä¢ Add custom rules\\\\n‚Ä¢ Update rule sets\\\\n‚Ä¢ Test rule changes\\\\n‚Ä¢ Rollback capability\\\\n\\\\n‚úÖ WAF settings configured');
          break;
        case 'DDoS Protection':
          alert('üõ°Ô∏è DDoS Protection System\\\\n\\\\n‚ö° DDoS Mitigation:\\\\n\\\\nüîç Detection Methods:\\\\n‚Ä¢ Traffic pattern analysis\\\\n‚Ä¢ Rate limiting\\\\n‚Ä¢ Behavioral analysis\\\\n‚Ä¢ Geographic filtering\\\\n\\\\nüõ°Ô∏è Mitigation Techniques:\\\\n‚Ä¢ Rate limiting\\\\n‚Ä¢ IP blocking\\\\n‚Ä¢ Traffic scrubbing\\\\n‚Ä¢ CDN integration\\\\n\\\\nüìä Attack Statistics:\\\\n‚Ä¢ Attacks mitigated: 23\\\\n‚Ä¢ Peak attack: 500K RPS\\\\n‚Ä¢ Average duration: 45 min\\\\n‚Ä¢ Success rate: 99.9%\\\\n\\\\n‚öôÔ∏è Configuration:\\\\n‚Ä¢ Threshold settings\\\\n‚Ä¢ Response actions\\\\n‚Ä¢ Alert triggers\\\\n‚Ä¢ Recovery procedures\\\\n\\\\n‚úÖ DDoS protection active');
          break;
        case 'IP Blacklist':
          alert('üìã IP Blacklist Management\\\\n\\\\nüö´ Blocked IPs:\\\\n\\\\nüìä Blacklist Stats:\\\\n‚Ä¢ Total blocked: 1,247\\\\n‚Ä¢ Recently added: 23\\\\n‚Ä¢ Auto-blocked: 1,224\\\\n‚Ä¢ Manual blocks: 23\\\\n\\\\nüîß Block Management:\\\\n‚Ä¢ Add IP/range\\\\n‚Ä¢ Remove from list\\\\n‚Ä¢ Set expiration\\\\n‚Ä¢ View block history\\\\n\\\\nüìã Block Reasons:\\\\n‚Ä¢ Rate limit violations\\\\n‚Ä¢ Suspicious patterns\\\\n‚Ä¢ Failed authentication\\\\n‚Ä¢ Geographic restrictions\\\\n\\\\n‚è∞ Expiration Settings:\\\\n‚Ä¢ Permanent blocks\\\\n‚Ä¢ Temporary blocks\\\\n‚Ä¢ Auto-expiration\\\\n‚Ä¢ Manual review\\\\n\\\\n‚úÖ IP blacklist updated');
          break;
        case 'Role Management':
          alert('üë• Role-Based Access Control\\\\n\\\\nüîê RBAC Configuration:\\\\n\\\\nüë§ User Roles:\\\\n‚Ä¢ Admin: Full access\\\\n‚Ä¢ Developer: API access\\\\n‚Ä¢ Analyst: Read-only\\\\n‚Ä¢ Guest: Limited access\\\\n\\\\nüìã Permissions:\\\\n‚Ä¢ Create APIs\\\\n‚Ä¢ Manage keys\\\\n‚Ä¢ View analytics\\\\n‚Ä¢ Configure security\\\\n\\\\nüë• User Management:\\\\n‚Ä¢ Add/remove users\\\\n‚Ä¢ Assign roles\\\\n‚Ä¢ Update permissions\\\\n‚Ä¢ Audit access\\\\n\\\\nüîí Access Policies:\\\\n‚Ä¢ Least privilege\\\\n‚Ä¢ Multi-factor auth\\\\n‚Ä¢ Session management\\\\n‚Ä¢ Audit logging\\\\n\\\\n‚úÖ RBAC configuration updated');
          break;
        case 'MFA Settings':
          alert('üîê Multi-Factor Authentication\\\\n\\\\nüì± MFA Configuration:\\\\n\\\\nüîß Authentication Methods:\\\\n‚Ä¢ SMS verification\\\\n‚Ä¢ Authenticator apps\\\\n‚Ä¢ Hardware tokens\\\\n‚Ä¢ Biometric\\\\n\\\\nüë§ User Enrollment:\\\\n‚Ä¢ Required for admins\\\\n‚Ä¢ Optional for developers\\\\n‚Ä¢ Disabled for APIs\\\\n\\\\nüìä MFA Statistics:\\\\n‚Ä¢ Enrolled users: 89%\\\\n‚Ä¢ Failed attempts: 23\\\\n‚Ä¢ Successful auth: 15,234\\\\n\\\\n‚öôÔ∏è MFA Policies:\\\\n‚Ä¢ Grace period\\\\n‚Ä¢ Backup codes\\\\n‚Ä¢ Recovery options\\\\n‚Ä¢ Lockout policies\\\\n\\\\n‚úÖ MFA settings configured');
          break;
        case 'SSO Configuration':
          alert('üîó Single Sign-On Configuration\\\\n\\\\nüåê SSO Integration:\\\\n\\\\nüîß Identity Providers:\\\\n‚Ä¢ Google Workspace\\\\n‚Ä¢ Microsoft Azure AD\\\\n‚Ä¢ Okta\\\\n‚Ä¢ Custom SAML\\\\n\\\\nüìã SSO Settings:\\\\n‚Ä¢ SAML 2.0 support\\\\n‚Ä¢ OpenID Connect\\\\n‚Ä¢ Just-in-Time provisioning\\\\n‚Ä¢ SCIM user sync\\\\n\\\\nüë• User Management:\\\\n‚Ä¢ Auto-provisioning\\\\n‚Ä¢ Group mapping\\\\n‚Ä¢ Role assignment\\\\n‚Ä¢ Access control\\\\n\\\\nüîí Security Features:\\\\n‚Ä¢ Encrypted assertions\\\\n‚Ä¢ Signature validation\\\\n‚Ä¢ Replay attack prevention\\\\n‚Ä¢ Session management\\\\n\\\\n‚úÖ SSO configuration completed');
          break;
        case 'Security Auditing':
          alert('üîç Security Auditing System\\\\n\\\\nüìä Audit Configuration:\\\\n\\\\nüìã Audit Events:\\\\n‚Ä¢ Authentication attempts\\\\n‚Ä¢ API access\\\\n‚Ä¢ Configuration changes\\\\n‚Ä¢ Security events\\\\n\\\\nüóÑÔ∏è Audit Storage:\\\\n‚Ä¢ Retention: 7 years\\\\n‚Ä¢ Encryption: AES-256\\\\n‚Ä¢ Immutable logs\\\\n‚Ä¢ Backup verification\\\\n\\\\nüîç Audit Analysis:\\\\n‚Ä¢ Real-time monitoring\\\\n‚Ä¢ Pattern detection\\\\n‚Ä¢ Compliance reporting\\\\n‚Ä¢ Forensic analysis\\\\n\\\\nüìà Audit Metrics:\\\\n‚Ä¢ Events logged: 47.2K\\\\n‚Ä¢ Storage used: 2.3GB\\\\n‚Ä¢ Query performance: <1s\\\\n\\\\n‚úÖ Security auditing active');
          break;
        case 'Compliance Reports':
          alert('üìã Compliance Reporting\\\\n\\\\nüìä Compliance Dashboard:\\\\n\\\\nüîí Standards Covered:\\\\n‚Ä¢ GDPR compliance\\\\n‚Ä¢ SOC 2 Type II\\\\n‚Ä¢ PCI DSS\\\\n‚Ä¢ ISO 27001\\\\n\\\\nüìã Report Types:\\\\n‚Ä¢ Executive summary\\\\n‚Ä¢ Detailed findings\\\\n‚Ä¢ Remediation plans\\\\n‚Ä¢ Audit trails\\\\n\\\\n‚è∞ Report Schedule:\\\\n‚Ä¢ Monthly reports\\\\n‚Ä¢ Quarterly reviews\\\\n‚Ä¢ Annual audits\\\\n‚Ä¢ Ad-hoc requests\\\\n\\\\nüë• Distribution:\\\\n‚Ä¢ Compliance team\\\\n‚Ä¢ Executive leadership\\\\n‚Ä¢ External auditors\\\\n‚Ä¢ Regulatory bodies\\\\n\\\\n‚úÖ Compliance reports generated');
          break;
        case 'Intrusion Detection':
          alert('üîç Intrusion Detection System\\\\n\\\\nüõ°Ô∏è IDS Configuration:\\\\n\\\\nüîç Detection Methods:\\\\n‚Ä¢ Signature-based\\\\n‚Ä¢ Anomaly-based\\\\n‚Ä¢ Heuristic analysis\\\\n‚Ä¢ Machine learning\\\\n\\\\nüìä Detection Rules:\\\\n‚Ä¢ SQL injection\\\\n‚Ä¢ XSS attacks\\\\n‚Ä¢ CSRF attempts\\\\n‚Ä¢ Brute force\\\\n\\\\nüö® Alert System:\\\\n‚Ä¢ Real-time alerts\\\\n‚Ä¢ Severity levels\\\\n‚Ä¢ Escalation policies\\\\n‚Ä¢ Automated response\\\\n\\\\nüìà IDS Statistics:\\\\n‚Ä¢ Threats detected: 89\\\\n‚Ä¢ False positives: 5\\\\n‚Ä¢ Response time: <1s\\\\n‚Ä¢ Coverage: 99.9%\\\\n\\\\n‚úÖ Intrusion detection active');
          break;
      }
    }

    // Global functions for button onclick handlers
    function editPolicy(policyName) {
      alert(\`üìù Edit Policy: \${policyName}\\\\n\\\\n‚öôÔ∏è Policy Configuration:\\\\n\\\\nüìã Current Settings:\\\\n‚Ä¢ Status: Active\\\\n‚Ä¢ Severity: Medium\\\\n‚Ä¢ Actions: Log, Alert\\\\n‚Ä¢ Threshold: 10 violations\\\\n\\\\nüîß Edit Options:\\\\n‚Ä¢ Change severity\\\\n‚Ä¢ Modify actions\\\\n‚Ä¢ Update threshold\\\\n‚Ä¢ Add conditions\\\\n\\\\nüìä Impact Assessment:\\\\n‚Ä¢ Affected endpoints: 12\\\\n‚Ä¢ Current violations: 23\\\\n‚Ä¢ Expected change: +5%\\\\n\\\\n‚úÖ Policy updated successfully\`);
    }

    function viewPolicyLogs(policyName) {
      alert(\`üìã Policy Logs: \${policyName}\\\\n\\\\nüìÑ Log Entries:\\\\n\\\\nRecent Violations:\\\\n‚Ä¢ 14:32:15 - Rate limit exceeded\\\\n‚Ä¢ 14:28:33 - Invalid JWT token\\\\n‚Ä¢ 14:25:18 - CORS violation\\\\n‚Ä¢ 14:22:45 - SQL injection attempt\\\\n\\\\nüìä Log Statistics:\\\\n‚Ä¢ Total violations: 156\\\\n‚Ä¢ This week: 23\\\\n‚Ä¢ Most common: Rate limiting\\\\n‚Ä¢ Peak hour: 2:00 PM\\\\n\\\\nüîç Log Analysis:\\\\n‚Ä¢ Pattern detection\\\\n‚Ä¢ Trend analysis\\\\n‚Ä¢ Risk assessment\\\\n‚Ä¢ Compliance reporting\\\\n\\\\n‚úÖ Policy logs accessible\`);
    }

    function investigateEvent(message) {
      alert(\`üîç Security Investigation: \${message}\\\\n\\\\nüî¨ Investigation Details:\\\\n\\\\nüìä Event Information:\\\\n‚Ä¢ Timestamp: 5 minutes ago\\\\n‚Ä¢ Source IP: 192.168.1.100\\\\n‚Ä¢ User Agent: API Client v2.1\\\\n‚Ä¢ Endpoint: /api/v2/auth\\\\n\\\\nüïµÔ∏è Automated Analysis:\\\\n‚Ä¢ Threat level: Low\\\\n‚Ä¢ Pattern match: Known\\\\n‚Ä¢ Risk score: 2/10\\\\n‚Ä¢ Recommendation: Monitor\\\\n\\\\nüìã Investigation Steps:\\\\n1. Review access logs\\\\n2. Check user history\\\\n3. Validate credentials\\\\n4. Update security rules\\\\n\\\\nüîí Security Actions:\\\\n‚Ä¢ Log incident\\\\n‚Ä¢ Monitor user\\\\n‚Ä¢ Update policies\\\\n‚Ä¢ Send alerts\\\\n\\\\n‚úÖ Investigation completed\`);
    }

    function exportSecurityEvents() {
      alert('üì§ Security Events Export\\\\n\\\\nüìã Export Configuration:\\\\n\\\\nüìÖ Time Range:\\\\n‚Ä¢ Last 24 hours\\\\n‚Ä¢ Last 7 days\\\\n‚Ä¢ Last 30 days\\\\n‚Ä¢ Custom range\\\\n\\\\nüìä Event Filters:\\\\n‚Ä¢ All events\\\\n‚Ä¢ High severity only\\\\n‚Ä¢ Authentication events\\\\n‚Ä¢ Security violations\\\\n\\\\nüìÅ Export Formats:\\\\n‚Ä¢ JSON (Structured)\\\\n‚Ä¢ CSV (Analysis)\\\\n‚Ä¢ PDF (Report)\\\\n‚Ä¢ XML (Integration)\\\\n\\\\nüîê Security Features:\\\\n‚Ä¢ Encrypted export\\\\n‚Ä¢ Audit trail\\\\n‚Ä¢ Access logging\\\\n‚Ä¢ Data masking\\\\n\\\\n‚úÖ Security events exported successfully');
    }
  `;
}

function generateApiDocumentationContent(employee: EmployeeData): string {
  const apiEndpoints = [
    {
      method: 'GET',
      path: '/api/v2/clients',
      description: 'Retrieve list of VIP clients with filtering and pagination',
      parameters: [
        { name: 'limit', type: 'integer', required: false, description: 'Number of results per page (max 100)' },
        { name: 'offset', type: 'integer', required: false, description: 'Pagination offset' },
        { name: 'status', type: 'string', required: false, description: 'Filter by client status (active, inactive)' }
      ],
      responses: {
        '200': 'Success - Returns paginated client list',
        '401': 'Unauthorized - Invalid API key',
        '429': 'Rate limit exceeded'
      }
    },
    {
      method: 'POST',
      path: '/api/v2/bets',
      description: 'Place a new bet with validation and risk assessment',
      parameters: [
        { name: 'client_id', type: 'string', required: true, description: 'VIP client identifier' },
        { name: 'amount', type: 'number', required: true, description: 'Bet amount in USD' },
        { name: 'odds', type: 'number', required: true, description: 'Betting odds (decimal format)' },
        { name: 'sport', type: 'string', required: true, description: 'Sport type (NFL, NBA, MLB, NHL)' }
      ],
      responses: {
        '201': 'Bet created successfully',
        '400': 'Invalid request parameters',
        '403': 'Insufficient client permissions'
      }
    },
    {
      method: 'GET',
      path: '/api/v2/analytics',
      description: 'Retrieve comprehensive analytics and business intelligence data',
      parameters: [
        { name: 'date_from', type: 'date', required: false, description: 'Start date for analytics period' },
        { name: 'date_to', type: 'date', required: false, description: 'End date for analytics period' },
        { name: 'metrics', type: 'array', required: false, description: 'Specific metrics to retrieve' }
      ],
      responses: {
        '200': 'Analytics data retrieved successfully',
        '500': 'Internal server error'
      }
    }
  ];

  const codeExamples = [
    {
      language: 'javascript',
      title: 'Fetch VIP Clients',
      code: `// Fetch VIP clients with pagination
const response = await fetch('/api/v2/clients?limit=50&status=active', {
  method: 'GET',
  headers: {
    'Authorization': 'Bearer your-jwt-token',
    'Content-Type': 'application/json'
  }
});

const clients = await response.json();
console.log('VIP Clients:', clients);`
    },
    {
      language: 'python',
      title: 'Place Bet',
      code: `# Place a new bet
import requests

bet_data = {
    'client_id': 'vip_123',
    'amount': 500.00,
    'odds': 2.5,
    'sport': 'NFL'
}

response = requests.post('/api/v2/bets', 
    json=bet_data,
    headers={'Authorization': 'Bearer your-jwt-token'}
)

print('Bet placed:', response.json())`
    },
    {
      language: 'curl',
      title: 'Get Analytics',
      code: `# Get analytics data
curl -X GET '/api/v2/analytics?date_from=2024-01-01&date_to=2024-01-31' \\
  -H 'Authorization: Bearer your-jwt-token' \\
  -H 'Content-Type: application/json'`
    }
  ];

  return `
    <div class="api-documentation-container">
      <style>
        ${getApiDocumentationStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üìö API Documentation Portal</h1>
          <p>Interactive API documentation with examples, testing tools, and developer resources</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              Documentation Live - API v2.0
            </div>
            <div class="last-update">Last updated: <span id="docsLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- API Overview -->
      <div class="api-section">
        <div class="section-header">
          <h2>üöÄ API Overview</h2>
          <p>Enterprise-grade REST API for sportsbook operations and VIP client management</p>
        </div>

        <div class="api-overview-cards">
          <div class="overview-card">
            <div class="card-icon">üåê</div>
            <h3>RESTful Design</h3>
            <p>Standard REST conventions with JSON responses</p>
          </div>
          <div class="overview-card">
            <div class="card-icon">üîê</div>
            <h3>JWT Authentication</h3>
            <p>Secure token-based authentication</p>
          </div>
          <div class="overview-card">
            <div class="card-icon">üìä</div>
            <h3>Rate Limiting</h3>
            <p>Intelligent rate limiting with tiered access</p>
          </div>
          <div class="overview-card">
            <div class="card-icon">üîÑ</div>
            <h3>Versioning</h3>
            <p>API versioning for backward compatibility</p>
          </div>
        </div>
      </div>

      <!-- Authentication -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîê Authentication</h2>
          <p>Secure API access using JWT tokens and API keys</p>
        </div>

        <div class="auth-tabs">
          <div class="auth-tab active" onclick="switchAuthTab('jwt')">JWT Token</div>
          <div class="auth-tab" onclick="switchAuthTab('apikey')">API Key</div>
        </div>

        <div id="jwt-auth" class="auth-content active">
          <h3>JWT Authentication</h3>
          <p>Obtain a JWT token and include it in your request headers:</p>
          <div class="code-block">
            <pre><code>// Request JWT token
POST /api/v2/auth/login
{
  "username": "your-username",
  "password": "your-password"
}

// Use token in requests
GET /api/v2/clients
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</code></pre>
          </div>
        </div>

        <div id="apikey-auth" class="auth-content">
          <h3>API Key Authentication</h3>
          <p>Use your API key in the request headers:</p>
          <div class="code-block">
            <pre><code>GET /api/v2/clients
X-API-Key: sk_your_api_key_here
Content-Type: application/json</code></pre>
          </div>
        </div>
      </div>

      <!-- API Endpoints -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîó API Endpoints</h2>
          <p>Detailed documentation for all available API endpoints</p>
        </div>

        <div class="endpoints-list">
          ${apiEndpoints.map(endpoint => `
            <div class="endpoint-card">
              <div class="endpoint-header">
                <span class="endpoint-method method-${endpoint.method.toLowerCase()}">${endpoint.method}</span>
                <span class="endpoint-path">${endpoint.path}</span>
              </div>
              <p class="endpoint-description">${endpoint.description}</p>

              <div class="endpoint-details">
                <div class="parameters-section">
                  <h4>Parameters</h4>
                  <div class="parameters-table">
                    ${endpoint.parameters.map(param => `
                      <div class="param-row">
                        <span class="param-name">${param.name}</span>
                        <span class="param-type">${param.type}</span>
                        <span class="param-required ${param.required ? 'required' : 'optional'}">${param.required ? 'Required' : 'Optional'}</span>
                        <span class="param-description">${param.description}</span>
                      </div>
                    `).join('')}
                  </div>
                </div>

                <div class="responses-section">
                  <h4>Responses</h4>
                  <div class="responses-list">
                    ${Object.entries(endpoint.responses).map(([code, description]) => `
                      <div class="response-item">
                        <span class="response-code code-${code.startsWith('2') ? 'success' : code.startsWith('4') ? 'client-error' : 'server-error'}">${code}</span>
                        <span class="response-description">${description}</span>
                      </div>
                    `).join('')}
                  </div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Code Examples -->
      <div class="api-section">
        <div class="section-header">
          <h2>üíª Code Examples</h2>
          <p>Ready-to-use code examples in multiple programming languages</p>
        </div>

        <div class="examples-grid">
          ${codeExamples.map(example => `
            <div class="example-card">
              <div class="example-header">
                <span class="example-language">${example.language.toUpperCase()}</span>
                <span class="example-title">${example.title}</span>
              </div>
              <div class="code-block">
                <pre><code>${example.code}</code></pre>
                <button class="copy-btn" onclick="copyToClipboard(this)">Copy</button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Interactive Testing -->
      <div class="api-section">
        <div class="section-header">
          <h2>üß™ API Testing Tools</h2>
          <p>Test API endpoints directly from the documentation</p>
        </div>

        <div class="testing-tools">
          <div class="test-form">
            <div class="form-row">
              <label for="test-method">Method:</label>
              <select id="test-method">
                <option>GET</option>
                <option>POST</option>
                <option>PUT</option>
                <option>DELETE</option>
              </select>
            </div>

            <div class="form-row">
              <label for="test-endpoint">Endpoint:</label>
              <input type="text" id="test-endpoint" value="/api/v2/clients" placeholder="Enter API endpoint">
            </div>

            <div class="form-row">
              <label for="test-body">Request Body (JSON):</label>
              <textarea id="test-body" rows="4" placeholder='{"key": "value"}'></textarea>
            </div>

            <div class="form-row">
              <label for="test-headers">Headers:</label>
              <textarea id="test-headers" rows="2" placeholder='{"Authorization": "Bearer token"}'></textarea>
            </div>

            <button class="test-btn" onclick="executeTest()">Execute Test</button>
          </div>

          <div class="test-results">
            <h3>Test Results</h3>
            <div id="test-output" class="test-output">
              <p>Click "Execute Test" to run an API request</p>
            </div>
          </div>
        </div>
      </div>

      <!-- SDK & Libraries -->
      <div class="api-section">
        <div class="section-header">
          <h2>üì¶ SDKs & Libraries</h2>
          <p>Official SDKs and community libraries for easy integration</p>
        </div>

        <div class="sdk-grid">
          <div class="sdk-card">
            <div class="sdk-icon">üêç</div>
            <h3>Python SDK</h3>
            <p>Official Python client library</p>
            <div class="sdk-code">pip install fantasy402-sdk</div>
            <a href="#" class="sdk-link">Documentation ‚Üí</a>
          </div>

          <div class="sdk-card">
            <div class="sdk-icon">‚öõÔ∏è</div>
            <h3>JavaScript SDK</h3>
            <p>Node.js and browser compatible</p>
            <div class="sdk-code">npm install @fantasy402/sdk</div>
            <a href="#" class="sdk-link">Documentation ‚Üí</a>
          </div>

          <div class="sdk-card">
            <div class="sdk-icon">‚òï</div>
            <h3>Java SDK</h3>
            <p>Enterprise Java integration</p>
            <div class="sdk-code">implementation 'com.fantasy402:sdk'</div>
            <a href="#" class="sdk-link">Documentation ‚Üí</a>
          </div>

          <div class="sdk-card">
            <div class="sdk-icon">üîß</div>
            <h3>Go SDK</h3>
            <p>High-performance Go client</p>
            <div class="sdk-code">go get github.com/fantasy402/go-sdk</div>
            <a href="#" class="sdk-link">Documentation ‚Üí</a>
          </div>
        </div>
      </div>

      <!-- API Status -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìä API Status & Changelog</h2>
          <p>Current API status and version history</p>
        </div>

        <div class="api-status">
          <div class="status-banner">
            <div class="status-icon">‚úÖ</div>
            <div class="status-info">
              <h3>All Systems Operational</h3>
              <p>API v2.0 is running normally with 99.9% uptime</p>
            </div>
          </div>

          <div class="changelog">
            <h3>Recent Changes</h3>
            <div class="changelog-item">
              <div class="version-tag">v2.1.0</div>
              <div class="change-details">
                <h4>New Analytics Endpoints</h4>
                <p>Added advanced filtering and real-time analytics capabilities</p>
                <small>Released: 2 days ago</small>
              </div>
            </div>

            <div class="changelog-item">
              <div class="version-tag">v2.0.5</div>
              <div class="change-details">
                <h4>Security Enhancements</h4>
                <p>Improved JWT validation and rate limiting algorithms</p>
                <small>Released: 1 week ago</small>
              </div>
            </div>

            <div class="changelog-item">
              <div class="version-tag">v2.0.0</div>
              <div class="change-details">
                <h4>Major Release</h4>
                <p>Complete API redesign with enhanced performance and security</p>
                <small>Released: 2 weeks ago</small>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced API Explorer -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîç API Explorer</h2>
          <p>Interactive API endpoint browser with real-time testing</p>
        </div>

        <div class="api-explorer">
          <div class="explorer-controls">
            <div class="search-controls">
              <input type="text" id="apiSearch" placeholder="Search endpoints..." class="search-input">
              <select id="methodFilter" class="method-select">
                <option value="">All Methods</option>
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
              </select>
            </div>
            <div class="explorer-stats">
              <span class="stat-item">üìä ${apiEndpoints.length} endpoints</span>
              <span class="stat-item">üîÑ Version 2.1.0</span>
              <span class="stat-item">‚ö° 99.9% uptime</span>
            </div>
          </div>

          <div class="explorer-results" id="explorerResults">
            ${apiEndpoints.map((endpoint, index) => `
              <div class="explorer-endpoint" data-method="${endpoint.method}" data-path="${endpoint.path}">
                <div class="endpoint-summary">
                  <span class="method-badge method-${endpoint.method.toLowerCase()}">${endpoint.method}</span>
                  <span class="endpoint-path-explorer">${endpoint.path}</span>
                  <button class="expand-btn" onclick="toggleEndpoint(${index})">‚ñº</button>
                </div>
                <div class="endpoint-details-explorer" id="endpoint-${index}" style="display: none;">
                  <p class="endpoint-description">${endpoint.description}</p>

                  ${endpoint.parameters.length > 0 ? `
                  <div class="parameters-section">
                    <h5>Parameters:</h5>
                    <div class="params-list">
                      ${endpoint.parameters.map(param => `
                        <div class="param-item">
                          <code class="param-name">${param.name}</code>
                          <span class="param-type">${param.type}</span>
                          <span class="param-required ${param.required ? 'required' : 'optional'}">${param.required ? 'Required' : 'Optional'}</span>
                        </div>
                      `).join('')}
                    </div>
                  </div>
                  ` : ''}

                  <div class="responses-section">
                    <h5>Responses:</h5>
                    <div class="responses-list">
                      ${Object.entries(endpoint.responses).map(([code, description]) => `
                        <div class="response-item">
                          <span class="response-code code-${code.startsWith('2') ? 'success' : code.startsWith('4') ? 'client-error' : 'server-error'}">${code}</span>
                          <span class="response-description">${description}</span>
                        </div>
                      `).join('')}
                    </div>
                  </div>

                  <div class="endpoint-actions">
                    <button class="test-endpoint-btn" onclick="testEndpoint('${endpoint.path}', '${endpoint.method}')">Test Endpoint</button>
                    <button class="copy-endpoint-btn" onclick="copyEndpoint('${endpoint.path}')">Copy URL</button>
                  </div>
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      </div>

      <!-- Webhooks Documentation -->
      <div class="api-section">
        <div class="section-header">
          <h2>ü™ù Webhooks & Real-time</h2>
          <p>Real-time event notifications and webhook integration</p>
        </div>

        <div class="webhooks-grid">
          <div class="webhook-card">
            <div class="webhook-icon">üîî</div>
            <h3>Event Notifications</h3>
            <p>Receive real-time notifications for bets, payments, and client activities</p>
            <div class="webhook-events">
              <span class="event-tag">bet.placed</span>
              <span class="event-tag">payment.received</span>
              <span class="event-tag">client.updated</span>
              <span class="event-tag">odds.changed</span>
            </div>
          </div>

          <div class="webhook-card">
            <div class="webhook-icon">üîí</div>
            <h3>Security</h3>
            <p>Webhook signatures and IP whitelisting for secure delivery</p>
            <div class="webhook-features">
              <span class="feature">HMAC signatures</span>
              <span class="feature">IP whitelisting</span>
              <span class="feature">Retry logic</span>
            </div>
          </div>

          <div class="webhook-card">
            <div class="webhook-icon">üìä</div>
            <h3>Analytics</h3>
            <p>Track webhook delivery success and failure rates</p>
            <div class="webhook-metrics">
              <div class="metric">99.8% delivery rate</div>
              <div class="metric">< 30s average delay</div>
            </div>
          </div>
        </div>
      </div>

      <!-- API Limits & Quotas -->
      <div class="api-section">
        <div class="section-header">
          <h2>‚ö° Rate Limits & Quotas</h2>
          <p>Understanding API limits and optimizing your integration</p>
        </div>

        <div class="rate-limits">
          <div class="tier-comparison">
            <div class="tier-card bronze">
              <div class="tier-header">
                <h3>ü•â Bronze</h3>
                <div class="tier-price">Free</div>
              </div>
              <div class="tier-limits">
                <div class="limit-item">100 requests/minute</div>
                <div class="limit-item">1,000 requests/day</div>
                <div class="limit-item">Basic support</div>
              </div>
            </div>

            <div class="tier-card silver">
              <div class="tier-header">
                <h3>ü•à Silver</h3>
                <div class="tier-price">$99/month</div>
              </div>
              <div class="tier-limits">
                <div class="limit-item">1,000 requests/minute</div>
                <div class="limit-item">50,000 requests/day</div>
                <div class="limit-item">Priority support</div>
              </div>
            </div>

            <div class="tier-card gold">
              <div class="tier-header">
                <h3>ü•á Gold</h3>
                <div class="tier-price">$299/month</div>
              </div>
              <div class="tier-limits">
                <div class="limit-item">10,000 requests/minute</div>
                <div class="limit-item">Unlimited requests</div>
                <div class="limit-item">24/7 dedicated support</div>
              </div>
            </div>
          </div>

          <div class="rate-limit-info">
            <h3>Rate Limit Headers</h3>
            <div class="headers-table">
              <div class="header-row">
                <code>X-RateLimit-Limit</code>
                <span>Maximum requests per time window</span>
              </div>
              <div class="header-row">
                <code>X-RateLimit-Remaining</code>
                <span>Remaining requests in current window</span>
              </div>
              <div class="header-row">
                <code>X-RateLimit-Reset</code>
                <span>Time when limit resets (Unix timestamp)</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Support & Community -->
      <div class="api-section">
        <div class="section-header">
          <h2>ü§ù Support & Community</h2>
          <p>Get help and connect with other developers</p>
        </div>

        <div class="support-resources">
          <div class="support-card">
            <div class="support-icon">üí¨</div>
            <h3>Developer Community</h3>
            <p>Join our developer community for discussions and support</p>
            <a href="https://community.fantasy402.com" class="support-link">Join Community ‚Üí</a>
          </div>

          <div class="support-card">
            <div class="support-icon">üìß</div>
            <h3>Email Support</h3>
            <p>Get direct assistance from our developer support team</p>
            <a href="mailto:dev-support@fantasy402.com" class="support-link">Email Support ‚Üí</a>
          </div>

          <div class="support-card">
            <div class="support-icon">üéØ</div>
            <h3>Status Page</h3>
            <p>Real-time API status and incident updates</p>
            <a href="https://status.fantasy402.com" class="support-link">View Status ‚Üí</a>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          API Overview
        </a>
        <a href="/api/developer" class="nav-btn primary">
          <span class="btn-icon">üë®‚Äçüíª</span>
          Developer Portal
        </a>
        <a href="/api/integrations" class="nav-btn accent">
          <span class="btn-icon">üîó</span>
          Integrations
        </a>
      </div>
    </div>

    <script>
      ${getApiDocumentationScripts()}
    </script>
  `;
}

function generateApiDeveloperContent(employee: EmployeeData): string {
  const developerResources = [
    {
      icon: 'üìñ',
      title: 'Getting Started Guide',
      description: 'Complete guide for integrating with our API',
      link: '/api/docs/getting-started',
      type: 'guide'
    },
    {
      icon: 'üéØ',
      title: 'Best Practices',
      description: 'Recommended patterns and optimization tips',
      link: '/api/docs/best-practices',
      type: 'guide'
    },
    {
      icon: 'üß™',
      title: 'Testing Environment',
      description: 'Sandbox environment for API testing',
      link: 'https://sandbox.fantasy402.com',
      type: 'tool'
    },
    {
      icon: 'üìä',
      title: 'API Analytics',
      description: 'Monitor your API usage and performance',
      link: '/api/analytics',
      type: 'tool'
    }
  ];

  const webhookExamples = [
    {
      event: 'bet.placed',
      description: 'Triggered when a new bet is successfully placed',
      payload: `{
  "event": "bet.placed",
  "data": {
    "bet_id": "bet_123456",
    "client_id": "vip_789",
    "amount": 500.00,
    "odds": 2.5,
    "sport": "NFL",
    "timestamp": "2024-01-29T14:30:00Z"
  }
}`
    },
    {
      event: 'payment.received',
      description: 'Triggered when a payment is successfully processed',
      payload: `{
  "event": "payment.received",
  "data": {
    "payment_id": "pay_987654",
    "client_id": "vip_789",
    "amount": 2500.00,
    "currency": "USD",
    "timestamp": "2024-01-29T14:45:00Z"
  }
}`
    },
    {
      event: 'client.updated',
      description: 'Triggered when client information is modified',
      payload: `{
  "event": "client.updated",
  "data": {
    "client_id": "vip_789",
    "changes": ["email", "phone"],
    "timestamp": "2024-01-29T15:00:00Z"
  }
}`
    }
  ];

  return `
    <div class="api-developer-container">
      <style>
        ${getApiDeveloperStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üë®‚Äçüíª Developer Portal</h1>
          <p>Complete developer resources, tools, and integration guides</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              Developer Resources Available
            </div>
            <div class="last-update">Last updated: <span id="devLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Developer Resources -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìö Developer Resources</h2>
          <p>Essential guides, tools, and documentation for API integration</p>
        </div>

        <div class="resources-grid">
          ${developerResources.map(resource => `
            <div class="resource-card ${resource.type}">
              <div class="resource-icon">${resource.icon}</div>
              <h3>${resource.title}</h3>
              <p>${resource.description}</p>
              <a href="${resource.link}" class="resource-link">${resource.type === 'guide' ? 'Read Guide' : 'Access Tool'} ‚Üí</a>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- API Keys Management -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîë API Keys</h2>
          <p>Manage your API keys and authentication credentials</p>
        </div>

        <div class="keys-management">
          <div class="keys-summary">
            <div class="keys-stat">
              <div class="stat-value">3</div>
              <div class="stat-label">Active Keys</div>
            </div>
            <div class="keys-stat">
              <div class="stat-value">15.2K</div>
              <div class="stat-label">Requests Today</div>
            </div>
            <div class="keys-stat">
              <div class="stat-value">99.9%</div>
              <div class="stat-label">Success Rate</div>
            </div>
          </div>

          <div class="keys-list">
            <div class="key-item">
              <div class="key-info">
                <h4>Production Key</h4>
                <p>sk_prod_********************</p>
                <div class="key-meta">Created: Jan 15, 2024 ‚Ä¢ Last used: 5 min ago</div>
              </div>
              <div class="key-actions">
                <button class="action-btn small" onclick="viewKeyUsage('prod')">Usage</button>
                <button class="action-btn small secondary" onclick="regenerateKey('prod')">Regenerate</button>
              </div>
            </div>

            <div class="key-item">
              <div class="key-info">
                <h4>Development Key</h4>
                <p>sk_dev_********************</p>
                <div class="key-meta">Created: Jan 20, 2024 ‚Ä¢ Last used: 2 hours ago</div>
              </div>
              <div class="key-actions">
                <button class="action-btn small" onclick="viewKeyUsage('dev')">Usage</button>
                <button class="action-btn small secondary" onclick="regenerateKey('dev')">Regenerate</button>
              </div>
            </div>

            <div class="key-item">
              <div class="key-info">
                <h4>Testing Key</h4>
                <p>sk_test_********************</p>
                <div class="key-meta">Created: Jan 25, 2024 ‚Ä¢ Last used: 1 day ago</div>
              </div>
              <div class="key-actions">
                <button class="action-btn small" onclick="viewKeyUsage('test')">Usage</button>
                <button class="action-btn small secondary" onclick="regenerateKey('test')">Regenerate</button>
              </div>
            </div>
          </div>

          <button class="create-key-btn" onclick="createNewKey()">
            <span class="btn-icon">‚ûï</span>
            Create New API Key
          </button>
        </div>
      </div>

      <!-- Webhooks -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîó Webhooks</h2>
          <p>Real-time event notifications and webhook management</p>
        </div>

        <div class="webhooks-management">
          <div class="webhooks-header">
            <h3>Active Webhooks</h3>
            <button class="create-webhook-btn" onclick="createWebhook()">Create Webhook</button>
          </div>

          <div class="webhooks-list">
            <div class="webhook-item">
              <div class="webhook-info">
                <h4>Bet Notifications</h4>
                <p>https://api.client.com/webhooks/bets</p>
                <div class="webhook-events">Events: bet.placed, bet.settled</div>
                <div class="webhook-status active">‚óè Active</div>
              </div>
              <div class="webhook-actions">
                <button class="action-btn small" onclick="testWebhook('bets')">Test</button>
                <button class="action-btn small secondary" onclick="editWebhook('bets')">Edit</button>
                <button class="action-btn small danger" onclick="deleteWebhook('bets')">Delete</button>
              </div>
            </div>

            <div class="webhook-item">
              <div class="webhook-info">
                <h4>Payment Updates</h4>
                <p>https://api.client.com/webhooks/payments</p>
                <div class="webhook-events">Events: payment.received, payment.failed</div>
                <div class="webhook-status active">‚óè Active</div>
              </div>
              <div class="webhook-actions">
                <button class="action-btn small" onclick="testWebhook('payments')">Test</button>
                <button class="action-btn small secondary" onclick="editWebhook('payments')">Edit</button>
                <button class="action-btn small danger" onclick="deleteWebhook('payments')">Delete</button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Webhook Examples -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìù Webhook Examples</h2>
          <p>Sample webhook payloads for different event types</p>
        </div>

        <div class="webhook-examples">
          ${webhookExamples.map(example => `
            <div class="webhook-example">
              <div class="example-header">
                <h4>${example.event}</h4>
                <p>${example.description}</p>
              </div>
              <div class="example-payload">
                <pre><code>${example.payload}</code></pre>
                <button class="copy-payload-btn" onclick="copyWebhookPayload(this)">Copy Payload</button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Rate Limits -->
      <div class="api-section">
        <div class="section-header">
          <h2>üö¶ Rate Limits</h2>
          <p>API rate limiting information and usage tracking</p>
        </div>

        <div class="rate-limits-info">
          <div class="limits-overview">
            <div class="limit-card">
              <h3>Requests per Minute</h3>
              <div class="limit-value">1,000</div>
              <div class="limit-used">234 used (23%)</div>
              <div class="limit-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: 23%"></div>
                </div>
              </div>
            </div>

            <div class="limit-card">
              <h3>Requests per Hour</h3>
              <div class="limit-value">10,000</div>
              <div class="limit-used">2,847 used (28%)</div>
              <div class="limit-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: 28%"></div>
                </div>
              </div>
            </div>

            <div class="limit-card">
              <h3>Requests per Day</h3>
              <div class="limit-value">50,000</div>
              <div class="limit-used">15,234 used (30%)</div>
              <div class="limit-progress">
                <div class="progress-bar">
                  <div class="progress-fill" style="width: 30%"></div>
                </div>
              </div>
            </div>
          </div>

          <div class="limits-info">
            <h3>Rate Limit Headers</h3>
            <div class="headers-list">
              <div class="header-item">
                <code>X-RateLimit-Limit</code>
                <span>Total requests allowed</span>
              </div>
              <div class="header-item">
                <code>X-RateLimit-Remaining</code>
                <span>Requests remaining in window</span>
              </div>
              <div class="header-item">
                <code>X-RateLimit-Reset</code>
                <span>Time when limit resets (Unix timestamp)</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Error Handling -->
      <div class="api-section">
        <div class="section-header">
          <h2>‚ö†Ô∏è Error Handling</h2>
          <p>Common error responses and troubleshooting guide</p>
        </div>

        <div class="error-handling">
          <div class="error-codes">
            <h3>HTTP Status Codes</h3>
            <div class="error-code">
              <span class="code">400</span>
              <span class="description">Bad Request - Invalid parameters</span>
            </div>
            <div class="error-code">
              <span class="code">401</span>
              <span class="description">Unauthorized - Invalid API key or token</span>
            </div>
            <div class="error-code">
              <span class="code">403</span>
              <span class="description">Forbidden - Insufficient permissions</span>
            </div>
            <div class="error-code">
              <span class="code">404</span>
              <span class="description">Not Found - Resource doesn't exist</span>
            </div>
            <div class="error-code">
              <span class="code">429</span>
              <span class="description">Too Many Requests - Rate limit exceeded</span>
            </div>
            <div class="error-code">
              <span class="code">500</span>
              <span class="description">Internal Server Error - Server issue</span>
            </div>
          </div>

          <div class="error-response">
            <h3>Error Response Format</h3>
            <div class="code-block">
              <pre><code>{
  "error": {
    "code": "INVALID_REQUEST",
    "message": "The request parameters are invalid",
    "details": {
      "field": "amount",
      "issue": "Must be a positive number"
    }
  },
  "request_id": "req_1234567890"
}</code></pre>
            </div>
          </div>
        </div>
      </div>

      <!-- Support & Community -->
      <div class="api-section">
        <div class="section-header">
          <h2>ü§ù Support & Community</h2>
          <p>Get help and connect with other developers</p>
        </div>

        <div class="support-resources">
          <div class="support-card">
            <div class="support-icon">üìß</div>
            <h3>Email Support</h3>
            <p>Get direct assistance from our developer team</p>
            <a href="mailto:api-support@fantasy402.com" class="support-link">api-support@fantasy402.com</a>
          </div>

          <div class="support-card">
            <div class="support-icon">üí¨</div>
            <h3>Developer Forum</h3>
            <p>Connect with other developers and share knowledge</p>
            <a href="/developer/forum" class="support-link">Visit Forum ‚Üí</a>
          </div>

          <div class="support-card">
            <div class="support-icon">üìö</div>
            <h3>Knowledge Base</h3>
            <p>Comprehensive guides and troubleshooting articles</p>
            <a href="/developer/knowledge-base" class="support-link">Browse Articles ‚Üí</a>
          </div>

          <div class="support-card">
            <div class="support-icon">üîî</div>
            <h3>Status Updates</h3>
            <p>Real-time API status and maintenance notifications</p>
            <a href="/status" class="support-link">View Status ‚Üí</a>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          API Overview
        </a>
        <a href="/api/documentation" class="nav-btn secondary">
          <span class="btn-icon">üìö</span>
          Documentation
        </a>
        <a href="/api/integrations" class="nav-btn primary">
          <span class="btn-icon">üîó</span>
          Integrations
        </a>
      </div>
    </div>

    <script>
      ${getApiDeveloperScripts()}
    </script>
  `;
}

function generateApiIntegrationsContent(employee: EmployeeData): string {
  const integrations = [
    {
      name: 'Slack',
      icon: 'üí¨',
      description: 'Receive notifications and alerts in Slack channels',
      status: 'connected',
      features: ['Real-time alerts', 'Channel notifications', 'Interactive buttons'],
      setup_time: '5 minutes'
    },
    {
      name: 'Zapier',
      icon: '‚ö°',
      description: 'Connect Fantasy402 with 2,000+ apps via Zapier',
      status: 'available',
      features: ['Automated workflows', 'Data synchronization', 'Custom triggers'],
      setup_time: '10 minutes'
    },
    {
      name: 'Microsoft Teams',
      icon: 'üë•',
      description: 'Team collaboration and notification integration',
      status: 'available',
      features: ['Team notifications', 'Meeting integration', 'File sharing'],
      setup_time: '8 minutes'
    },
    {
      name: 'Discord',
      icon: 'üéÆ',
      description: 'Gaming community integration and notifications',
      status: 'connected',
      features: ['Server notifications', 'Role-based alerts', 'Voice integration'],
      setup_time: '3 minutes'
    },
    {
      name: 'Google Workspace',
      icon: 'üìß',
      description: 'Email notifications and calendar integration',
      status: 'available',
      features: ['Email alerts', 'Calendar events', 'Drive integration'],
      setup_time: '12 minutes'
    },
    {
      name: 'Webhook',
      icon: 'üîó',
      description: 'Custom webhook endpoints for maximum flexibility',
      status: 'active',
      features: ['Custom endpoints', 'Retry logic', 'Payload customization'],
      setup_time: '15 minutes'
    },
    {
      name: 'Stripe',
      icon: 'üí≥',
      description: 'Secure payment processing and subscription management',
      status: 'connected',
      features: ['Payment processing', 'Subscription billing', 'Payout management'],
      setup_time: '8 minutes'
    },
    {
      name: 'Twilio',
      icon: 'üì±',
      description: 'SMS notifications and communication services',
      status: 'available',
      features: ['SMS alerts', 'Voice calls', 'WhatsApp integration'],
      setup_time: '6 minutes'
    },
    {
      name: 'SendGrid',
      icon: 'üì¨',
      description: 'Advanced email delivery and marketing automation',
      status: 'available',
      features: ['Email delivery', 'Marketing campaigns', 'Transactional emails'],
      setup_time: '7 minutes'
    },
    {
      name: 'HubSpot',
      icon: 'üéØ',
      description: 'CRM integration and marketing automation',
      status: 'available',
      features: ['Lead tracking', 'Marketing automation', 'Sales pipeline'],
      setup_time: '15 minutes'
    },
    {
      name: 'Salesforce',
      icon: '‚òÅÔ∏è',
      description: 'Enterprise CRM and customer management',
      status: 'available',
      features: ['Customer data sync', 'Sales automation', 'Reporting integration'],
      setup_time: '20 minutes'
    },
    {
      name: 'Jira',
      icon: 'üìã',
      description: 'Project management and issue tracking',
      status: 'available',
      features: ['Issue tracking', 'Project management', 'Workflow automation'],
      setup_time: '10 minutes'
    },
    {
      name: 'GitHub',
      icon: 'üêô',
      description: 'Development workflow and CI/CD integration',
      status: 'available',
      features: ['Code deployments', 'Issue tracking', 'Release management'],
      setup_time: '12 minutes'
    },
    {
      name: 'AWS Lambda',
      icon: '‚òÅÔ∏è',
      description: 'Serverless computing and event-driven architecture',
      status: 'available',
      features: ['Serverless functions', 'Event processing', 'Auto-scaling'],
      setup_time: '18 minutes'
    },
    {
      name: 'Docker Hub',
      icon: 'üê≥',
      description: 'Container registry and deployment automation',
      status: 'available',
      features: ['Container deployment', 'Image management', 'Registry access'],
      setup_time: '9 minutes'
    }
  ];

  const apiEndpoints = [
    { name: 'Client Management', endpoints: 12, calls: '15.2K', status: 'active' },
    { name: 'Betting Operations', endpoints: 8, calls: '8.9K', status: 'active' },
    { name: 'Analytics & Reporting', endpoints: 15, calls: '12.4K', status: 'active' },
    { name: 'Payment Processing', endpoints: 6, calls: '4.2K', status: 'active' },
    { name: 'User Authentication', endpoints: 4, calls: '892', status: 'active' },
    { name: 'Sports Data', endpoints: 18, calls: '28.7K', status: 'active' },
    { name: 'Risk Management', endpoints: 9, calls: '6.3K', status: 'active' },
    { name: 'Compliance & KYC', endpoints: 7, calls: '3.1K', status: 'active' },
    { name: 'Marketing & Campaigns', endpoints: 11, calls: '9.8K', status: 'active' },
    { name: 'Admin & Settings', endpoints: 5, calls: '1.2K', status: 'active' }
  ];

  return `
    <div class="api-integrations-container">
      <style>
        ${getApiIntegrationsStyles()}
      </style>

      <div class="api-header">
        <div class="header-content">
          <h1>üîó API Integrations Hub</h1>
          <p>Connect Fantasy402 with your favorite tools and platforms</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              Integration Services Active
            </div>
            <div class="last-update">Last updated: <span id="integrationsLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Integration Marketplace -->
      <div class="api-section">
        <div class="section-header">
          <h2>üõçÔ∏è Integration Marketplace</h2>
          <p>Popular integrations and third-party connections</p>
        </div>

        <div class="integrations-grid">
          ${integrations.map(integration => `
            <div class="integration-card ${integration.status}">
              <div class="integration-header">
                <div class="integration-icon">${integration.icon}</div>
                <div class="integration-status ${integration.status}">
                  ${integration.status === 'connected' ? '‚óè Connected' : integration.status === 'active' ? '‚óè Active' : '‚óã Available'}
                </div>
              </div>
              <h3 class="integration-name">${integration.name}</h3>
              <p class="integration-description">${integration.description}</p>

              <div class="integration-features">
                ${integration.features.map(feature => `
                  <span class="feature-tag">${feature}</span>
                `).join('')}
              </div>

              <div class="integration-footer">
                <div class="setup-time">‚è±Ô∏è ${integration.setup_time}</div>
                <button class="integration-btn ${integration.status === 'connected' ? 'disconnect' : 'connect'}"
                        onclick="${integration.status === 'connected' ? 'disconnectIntegration' : 'connectIntegration'}('${integration.name.toLowerCase()}')">
                  ${integration.status === 'connected' ? 'Disconnect' : 'Connect'}
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- API Endpoints Overview -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîå API Endpoints</h2>
          <p>Available API endpoints for integration</p>
        </div>

        <div class="endpoints-overview">
          ${apiEndpoints.map(endpoint => `
            <div class="endpoint-overview">
              <div class="endpoint-info">
                <h3>${endpoint.name}</h3>
                <div class="endpoint-stats">
                  <span class="stat">${endpoint.endpoints} endpoints</span>
                  <span class="stat">${endpoint.calls} calls today</span>
                  <span class="stat status-${endpoint.status}">${endpoint.status}</span>
                </div>
              </div>
              <button class="endpoint-btn" onclick="viewEndpointDetails('${endpoint.name.toLowerCase().replace(/\s+/g, '_')}')">
                View Details
              </button>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Integration Templates -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìã Integration Templates</h2>
          <p>Pre-built integration workflows for common use cases</p>
        </div>

        <div class="templates-grid">
          <div class="template-card">
            <div class="template-icon">üé∞</div>
            <h3>Automated Betting Alerts</h3>
            <p>Send real-time betting notifications to Slack, Teams, and Discord</p>
            <div class="template-features">
              <span class="feature">High-value bets</span>
              <span class="feature">VIP client activity</span>
              <span class="feature">Risk alerts</span>
            </div>
            <button class="template-btn" onclick="deployTemplate('betting-alerts')">Deploy Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">üí∞</div>
            <h3>Payment Processing Sync</h3>
            <p>Sync payment data with CRM and accounting systems</p>
            <div class="template-features">
              <span class="feature">Stripe integration</span>
              <span class="feature">HubSpot sync</span>
              <span class="feature">Financial reporting</span>
            </div>
            <button class="template-btn" onclick="deployTemplate('payment-sync')">Deploy Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">üìä</div>
            <h3>Analytics Dashboard Export</h3>
            <p>Export performance data to BI tools and custom dashboards</p>
            <div class="template-features">
              <span class="feature">Real-time sync</span>
              <span class="feature">Custom reports</span>
              <span class="feature">Data visualization</span>
            </div>
            <button class="template-btn" onclick="deployTemplate('analytics-export')">Deploy Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">üîî</div>
            <h3>Customer Support Integration</h3>
            <p>Create support tickets from client feedback and issues</p>
            <div class="template-features">
              <span class="feature">Auto-ticketing</span>
              <span class="feature">Priority routing</span>
              <span class="feature">SLA tracking</span>
            </div>
            <button class="template-btn" onclick="deployTemplate('support-integration')">Deploy Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">üìà</div>
            <h3>Marketing Campaign Sync</h3>
            <p>Sync client data with email marketing and CRM campaigns</p>
            <div class="template-features">
              <span class="feature">Lead scoring</span>
              <span class="feature">Segmentation</span>
              <span class="feature">Campaign triggers</span>
            </div>
            <button class="template-btn" onclick="deployTemplate('marketing-sync')">Deploy Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">‚ö°</div>
            <h3>Real-time Data Pipeline</h3>
            <p>Stream live betting data to external analytics platforms</p>
            <div class="template-features">
              <span class="feature">Live streaming</span>
              <span class="feature">Data transformation</span>
              <span class="feature">Custom endpoints</span>
            </div>
            <button class="template-btn" onclick="deployTemplate('data-pipeline')">Deploy Template</button>
          </div>
        </div>
      </div>

      <!-- Webhook Management -->
      <div class="api-section">
        <div class="section-header">
          <h2>üîó Webhook Management</h2>
          <p>Configure webhooks for real-time event notifications</p>
        </div>

        <div class="webhook-management">
          <div class="webhook-header">
            <h3>Active Webhooks</h3>
            <button class="create-webhook-btn" onclick="createNewWebhook()">
              <span class="btn-icon">‚ûï</span>
              Create Webhook
            </button>
          </div>

          <div class="webhook-stats">
            <div class="stat-box">
              <div class="stat-value">12</div>
              <div class="stat-label">Active Webhooks</div>
            </div>
            <div class="stat-box">
              <div class="stat-value">47.2K</div>
              <div class="stat-label">Events Sent Today</div>
            </div>
            <div class="stat-box">
              <div class="stat-value">99.8%</div>
              <div class="stat-label">Delivery Rate</div>
            </div>
            <div class="stat-box">
              <div class="stat-value">142ms</div>
              <div class="stat-label">Avg Response</div>
            </div>
          </div>

          <div class="webhook-list">
            <div class="webhook-item">
              <div class="webhook-info">
                <h4>Bet Placed Events</h4>
                <p>https://api.client.com/webhooks/bets</p>
                <div class="webhook-meta">
                  <span class="events-count">8,947 events</span>
                  <span class="success-rate">99.9% success</span>
                </div>
              </div>
              <div class="webhook-actions">
                <button class="action-btn small" onclick="testWebhook('bets')">Test</button>
                <button class="action-btn small secondary" onclick="editWebhook('bets')">Edit</button>
                <button class="action-btn small danger" onclick="deleteWebhook('bets')">Delete</button>
              </div>
            </div>

            <div class="webhook-item">
              <div class="webhook-info">
                <h4>Payment Notifications</h4>
                <p>https://api.client.com/webhooks/payments</p>
                <div class="webhook-meta">
                  <span class="events-count">4,231 events</span>
                  <span class="success-rate">99.7% success</span>
                </div>
              </div>
              <div class="webhook-actions">
                <button class="action-btn small" onclick="testWebhook('payments')">Test</button>
                <button class="action-btn small secondary" onclick="editWebhook('payments')">Edit</button>
                <button class="action-btn small danger" onclick="deleteWebhook('payments')">Delete</button>
              </div>
            </div>

            <div class="webhook-item">
              <div class="webhook-info">
                <h4>Client Updates</h4>
                <p>https://api.client.com/webhooks/clients</p>
                <div class="webhook-meta">
                  <span class="events-count">1,892 events</span>
                  <span class="success-rate">99.8% success</span>
                </div>
              </div>
              <div class="webhook-actions">
                <button class="action-btn small" onclick="testWebhook('clients')">Test</button>
                <button class="action-btn small secondary" onclick="editWebhook('clients')">Edit</button>
                <button class="action-btn small danger" onclick="deleteWebhook('clients')">Delete</button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Integration Testing -->
      <div class="api-section">
        <div class="section-header">
          <h2>üß™ Integration Testing</h2>
          <p>Test your integrations and validate webhook endpoints</p>
        </div>

        <div class="integration-testing">
          <div class="test-tools">
            <div class="test-tool">
              <h3>Webhook Tester</h3>
              <p>Test webhook endpoints with sample payloads</p>
              <button class="test-btn" onclick="openWebhookTester()">Open Tester</button>
            </div>

            <div class="test-tool">
              <h3>API Simulator</h3>
              <p>Simulate API responses for testing</p>
              <button class="test-btn" onclick="openApiSimulator()">Open Simulator</button>
            </div>

            <div class="test-tool">
              <h3>Load Testing</h3>
              <p>Test integration performance under load</p>
              <button class="test-btn" onclick="openLoadTester()">Load Tester</button>
            </div>
          </div>

          <div class="test-results">
            <h3>Test Results</h3>
            <div class="result-item success">
              <span class="result-icon">‚úÖ</span>
              <span class="result-text">Webhook endpoint responding correctly</span>
              <span class="result-time">2 min ago</span>
            </div>
            <div class="result-item success">
              <span class="result-icon">‚úÖ</span>
              <span class="result-text">API authentication successful</span>
              <span class="result-time">5 min ago</span>
            </div>
            <div class="result-item warning">
              <span class="result-icon">‚ö†Ô∏è</span>
              <span class="result-text">Rate limit warning triggered</span>
              <span class="result-time">12 min ago</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Integration Analytics -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìä Integration Analytics</h2>
          <p>Monitor integration performance and usage patterns</p>
        </div>

        <div class="integration-analytics">
          <div class="analytics-metrics">
            <div class="metric-card">
              <div class="metric-icon">üîÑ</div>
              <div class="metric-value">47.2K</div>
              <div class="metric-label">API Calls Today</div>
              <div class="metric-change positive">+8.3%</div>
            </div>

            <div class="metric-card">
              <div class="metric-icon">‚úÖ</div>
              <div class="metric-value">99.8%</div>
              <div class="metric-label">Success Rate</div>
              <div class="metric-change positive">+0.2%</div>
            </div>

            <div class="metric-card">
              <div class="metric-icon">‚ö°</div>
              <div class="metric-value">142ms</div>
              <div class="metric-label">Avg Response Time</div>
              <div class="metric-change neutral">-2ms</div>
            </div>

            <div class="metric-card">
              <div class="metric-icon">üîó</div>
              <div class="metric-value">12</div>
              <div class="metric-label">Active Integrations</div>
              <div class="metric-change positive">+2</div>
            </div>
          </div>

          <div class="analytics-charts">
            <div class="chart-placeholder">
              <h4>Integration Usage Over Time</h4>
              <div class="chart-area">
                <p>üìä Interactive charts would be displayed here</p>
                <p>Showing API calls, response times, and error rates</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Integration Templates -->
      <div class="api-section">
        <div class="section-header">
          <h2>üìã Integration Templates</h2>
          <p>Pre-built integration templates to get started quickly</p>
        </div>

        <div class="integration-templates">
          <div class="template-card">
            <div class="template-icon">üí∞</div>
            <h3>Payment Processing</h3>
            <p>Handle payments, payouts, and financial transactions</p>
            <div class="template-features">
              <span class="feature">Stripe integration</span>
              <span class="feature">PayPal support</span>
              <span class="feature">Cryptocurrency</span>
            </div>
            <button class="template-btn" onclick="useTemplate('payment')">Use Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">üìß</div>
            <h3>Email Notifications</h3>
            <p>Send automated emails for bets, payments, and updates</p>
            <div class="template-features">
              <span class="feature">SMTP configuration</span>
              <span class="feature">Template engine</span>
              <span class="feature">Delivery tracking</span>
            </div>
            <button class="template-btn" onclick="useTemplate('email')">Use Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">üì±</div>
            <h3>Mobile App</h3>
            <p>Build mobile apps with Fantasy402 integration</p>
            <div class="template-features">
              <span class="feature">React Native</span>
              <span class="feature">Flutter</span>
              <span class="feature">iOS/Android</span>
            </div>
            <button class="template-btn" onclick="useTemplate('mobile')">Use Template</button>
          </div>

          <div class="template-card">
            <div class="template-icon">ü§ñ</div>
            <h3>AI & Analytics</h3>
            <p>Leverage AI for betting predictions and analytics</p>
            <div class="template-features">
              <span class="feature">ML models</span>
              <span class="feature">Prediction API</span>
              <span class="feature">Data analysis</span>
            </div>
            <button class="template-btn" onclick="useTemplate('ai')">Use Template</button>
          </div>
        </div>
      </div>

      <!-- Support & Documentation -->
      <div class="api-section">
        <div class="section-header">
          <h2>üÜò Support & Resources</h2>
          <p>Get help with integrations and find additional resources</p>
        </div>

        <div class="support-resources">
          <div class="resource-card">
            <div class="resource-icon">üìö</div>
            <h3>Integration Guides</h3>
            <p>Step-by-step guides for common integrations</p>
            <a href="/integrations/guides" class="resource-link">View Guides ‚Üí</a>
          </div>

          <div class="resource-card">
            <div class="resource-icon">üí¨</div>
            <h3>Developer Community</h3>
            <p>Connect with other developers and get help</p>
            <a href="/community" class="resource-link">Join Community ‚Üí</a>
          </div>

          <div class="resource-card">
            <div class="resource-icon">üé•</div>
            <h3>Video Tutorials</h3>
            <p>Watch video guides for complex integrations</p>
            <a href="/tutorials" class="resource-link">Watch Videos ‚Üí</a>
          </div>

          <div class="resource-card">
            <div class="resource-icon">üìû</div>
            <h3>Integration Support</h3>
            <p>Direct support for integration issues</p>
            <a href="mailto:integration-support@fantasy402.com" class="resource-link">Get Support</a>
          </div>
        </div>
      </div>

      <div class="api-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          API Overview
        </a>
        <a href="/api/developer" class="nav-btn secondary">
          <span class="btn-icon">üë®‚Äçüíª</span>
          Developer Portal
        </a>
        <a href="/api/analytics" class="nav-btn primary">
          <span class="btn-icon">üìä</span>
          Business Intelligence
        </a>
      </div>
    </div>

    <script>
      ${getApiIntegrationsScripts()}
    </script>
  `;
}

// Supporting functions for styles and scripts
function getApiDocumentationStyles(): string {
  return `
    .api-documentation-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .api-overview-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .overview-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      border: 1px solid rgba(255, 215, 0, 0.3);
      transition: all 0.3s ease;
    }

    .overview-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .card-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .overview-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .overview-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .auth-tabs {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .auth-tab {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .auth-tab.active {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .auth-content {
      display: none;
    }

    .auth-content.active {
      display: block;
    }

    .code-block {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      padding: 1rem;
      margin-top: 1rem;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.9rem;
      overflow-x: auto;
    }

    .endpoints-list {
      display: flex;
      flex-direction: column;
      gap: 2rem;
      margin-top: 2rem;
    }

    .endpoint-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .endpoint-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .endpoint-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .endpoint-method {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
      color: white;
    }

    .method-get {
      background: #22c55e;
    }

    .method-post {
      background: #3b82f6;
    }

    .method-put {
      background: #f59e0b;
    }

    .method-delete {
      background: #ef4444;
    }

    .endpoint-path {
      color: #40e0d0;
      font-family: monospace;
      font-size: 1.1rem;
      font-weight: 600;
    }

    .endpoint-description {
      color: #a0a9b8;
      margin-bottom: 1.5rem;
    }

    .endpoint-details {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }

    .parameters-section h4, .responses-section h4 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .parameters-table {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .param-row {
      display: grid;
      grid-template-columns: 150px 100px 80px 1fr;
      gap: 1rem;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 4px;
    }

    .param-name {
      color: #40e0d0;
      font-weight: 600;
    }

    .param-type {
      color: #ffd700;
      font-size: 0.8rem;
    }

    .param-required.required {
      color: #ef4444;
      font-size: 0.8rem;
    }

    .param-required.optional {
      color: #22c55e;
      font-size: 0.8rem;
    }

    .param-description {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .responses-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .response-item {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .response-code {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
      min-width: 50px;
      text-align: center;
    }

    .response-code.success {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .response-code.client-error {
      background: rgba(251, 191, 36, 0.2);
      color: #f59e0b;
    }

    .response-code.server-error {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .response-description {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .examples-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .example-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(168, 85, 247, 0.3);
      transition: all 0.3s ease;
    }

    .example-card:hover {
      transform: translateY(-5px);
      border-color: #a855f7;
      box-shadow: 0 8px 25px rgba(168, 85, 247, 0.2);
    }

    .example-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .example-language {
      color: #ffd700;
      font-weight: 600;
      font-size: 0.9rem;
    }

    .example-title {
      color: #e0e6ed;
      font-weight: 600;
    }

    .copy-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      margin-top: 1rem;
    }

    .copy-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .testing-tools {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }

    .test-form {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .form-row {
      margin-bottom: 1.5rem;
    }

    .form-row label {
      display: block;
      color: #e0e6ed;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .form-row select, .form-row input, .form-row textarea {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 6px;
      background: rgba(255, 255, 255, 0.05);
      color: #e0e6ed;
      font-family: inherit;
    }

    .form-row textarea {
      resize: vertical;
      min-height: 100px;
    }

    .test-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.2s ease;
      width: 100%;
    }

    .test-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.3);
    }

    .test-results {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .test-results h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .test-output {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      padding: 1rem;
      font-family: monospace;
      font-size: 0.9rem;
      color: #a0a9b8;
    }

    .sdk-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .sdk-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      border: 1px solid rgba(168, 85, 247, 0.3);
      transition: all 0.3s ease;
    }

    .sdk-card:hover {
      transform: translateY(-5px);
      border-color: #a855f7;
      box-shadow: 0 8px 25px rgba(168, 85, 247, 0.2);
    }

    .sdk-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .sdk-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .sdk-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .sdk-code {
      background: rgba(0, 0, 0, 0.3);
      padding: 0.5rem;
      border-radius: 4px;
      font-family: monospace;
      font-size: 0.8rem;
      color: #40e0d0;
      margin-bottom: 1rem;
      display: block;
    }

    .sdk-link {
      color: #ffd700;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }

    .sdk-link:hover {
      color: #ff6b35;
    }

    .api-status {
      margin-top: 2rem;
    }

    .status-banner {
      display: flex;
      align-items: center;
      gap: 2rem;
      background: rgba(34, 197, 94, 0.1);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(34, 197, 94, 0.3);
      margin-bottom: 2rem;
    }

    .status-icon {
      font-size: 2rem;
    }

    .status-info h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .status-info p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .changelog {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
    }

    .changelog h3 {
      color: #e0e6ed;
      margin-bottom: 2rem;
    }

    .changelog-item {
      display: grid;
      grid-template-columns: 100px 1fr;
      gap: 1rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      margin-bottom: 1rem;
    }

    .version-tag {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
      text-align: center;
    }

    .change-details h4 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .change-details p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .change-details small {
      color: #6b7280;
      font-size: 0.8rem;
    }

    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .api-documentation-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .api-overview-cards {
        grid-template-columns: 1fr;
      }

      .endpoint-details {
        grid-template-columns: 1fr;
      }

      .param-row {
        grid-template-columns: 1fr;
        gap: 0.5rem;
      }

      .examples-grid {
        grid-template-columns: 1fr;
      }

      .testing-tools {
        grid-template-columns: 1fr;
      }

      .sdk-grid {
        grid-template-columns: 1fr;
      }

      .status-banner {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }
    }
  `;
}

function getApiDeveloperStyles(): string {
  return `
    .api-developer-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .resources-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .resource-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .resource-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .resource-card.guide {
      border-color: rgba(255, 215, 0, 0.3);
    }

    .resource-card.guide:hover {
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .resource-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .resource-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .resource-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .resource-link {
      color: #ffd700;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }

    .resource-link:hover {
      color: #ff6b35;
    }

    .keys-management {
      margin-top: 2rem;
    }

    .keys-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .keys-stat {
      text-align: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 800;
      color: #40e0d0;
      display: block;
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .keys-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .key-item {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 2rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border: 1px solid rgba(168, 85, 247, 0.3);
    }

    .key-info h4 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .key-info p {
      color: #a0a9b8;
      font-family: monospace;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .key-meta {
      color: #6b7280;
      font-size: 0.8rem;
    }

    .key-actions {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .create-key-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.2s ease;
      width: 100%;
    }

    .create-key-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.3);
    }

    .webhooks-management {
      margin-top: 2rem;
    }

    .webhooks-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .webhooks-header h3 {
      color: #e0e6ed;
    }

    .create-webhook-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .create-webhook-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .webhooks-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .webhook-item {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 2rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .webhook-info h4 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .webhook-info p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .webhook-events {
      color: #ffd700;
      font-size: 0.8rem;
      margin-bottom: 0.5rem;
    }

    .webhook-status {
      color: #22c55e;
      font-weight: 600;
      font-size: 0.9rem;
    }

    .webhook-meta {
      display: flex;
      gap: 1rem;
      margin-top: 0.5rem;
    }

    .events-count {
      color: #40e0d0;
      font-size: 0.8rem;
    }

    .success-rate {
      color: #22c55e;
      font-size: 0.8rem;
    }

    .webhook-actions {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .webhook-examples {
      margin-top: 2rem;
    }

    .webhook-example {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      margin-bottom: 2rem;
      border: 1px solid rgba(168, 85, 247, 0.3);
    }

    .example-header h4 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .example-header p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .example-payload {
      position: relative;
    }

    .copy-payload-btn {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .copy-payload-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .rate-limits-info {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }

    .limits-overview {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .limit-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(251, 191, 36, 0.3);
    }

    .limit-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .limit-value {
      font-size: 1.5rem;
      font-weight: 800;
      color: #ffd700;
      margin-bottom: 0.5rem;
    }

    .limit-used {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .limit-progress {
      width: 100%;
      height: 8px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      overflow: hidden;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #ffd700, #ff6b35);
      transition: width 0.3s ease;
    }

    .progress-text {
      font-size: 0.8rem;
      color: #a0a9b8;
      margin-top: 0.5rem;
    }

    .limits-info {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .limits-info h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .headers-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .header-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 4px;
    }

    .header-item code {
      color: #40e0d0;
      font-family: monospace;
      font-size: 0.9rem;
    }

    .header-item span {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .error-handling {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }

    .error-codes {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .error-codes h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .error-code {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      margin-bottom: 0.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 6px;
      border-left: 4px solid;
    }

    .error-code:nth-child(1) { border-left-color: #ef4444; }
    .error-code:nth-child(2) { border-left-color: #ef4444; }
    .error-code:nth-child(3) { border-left-color: #f59e0b; }
    .error-code:nth-child(4) { border-left-color: #f59e0b; }
    .error-code:nth-child(5) { border-left-color: #f59e0b; }
    .error-code:nth-child(6) { border-left-color: #ef4444; }

    .error-code .code {
      font-weight: 800;
      color: #e0e6ed;
    }

    .error-code .description {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .error-response {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .error-response h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .support-resources {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .support-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .support-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .support-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .support-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .support-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .support-link {
      color: #ffd700;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }

    .support-link:hover {
      color: #ff6b35;
    }

    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .api-developer-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .resources-grid {
        grid-template-columns: 1fr;
      }

      .keys-summary {
        grid-template-columns: 1fr;
      }

      .key-item {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .webhook-item {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .rate-limits-info {
        grid-template-columns: 1fr;
      }

      .error-handling {
        grid-template-columns: 1fr;
      }

      .support-resources {
        grid-template-columns: 1fr;
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }
    }
  `;
}

function getApiIntegrationsStyles(): string {
  return `
    .api-integrations-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    .api-header {
      background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(64, 224, 208, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .api-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #a855f7, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .api-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    .integrations-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .integration-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
      position: relative;
    }

    .integration-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .integration-card.connected {
      border-color: rgba(34, 197, 94, 0.3);
    }

    .integration-card.available {
      border-color: rgba(251, 191, 36, 0.3);
    }

    .integration-card.active {
      border-color: rgba(168, 85, 247, 0.3);
    }

    .integration-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .integration-icon {
      font-size: 2rem;
    }

    .integration-status {
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .integration-status .connected {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .integration-status .available {
      background: rgba(251, 191, 36, 0.2);
      color: #f59e0b;
    }

    .integration-status .active {
      background: rgba(168, 85, 247, 0.2);
      color: #a855f7;
    }

    .integration-name {
      font-size: 1.5rem;
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .integration-description {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .integration-features {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .feature-tag {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      font-size: 0.7rem;
      font-weight: 600;
    }

    .integration-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .setup-time {
      color: #6b7280;
      font-size: 0.8rem;
    }

    .integration-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }

    .integration-btn.connect {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .integration-btn.disconnect {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .integration-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    .endpoints-overview {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .endpoint-overview {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border: 1px solid rgba(168, 85, 247, 0.3);
    }

    .endpoint-info h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .endpoint-stats {
      display: flex;
      gap: 1rem;
      margin-bottom: 0.5rem;
    }

    .endpoint-stats .stat {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .endpoint-stats .status {
      color: #22c55e;
      font-weight: 600;
    }

    .endpoint-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .endpoint-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .webhook-management {
      margin-top: 2rem;
    }

    .webhook-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .webhook-header h3 {
      color: #e0e6ed;
    }

    .create-webhook-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .create-webhook-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .webhook-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .stat-box {
      text-align: center;
      padding: 1rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 800;
      color: #40e0d0;
      display: block;
      margin-bottom: 0.5rem;
    }

    .stat-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .webhook-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .webhook-item {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 2rem;
      padding: 1.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .webhook-info h4 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .webhook-info p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .webhook-meta {
      display: flex;
      gap: 1rem;
      margin-top: 0.5rem;
    }

    .events-count {
      color: #ffd700;
      font-size: 0.8rem;
    }

    .success-rate {
      color: #22c55e;
      font-size: 0.8rem;
    }

    .webhook-actions {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .integration-testing {
      margin-top: 2rem;
    }

    .test-tools {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .test-tool {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
      border: 1px solid rgba(34, 197, 94, 0.3);
    }

    .test-tool h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .test-tool p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .test-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      width: 100%;
    }

    .test-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .test-results {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .test-results h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .result-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 0.75rem;
      margin-bottom: 0.5rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 6px;
    }

    .result-item.success {
      border-left: 4px solid #22c55e;
    }

    .result-item.warning {
      border-left: 4px solid #f59e0b;
    }

    .result-item.error {
      border-left: 4px solid #ef4444;
    }

    .result-icon {
      font-size: 1.2rem;
    }

    .result-text {
      color: #e0e6ed;
      flex: 1;
    }

    .result-time {
      color: #a0a9b8;
      font-size: 0.8rem;
    }

    .integration-analytics {
      margin-top: 2rem;
    }

    .analytics-metrics {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .metric-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 1.5rem;
      text-align: center;
      border: 1px solid rgba(168, 85, 247, 0.3);
    }

    .metric-icon {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }

    .metric-value {
      font-size: 1.5rem;
      font-weight: 800;
      color: #40e0d0;
      margin-bottom: 0.5rem;
    }

    .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .metric-change {
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .metric-change.positive {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .metric-change.neutral {
      background: rgba(107, 114, 128, 0.2);
      color: #6b7280;
    }

    .analytics-charts {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 8px;
      padding: 2rem;
      border: 1px solid rgba(251, 191, 36, 0.3);
    }

    .chart-placeholder {
      text-align: center;
    }

    .chart-placeholder h4 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .chart-placeholder .chart-area {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      padding: 3rem;
      color: #a0a9b8;
    }

    .integration-templates {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .template-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .template-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .template-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .template-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .template-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .template-features {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .feature {
      background: rgba(255, 255, 255, 0.1);
      color: #a0a9b8;
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      font-size: 0.7rem;
      font-weight: 600;
    }

    .template-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      width: 100%;
    }

    .template-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    .support-resources {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .resource-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      text-align: center;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .resource-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .resource-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .resource-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .resource-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .resource-link {
      color: #ffd700;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }

    .resource-link:hover {
      color: #ff6b35;
    }

    .api-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .api-integrations-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .integrations-grid {
        grid-template-columns: 1fr;
      }

      .endpoints-overview {
        grid-template-columns: 1fr;
      }

      .webhook-item {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .test-tools {
        grid-template-columns: 1fr;
      }

      .analytics-metrics {
        grid-template-columns: 1fr;
      }

      .integration-templates {
        grid-template-columns: 1fr;
      }

      .support-resources {
        grid-template-columns: 1fr;
      }

      .api-navigation {
        flex-direction: column;
        gap: 1rem;
      }

      /* New Enhanced Sections Responsive */
      .primary-channels-grid,
      .webhooks-grid,
      .tier-comparison,
      .support-resources {
        grid-template-columns: 1fr;
      }

      .explorer-controls {
        flex-direction: column;
        gap: 1rem;
      }

      .search-controls {
        flex-direction: column;
      }

      .endpoint-summary {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .endpoint-actions {
        flex-direction: column;
        width: 100%;
      }

      .test-endpoint-btn,
      .copy-endpoint-btn {
        width: 100%;
      }
    }

    /* API Explorer */
    .api-explorer {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      border: 1px solid rgba(64, 224, 208, 0.3);
      overflow: hidden;
    }

    .explorer-controls {
      padding: 1.5rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .search-controls {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .search-input {
      padding: 0.75rem 1rem;
      border-radius: 8px;
      border: 1px solid rgba(64, 224, 208, 0.3);
      background: rgba(255, 255, 255, 0.05);
      color: #e0e6ed;
      font-size: 0.9rem;
      min-width: 250px;
    }

    .search-input:focus {
      outline: none;
      border-color: #40e0d0;
      box-shadow: 0 0 0 2px rgba(64, 224, 208, 0.2);
    }

    .method-select {
      padding: 0.75rem 1rem;
      border-radius: 8px;
      border: 1px solid rgba(64, 224, 208, 0.3);
      background: rgba(255, 255, 255, 0.05);
      color: #e0e6ed;
      font-size: 0.9rem;
    }

    .explorer-stats {
      display: flex;
      gap: 1.5rem;
      flex-wrap: wrap;
    }

    .stat-item {
      color: #a0a9b8;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .explorer-results {
      max-height: 600px;
      overflow-y: auto;
    }

    .explorer-endpoint {
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    .explorer-endpoint:last-child {
      border-bottom: none;
    }

    .endpoint-summary {
      padding: 1rem 1.5rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .endpoint-summary:hover {
      background: rgba(64, 224, 208, 0.05);
    }

    .method-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 700;
      text-transform: uppercase;
    }

    .method-get {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .method-post {
      background: rgba(59, 130, 246, 0.2);
      color: #3b82f6;
    }

    .method-put {
      background: rgba(245, 158, 11, 0.2);
      color: #f59e0b;
    }

    .method-delete {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .endpoint-path-explorer {
      flex: 1;
      color: #e0e6ed;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.9rem;
    }

    .expand-btn {
      background: none;
      border: none;
      color: #a0a9b8;
      cursor: pointer;
      font-size: 1rem;
      transition: all 0.2s ease;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
    }

    .expand-btn:hover {
      background: rgba(64, 224, 208, 0.1);
      color: #40e0d0;
    }

    .endpoint-details-explorer {
      padding: 1rem 1.5rem 1.5rem;
      background: rgba(255, 255, 255, 0.02);
      border-top: 1px solid rgba(255, 255, 255, 0.05);
    }

    .endpoint-description {
      color: #a0a9b8;
      margin-bottom: 1rem;
      line-height: 1.5;
    }

    .params-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .param-item {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.5rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 6px;
    }

    .param-name {
      color: #40e0d0;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.85rem;
    }

    .param-type {
      color: #a0a9b8;
      font-size: 0.8rem;
      background: rgba(255, 255, 255, 0.1);
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
    }

    .param-required {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-weight: 600;
    }

    .param-required.required {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .param-required.optional {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .endpoint-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: 1rem;
    }

    .test-endpoint-btn,
    .copy-endpoint-btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .test-endpoint-btn {
      background: linear-gradient(135deg, #22c55e, #16a34a);
      color: white;
    }

    .test-endpoint-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
    }

    .copy-endpoint-btn {
      background: rgba(64, 224, 208, 0.1);
      color: #40e0d0;
    }

    .copy-endpoint-btn:hover {
      background: #40e0d0;
      color: #0a0e27;
    }

    /* Webhooks */
    .webhooks-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .webhook-card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
      text-align: center;
      transition: all 0.3s ease;
    }

    .webhook-card:hover {
      transform: translateY(-5px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .webhook-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    .webhook-events {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: center;
      margin-top: 1rem;
    }

    .event-tag {
      background: rgba(255, 215, 0, 0.1);
      color: #ffd700;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .webhook-features {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .webhook-features .feature {
      background: rgba(34, 197, 94, 0.1);
      color: #22c55e;
      padding: 0.5rem;
      border-radius: 6px;
      font-size: 0.85rem;
      text-align: center;
    }

    .webhook-metrics {
      margin-top: 1rem;
    }

    .webhook-metrics .metric {
      color: #40e0d0;
      font-size: 0.9rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }

    /* Rate Limits */
    .rate-limits {
      margin-top: 2rem;
    }

    .tier-comparison {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .tier-card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
      text-align: center;
      transition: all 0.3s ease;
    }

    .tier-card.bronze {
      border-color: rgba(180, 83, 9, 0.3);
    }

    .tier-card.bronze:hover {
      border-color: #b45309;
      box-shadow: 0 8px 25px rgba(180, 83, 9, 0.2);
    }

    .tier-card.silver {
      border-color: rgba(107, 114, 128, 0.3);
    }

    .tier-card.silver:hover {
      border-color: #6b7280;
      box-shadow: 0 8px 25px rgba(107, 114, 128, 0.2);
    }

    .tier-card.gold {
      border-color: rgba(255, 215, 0, 0.3);
    }

    .tier-card.gold:hover {
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .tier-header h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
      font-size: 1.2rem;
    }

    .tier-price {
      color: #40e0d0;
      font-size: 1.1rem;
      font-weight: 700;
    }

    .tier-limits {
      margin-top: 1rem;
    }

    .limit-item {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .rate-limit-info {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(64, 224, 208, 0.2);
    }

    .rate-limit-info h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .headers-table {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .header-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.03);
      border-radius: 8px;
    }

    .header-row code {
      color: #40e0d0;
      font-family: 'Monaco', 'Menlo', monospace;
      font-weight: 600;
    }

    .header-row span {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    /* Support & Community */
    .support-resources {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .support-card {
      background: rgba(255, 255, 255, 0.08);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 107, 53, 0.3);
      text-align: center;
      transition: all 0.3s ease;
    }

    .support-card:hover {
      transform: translateY(-5px);
      border-color: #ff6b35;
      box-shadow: 0 8px 25px rgba(255, 107, 53, 0.2);
    }

    .support-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .support-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
      font-size: 1.1rem;
    }

    .support-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .support-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      color: #ff6b35;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .support-link:hover {
      color: #dc2626;
      transform: translateX(2px);
    }
  `;
}

function getApiDocumentationScripts(): string {
  return `
    // API Documentation - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiDocumentation();
    });

    function initializeApiDocumentation() {
      startDocsUpdates();
      setupDocsListeners();
      initializeApiExplorer();
      initializeEndpointToggler();
      setupSearchAndFilter();
    }

    function startDocsUpdates() {
      setInterval(() => {
        updateDocsTimestamp();
      }, 1000);
    }

    function updateDocsTimestamp() {
      const element = document.getElementById('docsLastUpdate');
      if (element) {
        element.textContent = new Date().toLocaleTimeString();
      }
    }

    function setupDocsListeners() {
      // Auth tab switching
      document.querySelectorAll('.auth-tab').forEach(tab => {
        tab.addEventListener('click', function() {
          switchAuthTab(this.textContent.toLowerCase().replace(' ', ''));
        });
      });

      // Copy buttons
      document.querySelectorAll('.copy-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          copyToClipboard(this);
        });
      });
    }

    function switchAuthTab(tab) {
      // Remove active class from all tabs
      document.querySelectorAll('.auth-tab').forEach(t => {
        t.classList.remove('active');
      });
      document.querySelectorAll('.auth-content').forEach(c => {
        c.classList.remove('active');
      });

      // Add active class to selected tab and content
      document.querySelector(\`[onclick="switchAuthTab('\${tab}')"]\`).classList.add('active');
      document.getElementById(tab + '-auth').classList.add('active');
    }

    function copyToClipboard(button) {
      const codeBlock = button.previousElementSibling;
      const code = codeBlock.textContent || codeBlock.innerText;

      navigator.clipboard.writeText(code).then(() => {
        const originalText = button.textContent;
        button.textContent = '‚úÖ Copied!';
        button.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';

        setTimeout(() => {
          button.textContent = originalText;
          button.style.background = '';
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy: ', err);
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = code;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);

        const originalText = button.textContent;
        button.textContent = '‚úÖ Copied!';
        button.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';

        setTimeout(() => {
          button.textContent = originalText;
          button.style.background = '';
        }, 2000);
      });
    }

    function executeTest() {
      const method = document.getElementById('test-method').value;
      const endpoint = document.getElementById('test-endpoint').value;
      const body = document.getElementById('test-body').value;
      const headers = document.getElementById('test-headers').value;

      const output = document.getElementById('test-output');

      // Simulate API call
      output.innerHTML = '<p>üîÑ Sending request...</p>';

      setTimeout(() => {
        const mockResponse = {
          status: '200 OK',
          responseTime: '142ms',
          headers: {
            'content-type': 'application/json',
            'x-api-version': '2.0',
            'x-request-id': 'req_' + Math.random().toString(36).substring(2, 15)
          },
          body: {
            success: true,
            data: {
              message: 'Test request successful',
              timestamp: new Date().toISOString(),
              endpoint: endpoint,
              method: method
            }
          }
        };

        output.innerHTML = \`
          <div style="font-family: monospace; font-size: 0.9rem;">
            <div style="color: #22c55e; margin-bottom: 0.5rem;">‚úÖ \${mockResponse.status}</div>
            <div style="color: #a0a9b8; margin-bottom: 1rem;">Response Time: \${mockResponse.responseTime}</div>

            <div style="margin-bottom: 1rem;">
              <strong style="color: #e0e6ed;">Headers:</strong>
              <pre style="background: rgba(0, 0, 0, 0.3); padding: 0.5rem; border-radius: 4px; margin-top: 0.5rem; color: #40e0d0;">\${JSON.stringify(mockResponse.headers, null, 2)}</pre>
            </div>

            <div>
              <strong style="color: #e0e6ed;">Response Body:</strong>
              <pre style="background: rgba(0, 0, 0, 0.3); padding: 0.5rem; border-radius: 4px; margin-top: 0.5rem; color: #40e0d0;">\${JSON.stringify(mockResponse.body, null, 2)}</pre>
            </div>
          </div>
        \`;
      }, 1500);
    }

    // Global functions for button onclick handlers
    function copyWebhookPayload(button) {
      const payload = button.previousElementSibling.textContent;
      navigator.clipboard.writeText(payload).then(() => {
        const originalText = button.textContent;
        button.textContent = '‚úÖ Copied!';
        button.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';

        setTimeout(() => {
          button.textContent = originalText;
          button.style.background = '';
        }, 2000);
      });
    }

    function deployTemplate(templateName) {
      showNotification('üöÄ Deploying ' + templateName + ' template...', 'info');

      setTimeout(() => {
        showNotification('‚úÖ ' + templateName + ' template deployed successfully! Integration is now active.', 'success');

        // Update template button status
        const buttons = document.querySelectorAll('.template-btn');
        buttons.forEach(btn => {
          if (btn.onclick.toString().includes(templateName)) {
            btn.textContent = '‚úÖ Deployed';
            btn.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';
            btn.disabled = true;
          }
        });
      }, 3000);
    }

    function showNotification(message, type) {
      if (type === undefined) type = 'info';

      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification ' + type;
      notification.innerHTML = '<div class="notification-content"><span class="notification-icon">' +
        (type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è') +
        '</span><span class="notification-message">' + message + '</span></div><button class="notification-close" onclick="this.parentElement.remove()">√ó</button>';

      // Style the notification
      const backgroundColor = type === 'success' ? 'linear-gradient(135deg, #22c55e, #16a34a)' :
                             type === 'error' ? 'linear-gradient(135deg, #ef4444, #dc2626)' :
                             'linear-gradient(135deg, #3b82f6, #1d4ed8)';

      notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: ' + backgroundColor +
        '; color: white; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3); z-index: 10000; max-width: 400px; font-weight: 600; animation: slideInRight 0.3s ease-out;';

      // Add to page
      document.body.appendChild(notification);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.style.animation = 'slideOutRight 0.3s ease-in';
          setTimeout(() => notification.remove(), 300);
        }
      }, 5000);
    }

    // Enhanced API Gateway Functions
    function initializeGatewayDashboard() {
      // Add click handlers for overview cards
      document.querySelectorAll('.overview-card').forEach(card => {
        card.addEventListener('click', function() {
          const metricLabel = this.querySelector('.metric-label').textContent;
          showMetricDetails(metricLabel);
        });
      });

      // Refresh metrics button
      const refreshBtn = document.querySelector('.refresh-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', function() {
          refreshGatewayMetrics();
        });
      }
    }

    function refreshGatewayMetrics() {
      showNotification('üîÑ Refreshing gateway metrics...', 'info');

      // Simulate refresh with animations
      document.querySelectorAll('.overview-card').forEach(card => {
        card.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => {
          card.style.animation = '';
        }, 500);
      });

      setTimeout(() => {
        showNotification('‚úÖ Gateway metrics refreshed!', 'success');
      }, 1000);
    }

    function showMetricDetails(metricLabel) {
      const details = {
        'Total Routes': '247 routes configured across multiple services',
        'Active Connections': '1,234 concurrent connections being handled',
        'Requests/Min': '2,847 requests processed per minute',
        'Avg Latency': '142ms average response time across all endpoints'
      };

      alert('üìä ' + metricLabel + ' Details\n\n' + (details[metricLabel] || 'Detailed metric information'));
    }

    function initializeTrafficVisualization() {
      // Traffic view buttons
      document.querySelectorAll('.viz-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.viz-btn').forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');

          const viewType = this.textContent.toLowerCase();
          setTrafficView(viewType);
        });
      });
    }

    function setTrafficView(viewType) {
      const chartContainer = document.querySelector('.chart-placeholder');
      if (chartContainer) {
        chartContainer.innerHTML = '<div class="chart-icon">üìà</div><div class="chart-text">Loading ' + viewType.toUpperCase() + ' data...</div><div class="loading-spinner"></div>';

        // Simulate data loading
        setTimeout(() => {
          const dataPoints = viewType === 'requests' ? ['Peak: 3,247', 'Avg: 2,847', 'Min: 1,234'] :
                           viewType === 'latency' ? ['Peak: 456ms', 'Avg: 142ms', 'Min: 89ms'] :
                           ['Peak: 23', 'Avg: 8', 'Min: 0'];

          chartContainer.innerHTML = '<div class="chart-icon">üìä</div><div class="chart-text">' + viewType.toUpperCase() + ' data loaded!</div><div class="chart-data-summary"><div class="data-point">' + dataPoints[0] + '</div><div class="data-point">' + dataPoints[1] + '</div><div class="data-point">' + dataPoints[2] + '</div></div>';
        }, 2000);
      }
    }

    function initializeRouteManagement() {
      // Route filters
      const methodFilter = document.getElementById('methodFilter');
      const routeSearch = document.getElementById('routeSearch');

      if (methodFilter) {
        methodFilter.addEventListener('change', function() {
          filterRoutes(this.value, routeSearch ? routeSearch.value : '');
        });
      }

      if (routeSearch) {
        routeSearch.addEventListener('input', function() {
          filterRoutes(methodFilter ? methodFilter.value : '', this.value);
        });
      }

      // Select all checkbox
      const selectAll = document.getElementById('selectAllRoutes');
      if (selectAll) {
        selectAll.addEventListener('change', function() {
          toggleSelectAll();
        });
      }

      // Route checkboxes
      document.querySelectorAll('.route-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          updateBulkActions();
        });
      });

      // Route actions
      document.querySelectorAll('.route-actions .action-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const action = this.textContent.trim();
          const routePath = this.closest('.table-row').getAttribute('data-route');

          if (action === '‚úèÔ∏è') {
            editRoute(routePath);
          } else if (action === 'üìä') {
            viewRouteMetrics(routePath);
          } else if (action === 'üî¥' || action === 'üü¢') {
            toggleRoute(routePath);
          }
        });
      });
    }

    function filterRoutes(methodFilter, searchTerm) {
      const rows = document.querySelectorAll('.routes-table .table-row');

      rows.forEach(row => {
        const method = row.querySelector('.method-badge').textContent;
        const route = row.querySelector('.route-name').textContent;
        const matchesMethod = !methodFilter || method === methodFilter;
        const matchesSearch = !searchTerm || route.toLowerCase().includes(searchTerm.toLowerCase());

        row.style.display = matchesMethod && matchesSearch ? 'grid' : 'none';
      });

      updateRouteCount();
    }

    function toggleSelectAll() {
      const selectAll = document.getElementById('selectAllRoutes');
      const checkboxes = document.querySelectorAll('.route-checkbox');

      checkboxes.forEach(checkbox => {
        checkbox.checked = selectAll.checked;
      });

      updateBulkActions();
    }

    function updateBulkActions() {
      const selectedCount = document.querySelectorAll('.route-checkbox:checked').length;
      const bulkActions = document.querySelector('.bulk-actions');

      if (bulkActions) {
        bulkActions.style.display = selectedCount > 0 ? 'flex' : 'none';
        if (selectedCount > 0) {
          bulkActions.innerHTML = '<span>' + selectedCount + ' routes selected</span><button class="action-btn" onclick="bulkEnableRoutes()">Enable</button><button class="action-btn secondary" onclick="bulkDisableRoutes()">Disable</button><button class="action-btn danger" onclick="bulkDeleteRoutes()">Delete</button>';
        }
      }
    }

    function updateRouteCount() {
      const visibleRows = document.querySelectorAll('.routes-table .table-row[style*="display: grid"], .routes-table .table-row:not([style])');
      const statValue = document.querySelector('.stat-value');
      if (statValue) {
        statValue.textContent = visibleRows.length;
      }
    }

    function addNewRoute() {
      showNotification('‚ûï Opening route creation wizard...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Route creation wizard ready!', 'success');
      }, 1000);
    }

    function bulkRouteActions() {
      showNotification('‚öôÔ∏è Opening bulk actions panel...', 'info');
    }

    function editRoute(routePath) {
      showNotification('‚úèÔ∏è Opening route editor for ' + routePath, 'info');

      // Show configuration panel
      const panel = document.getElementById('routeConfigPanel');
      const content = document.getElementById('configContent');

      if (panel && content) {
        content.innerHTML = '<div style="text-align: center; padding: 2rem;"><div style="font-size: 2rem; margin-bottom: 1rem;">üîß</div><h4>Route Configuration</h4><p>Editing: ' + routePath + '</p><div style="display: grid; gap: 1rem; margin-top: 2rem;"><input type="text" placeholder="Route Path" value="' + routePath + '" style="padding: 0.5rem; border-radius: 8px; border: 1px solid rgba(64, 224, 208, 0.3); background: rgba(255, 255, 255, 0.05); color: #e0e6ed;"><select style="padding: 0.5rem; border-radius: 8px; border: 1px solid rgba(64, 224, 208, 0.3); background: rgba(255, 255, 255, 0.05); color: #e0e6ed;"><option>GET</option><option>POST</option><option>PUT</option><option>DELETE</option></select><input type="text" placeholder="Target Service" value="Client Service" style="padding: 0.5rem; border-radius: 8px; border: 1px solid rgba(64, 224, 208, 0.3); background: rgba(255, 255, 255, 0.05); color: #e0e6ed;"><div style="display: flex; gap: 1rem; margin-top: 1rem;"><button class="action-btn primary" onclick="saveRouteConfig()">Save Changes</button><button class="action-btn secondary" onclick="closeRouteConfig()">Cancel</button></div></div></div>';
        panel.style.display = 'block';
      }
    }

    function viewRouteMetrics(routePath) {
      showNotification('üìä Loading metrics for ' + routePath, 'info');
      setTimeout(() => {
        showNotification('‚úÖ Route metrics loaded!', 'success');
      }, 1500);
    }

    function toggleRoute(routePath) {
      const btn = event.target;
      const isEnabled = btn.textContent === 'üî¥';

      btn.textContent = isEnabled ? 'üü¢' : 'üî¥';
      btn.className = 'action-btn small ' + (isEnabled ? 'secondary' : 'danger');

      showNotification(isEnabled ? 'üî¥ Route disabled: ' + routePath : 'üü¢ Route enabled: ' + routePath, isEnabled ? 'warning' : 'success');
    }

    function saveRouteConfig() {
      showNotification('üíæ Saving route configuration...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Route configuration saved!', 'success');
        closeRouteConfig();
      }, 1000);
    }

    function closeRouteConfig() {
      const panel = document.getElementById('routeConfigPanel');
      if (panel) {
        panel.style.display = 'none';
      }
    }

    function bulkEnableRoutes() {
      const selectedCount = document.querySelectorAll('.route-checkbox:checked').length;
      showNotification('üü¢ Enabling ' + selectedCount + ' routes...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ ' + selectedCount + ' routes enabled!', 'success');
        document.querySelectorAll('.route-checkbox:checked').forEach(cb => cb.checked = false);
        updateBulkActions();
      }, 1000);
    }

    function bulkDisableRoutes() {
      const selectedCount = document.querySelectorAll('.route-checkbox:checked').length;
      showNotification('üî¥ Disabling ' + selectedCount + ' routes...', 'warning');
      setTimeout(() => {
        showNotification('‚úÖ ' + selectedCount + ' routes disabled!', 'success');
        document.querySelectorAll('.route-checkbox:checked').forEach(cb => cb.checked = false);
        updateBulkActions();
      }, 1000);
    }

    function bulkDeleteRoutes() {
      const selectedCount = document.querySelectorAll('.route-checkbox:checked').length;
      if (confirm('Are you sure you want to delete ' + selectedCount + ' routes? This action cannot be undone.')) {
        showNotification('üóëÔ∏è Deleting ' + selectedCount + ' routes...', 'warning');
        setTimeout(() => {
          showNotification('‚úÖ ' + selectedCount + ' routes deleted!', 'success');
          document.querySelectorAll('.route-checkbox:checked').forEach(cb => {
            cb.closest('.table-row').remove();
          });
          updateBulkActions();
        }, 1000);
      }
    }

    function initializeRateLimiting() {
      // Rate limit card interactions
      document.querySelectorAll('.rate-limit-card').forEach(card => {
        card.addEventListener('click', function() {
          const endpoint = this.querySelector('h3').textContent;
          showRateLimitDetails(endpoint);
        });
      });

      // Rate limit actions
      document.querySelectorAll('.rate-limit-actions .action-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const action = this.textContent.toLowerCase();
          const endpoint = this.closest('.rate-limit-card').querySelector('h3').textContent;

          if (action === 'adjust') {
            adjustLimit(endpoint);
          } else if (action === 'history') {
            viewLimitHistory(endpoint);
          }
        });
      });
    }

    function showRateLimitDetails(endpoint) {
      showNotification('üìä Loading rate limit details for ' + endpoint, 'info');
      setTimeout(() => {
        showNotification('‚úÖ Rate limit details loaded!', 'success');
      }, 1000);
    }

    function adjustLimit(endpoint) {
      showNotification('‚öôÔ∏è Opening rate limit configuration for ' + endpoint, 'info');
      setTimeout(() => {
        showNotification('‚úÖ Rate limit configuration ready!', 'success');
      }, 1000);
    }

    function viewLimitHistory(endpoint) {
      showNotification('üìà Loading rate limit history for ' + endpoint, 'info');
      setTimeout(() => {
        showNotification('‚úÖ Rate limit history loaded!', 'success');
      }, 1000);
    }

    // Enhanced API Monitoring Functions
    function initializeMonitoringDashboard() {
      // Add click handlers for monitoring cards
      document.querySelectorAll('.monitoring-card').forEach(card => {
        card.addEventListener('click', function() {
          const metricLabel = this.querySelector('.monitoring-label').textContent;
          showMetricTrend(metricLabel);
        });
      });

      // Refresh button
      const refreshBtn = document.querySelector('.refresh-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', function() {
          refreshMonitoring();
        });
      }

      // Time range selector
      const timeRangeSelect = document.getElementById('monitoringTimeRange');
      if (timeRangeSelect) {
        timeRangeSelect.addEventListener('change', function() {
          changeTimeRange();
        });
      }
    }

    function refreshMonitoring() {
      showNotification('üîÑ Refreshing monitoring data...', 'info');

      // Simulate refresh with animations
      document.querySelectorAll('.monitoring-card').forEach(card => {
        card.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => {
          card.style.animation = '';
        }, 500);
      });

      setTimeout(() => {
        showNotification('‚úÖ Monitoring data refreshed!', 'success');
      }, 1000);
    }

    function changeTimeRange() {
      const timeRange = document.getElementById('monitoringTimeRange').value;
      showNotification('üìÖ Switching to ' + timeRange.toUpperCase() + ' view...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Time range updated!', 'success');
      }, 500);
    }

    function showMetricTrend(metricLabel) {
      const trends = {
        'Active Alerts': '0 active alerts, trending downward',
        'Response Time': '142ms average, stable performance',
        'Throughput': '47.2K requests/min, high traffic',
        'Error Rate': '0.1% error rate, excellent reliability'
      };

      alert('üìä ' + metricLabel + ' Trend Analysis\n\n' + (trends[metricLabel] || 'Detailed metric trend information'));
    }

    function initializePerformanceChart() {
      // Chart metric buttons
      document.querySelectorAll('.chart-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.chart-btn').forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');

          const metric = this.textContent.toLowerCase();
          setChartMetric(metric);
        });
      });
    }

    function setChartMetric(metric) {
      const chartContainer = document.querySelector('.chart-loading');
      if (chartContainer) {
        chartContainer.innerHTML = '<div class="loading-icon">üìà</div><div class="loading-text">Loading ' + metric.toUpperCase() + ' data...</div><div class="loading-spinner"></div>';

        // Simulate data loading
        setTimeout(() => {
          const metrics = {
            'response': ['Peak: 245ms', 'Avg: 142ms', 'Min: 89ms'],
            'throughput': ['Peak: 52.1K', 'Avg: 47.2K', 'Min: 23.4K'],
            'errors': ['Peak: 0.3%', 'Avg: 0.1%', 'Min: 0.0%'],
            'alerts': ['Peak: 3', 'Avg: 0', 'Min: 0']
          };

          const data = metrics[metric] || ['Data not available'];
          chartContainer.innerHTML = '<div class="loading-icon">üìä</div><div class="loading-text">' + metric.toUpperCase() + ' chart loaded!</div><div class="chart-data-summary"><div class="data-point">' + data[0] + '</div><div class="data-point">' + data[1] + '</div><div class="data-point">' + data[2] + '</div></div>';
        }, 2000);
      }
    }

    function initializeAlertManagement() {
      // Alert summary cards
      document.querySelectorAll('.alert-summary-card').forEach(card => {
        card.addEventListener('click', function() {
          const cardType = this.classList.contains('critical') ? 'active' :
                          this.classList.contains('resolved') ? 'resolved' :
                          this.classList.contains('weekly') ? 'weekly' : 'rules';
          const actions = {
            'critical': viewActiveAlerts,
            'resolved': viewResolvedAlerts,
            'weekly': viewWeeklyAlerts,
            'rules': manageAlertRules
          };
          actions[cardType]();
        });
      });

      // Alert filters
      const typeFilter = document.getElementById('alertTypeFilter');
      const timeFilter = document.getElementById('alertTimeFilter');

      if (typeFilter) {
        typeFilter.addEventListener('change', function() {
          filterAlerts();
        });
      }

      if (timeFilter) {
        timeFilter.addEventListener('change', function() {
          filterAlerts();
        });
      }

      // Timeline controls
      document.querySelectorAll('.timeline-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.timeline-btn').forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');

          const view = this.textContent.toLowerCase();
          setTimelineView(view);
        });
      });

      // Alert action buttons
      document.querySelectorAll('.alert-action-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const action = this.textContent.trim().toLowerCase();
          const alertMessage = this.closest('.alert-card').querySelector('.alert-message').textContent;

          if (action === 'view') {
            viewAlertDetails(alertMessage);
          } else if (action === 'ack') {
            acknowledgeAlert(alertMessage);
          } else if (action === 'escalate') {
            escalateAlert(alertMessage);
          }
        });
      });
    }

    function filterAlerts() {
      const typeFilter = document.getElementById('alertTypeFilter').value;
      const timeFilter = document.getElementById('alertTimeFilter').value;

      const alerts = document.querySelectorAll('.timeline-item');
      alerts.forEach(alert => {
        const alertType = alert.classList.contains('error') ? 'error' :
                         alert.classList.contains('warning') ? 'warning' :
                         alert.classList.contains('success') ? 'success' : 'info';

        const matchesType = !typeFilter || alertType === typeFilter;
        // Time filtering logic would go here in a real implementation

        alert.style.display = matchesType ? 'flex' : 'none';
      });

      showNotification('üîç Alerts filtered successfully!', 'success');
    }

    function setTimelineView(view) {
      const alerts = document.querySelectorAll('.timeline-item');
      alerts.forEach(alert => {
        const alertType = alert.classList.contains('error') ? 'critical' :
                         alert.classList.contains('warning') ? 'warnings' :
                         alert.classList.contains('success') ? 'resolved' : 'all';

        const showAlert = view === 'all' ||
                         (view === 'critical' && alertType === 'critical') ||
                         (view === 'warnings' && alertType === 'warnings') ||
                         (view === 'resolved' && alertType === 'resolved');

        alert.style.display = showAlert ? 'flex' : 'none';
      });

      showNotification('üìÖ Timeline view updated to ' + view.toUpperCase(), 'info');
    }

    function viewActiveAlerts() {
      showNotification('üö® Viewing active alerts...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Active alerts dashboard loaded!', 'success');
      }, 1000);
    }

    function viewResolvedAlerts() {
      showNotification('‚úÖ Viewing resolved alerts...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Resolved alerts history loaded!', 'success');
      }, 1000);
    }

    function viewWeeklyAlerts() {
      showNotification('üìä Viewing weekly alert trends...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Weekly analytics loaded!', 'success');
      }, 1000);
    }

    function manageAlertRules() {
      showNotification('‚öôÔ∏è Opening alert rules management...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Alert rules panel loaded!', 'success');
      }, 1000);
    }

    function createNewAlertRule() {
      showNotification('‚ûï Opening alert rule creation wizard...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Alert rule wizard ready!', 'success');
      }, 1000);
    }

    function manageAlertChannels() {
      showNotification('üì± Opening notification channels...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ Notification channels loaded!', 'success');
      }, 1000);
    }

    function viewAlertDetails(message) {
      alert('üìã Alert Details\n\n' + message + '\n\nStatus: Active\nPriority: High\nSource: API Gateway\nFirst Seen: 2 hours ago\nOccurrences: 3');
    }

    function acknowledgeAlert(message) {
      showNotification('‚úÖ Alert acknowledged!', 'success');
    }

    function escalateAlert(message) {
      showNotification('üö® Alert escalated to on-call engineer!', 'warning');
      setTimeout(() => {
        showNotification('üìû On-call engineer notified!', 'success');
      }, 1000);
    }

    // Utility function for notifications
    function showNotification(message, type) {
      if (type === undefined) type = 'info';

      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification ' + type;
      notification.innerHTML = '<div class="notification-content"><span class="notification-icon">' +
        (type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è') +
        '</span><span class="notification-message">' + message + '</span></div><button class="notification-close" onclick="this.parentElement.remove()">√ó</button>';

      // Style the notification
      const backgroundColor = type === 'success' ? 'linear-gradient(135deg, #22c55e, #16a34a)' :
                             type === 'error' ? 'linear-gradient(135deg, #ef4444, #dc2626)' :
                             type === 'warning' ? 'linear-gradient(135deg, #f59e0b, #f97316)' :
                             'linear-gradient(135deg, #3b82f6, #1d4ed8)';

      notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: ' + backgroundColor +
        '; color: white; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3); z-index: 10000; max-width: 400px; font-weight: 600; animation: slideInRight 0.3s ease-out;';

      // Add to page
      document.body.appendChild(notification);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.style.animation = 'slideOutRight 0.3s ease-in';
          setTimeout(() => notification.remove(), 300);
        }
      }, 5000);
    }

    // Add CSS animations for notifications
    const notificationStyles = \`
      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    \`;

    // Inject notification styles
    const styleSheet = document.createElement('style');
    styleSheet.textContent = notificationStyles;
    document.head.appendChild(styleSheet);
  `;
}

function getApiDeveloperScripts(): string {
  return `
    // API Developer Portal - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiDeveloper();
    });

    function initializeApiDeveloper() {
      startDevUpdates();
      setupDevListeners();
    }

    function startDevUpdates() {
      setInterval(() => {
        updateDevTimestamp();
      }, 1000);
    }

    function updateDevTimestamp() {
      const element = document.getElementById('devLastUpdate');
      if (element) {
        element.textContent = new Date().toLocaleTimeString();
      }
    }

    function setupDevListeners() {
      // Copy webhook payload buttons
      document.querySelectorAll('.copy-payload-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          copyWebhookPayload(this);
        });
      });
    }

    // Global functions for button onclick handlers
    function viewKeyUsage(keyType) {
      alert(\`üîç API Key Usage: \${keyType.toUpperCase()} Key\\\\n\\\\nüìä Usage Statistics:\\\\n‚Ä¢ Requests Today: 15.2K\\\\n‚Ä¢ Success Rate: 99.9%\\\\n‚Ä¢ Average Response: 142ms\\\\n‚Ä¢ Error Rate: 0.1%\\\\n\\\\nüìà Usage Trends:\\\\n‚Ä¢ Peak Hour: 8:00 PM\\\\n‚Ä¢ Daily Growth: +8.3%\\\\n‚Ä¢ Geographic Spread: 67 countries\\\\n\\\\nüîß Rate Limits:\\\\n‚Ä¢ Current Usage: 23%\\\\n‚Ä¢ Limit: 1000/min\\\\n‚Ä¢ Remaining: 770/min\\\\n‚Ä¢ Reset Time: Next minute\\\\n\\\\nüìã Popular Endpoints:\\\\n‚Ä¢ /api/v2/clients (45%)\\\\n‚Ä¢ /api/v2/bets (32%)\\\\n‚Ä¢ /api/v2/analytics (23%)\\\\n\\\\n‚ö†Ô∏è Recommendations:\\\\n‚Ä¢ Monitor peak usage hours\\\\n‚Ä¢ Consider upgrading limits\\\\n‚Ä¢ Implement caching strategies\`);
    }

    function regenerateKey(keyType) {
      const newKey = 'sk_' + keyType + '_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);

      if (confirm(\`üîÑ Regenerate \${keyType.toUpperCase()} API Key?\\\\n\\\\n‚ö†Ô∏è Warning: This will invalidate the current key immediately.\\\\n\\\\n‚Ä¢ All requests using the old key will fail\\\\n‚Ä¢ You must update your applications\\\\n‚Ä¢ Old key cannot be recovered\\\\n\\\\nNew Key: \${newKey}\\\\n\\\\nAre you sure you want to proceed?\`)) {
        alert(\`‚úÖ API Key Regenerated!\\\\n\\\\nüîê New \${keyType.toUpperCase()} Key:\\\\n\${newKey}\\\\n\\\\n‚ö†Ô∏è Important Actions Required:\\\\n\\\\n1. Update all applications\\\\n2. Test with new key\\\\n3. Monitor for failures\\\\n4. Delete old key after migration\\\\n\\\\nüìß Notification Sent:\\\\n‚Ä¢ Email sent to team\\\\n‚Ä¢ Slack notification posted\\\\n‚Ä¢ Documentation updated\\\\n\\\\n‚è∞ Migration Deadline:\\\\n‚Ä¢ 7 days to update applications\\\\n‚Ä¢ Old key expires: \${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()}\\\\n\\\\nüîß Rollback Option:\\\\n‚Ä¢ Contact support to restore old key\\\\n‚Ä¢ Emergency key available\\\\n\\\\n‚úÖ Key rotation initiated successfully\`);
      }
    }

    function createNewKey() {
      const keyTypes = ['Production', 'Development', 'Testing'];
      const selectedType = prompt(\`Create New API Key\\\\n\\\\nSelect Key Type:\\\\n\${keyTypes.map((type, i) => \`\${i + 1}. \${type}\`).join('\\\\n')}\\\\n\\\\nEnter number (1-3):\`);

      if (selectedType && ['1', '2', '3'].includes(selectedType)) {
        const type = keyTypes[parseInt(selectedType) - 1].toLowerCase();
        const newKey = 'sk_' + type + '_' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);

        alert(\`‚úÖ New API Key Created!\\\\n\\\\nüîê Key Details:\\\\n‚Ä¢ Type: \${type.charAt(0).toUpperCase() + type.slice(1)}\\\\n‚Ä¢ Key: \${newKey}\\\\n‚Ä¢ Created: \${new Date().toLocaleString()}\\\\n‚Ä¢ Expires: Never\\\\n‚Ä¢ Rate Limit: 1000/min\\\\n\\\\nüìã Permissions:\\\\n‚Ä¢ Read access: ‚úÖ\\\\n‚Ä¢ Write access: ‚úÖ\\\\n‚Ä¢ Delete access: ‚úÖ\\\\n‚Ä¢ Admin access: ‚ùå\\\\n\\\\nüîí Security Features:\\\\n‚Ä¢ Encrypted storage\\\\n‚Ä¢ Audit logging\\\\n‚Ä¢ IP restrictions: None\\\\n‚Ä¢ MFA required: Yes\\\\n\\\\nüìß Notifications:\\\\n‚Ä¢ Email sent to: your@email.com\\\\n‚Ä¢ Slack channel: #api-keys\\\\n‚Ä¢ Documentation: Updated\\\\n\\\\n‚ö†Ô∏è Important:\\\\n‚Ä¢ Keep this key secure\\\\n‚Ä¢ Never share in public\\\\n‚Ä¢ Rotate regularly\\\\n‚Ä¢ Monitor usage closely\\\\n\\\\n‚úÖ API key ready to use!\`);
      }
    }

    function createWebhook() {
      alert(\`üîó Create New Webhook\\\\n\\\\nü™ù Webhook Configuration Wizard\\\\n\\\\nStep 1: Basic Information\\\\n‚Ä¢ Name: My Custom Webhook\\\\n‚Ä¢ Description: Handle custom events\\\\n‚Ä¢ URL: https://api.myapp.com/webhooks\\\\n\\\\nStep 2: Event Selection\\\\n‚Ä¢ bet.placed - ‚úÖ\\\\n‚Ä¢ payment.received - ‚úÖ\\\\n‚Ä¢ client.updated - ‚úÖ\\\\n‚Ä¢ system.alert - ‚ùå\\\\n‚Ä¢ custom.event - ‚ùå\\\\n\\\\nStep 3: Authentication\\\\n‚Ä¢ Method: HMAC-SHA256\\\\n‚Ä¢ Secret: whsec_...\\\\n‚Ä¢ Headers: X-Webhook-Signature\\\\n\\\\nStep 4: Advanced Settings\\\\n‚Ä¢ Retry Policy: 3 attempts\\\\n‚Ä¢ Timeout: 30 seconds\\\\n‚Ä¢ Rate Limit: 100/min\\\\n\\\\n‚úÖ Webhook Created Successfully!\\\\n\\\\nüîó Webhook Details:\\\\n‚Ä¢ ID: wh_1234567890\\\\n‚Ä¢ Status: Active\\\\n‚Ä¢ Test Event: Sent\\\\n‚Ä¢ Monitoring: Enabled\\\\n\\\\nüìä First Event Expected:\\\\n‚Ä¢ Within next few minutes\\\\n‚Ä¢ Check logs for delivery\\\\n‚Ä¢ Monitor application logs\`);
    }

    function testWebhook(webhookType) {
      alert(\`üß™ Testing Webhook: \${webhookType}\\\\n\\\\nüîÑ Sending Test Event...\\\\n\\\\nüì° Test Payload Sent:\\\\n{\\\\n  "event": "test.webhook",\\\\n  "data": {\\\\n    "message": "This is a test webhook",\\\\n    "timestamp": "\${new Date().toISOString()}",\\\\n    "webhook_type": "\${webhookType}"\\\\n  }\\\\n}\\\\n\\\\nüìä Response Details:\\\\n‚Ä¢ Status Code: 200 OK\\\\n‚Ä¢ Response Time: 234ms\\\\n‚Ä¢ Content-Type: application/json\\\\n‚Ä¢ Server: nginx/1.18.0\\\\n\\\\n‚úÖ Webhook Test Successful!\\\\n\\\\nüìã Test Results:\\\\n‚Ä¢ Delivery: ‚úÖ Success\\\\n‚Ä¢ Authentication: ‚úÖ Valid\\\\n‚Ä¢ Processing: ‚úÖ Complete\\\\n‚Ä¢ Logging: ‚úÖ Recorded\\\\n\\\\nüîç Check your application logs for:\\\\n‚Ä¢ Incoming webhook request\\\\n‚Ä¢ Payload processing\\\\n‚Ä¢ Response handling\\\\n‚Ä¢ Error handling\\\\n\\\\n‚ö†Ô∏è Next Steps:\\\\n‚Ä¢ Verify payload structure\\\\n‚Ä¢ Test error scenarios\\\\n‚Ä¢ Monitor production usage\\\\n‚Ä¢ Set up alerting\`);
    }

    function editWebhook(webhookType) {
      alert(\`‚úèÔ∏è Edit Webhook: \${webhookType}\\\\n\\\\nüîß Current Configuration:\\\\n‚Ä¢ URL: https://api.client.com/webhooks\\\\n‚Ä¢ Events: bet.placed, payment.received\\\\n‚Ä¢ Secret: whsec_************\\\\n‚Ä¢ Retry: 3 attempts\\\\n‚Ä¢ Timeout: 30s\\\\n\\\\nüìù Edit Options:\\\\n\\\\n1. Change webhook URL\\\\n2. Add/remove events\\\\n3. Update authentication\\\\n4. Modify retry policy\\\\n5. Adjust timeout settings\\\\n6. Configure headers\\\\n\\\\nEnter your choice (1-6): \\\\n\\\\n‚ö†Ô∏è Note: Changes take effect immediately\\\\n\\\\n‚úÖ Configuration updated successfully!\\\\n\\\\nüîÑ Changes Applied:\\\\n‚Ä¢ New URL: https://api.newclient.com/webhooks\\\\n‚Ä¢ Added Events: client.created\\\\n‚Ä¢ Retry Policy: 5 attempts\\\\n‚Ä¢ Timeout: 60 seconds\\\\n\\\\nüìß Notifications Sent:\\\\n‚Ä¢ Team notified of changes\\\\n‚Ä¢ Test webhook sent\\\\n‚Ä¢ Documentation updated\\\\n\\\\nüß™ Test Required:\\\\n‚Ä¢ Send test event\\\\n‚Ä¢ Verify delivery\\\\n‚Ä¢ Check application logs\\\\n‚Ä¢ Monitor for errors\`);
    }

    function deleteWebhook(webhookType) {
      if (confirm(\`üóëÔ∏è Delete Webhook: \${webhookType}\\\\n\\\\n‚ö†Ô∏è This action cannot be undone!\\\\n\\\\nCurrent Configuration:\\\\n‚Ä¢ Events: 2 active\\\\n‚Ä¢ Delivery Rate: 99.8%\\\\n‚Ä¢ Last Event: 5 min ago\\\\n\\\\nImpact Assessment:\\\\n‚Ä¢ Events will stop\\\\n‚Ä¢ Applications may break\\\\n‚Ä¢ Data may be lost\\\\n\\\\nAre you sure you want to delete this webhook?\`)) {
        alert(\`‚úÖ Webhook Deleted Successfully!\\\\n\\\\nüóëÔ∏è Deletion Summary:\\\\n‚Ä¢ Webhook: \${webhookType} removed\\\\n‚Ä¢ Events: Unsubscribed\\\\n‚Ä¢ Configuration: Cleaned up\\\\n‚Ä¢ Logs: Archived\\\\n\\\\nüìß Notifications:\\\\n‚Ä¢ Team notified\\\\n‚Ä¢ Applications alerted\\\\n‚Ä¢ Documentation updated\\\\n\\\\n‚ö†Ô∏è Immediate Actions Required:\\\\n\\\\n1. Update applications\\\\n2. Remove webhook code\\\\n3. Test alternative methods\\\\n4. Monitor for issues\\\\n\\\\nüîÑ Recovery Options:\\\\n‚Ä¢ Recreate webhook\\\\n‚Ä¢ Use API polling\\\\n‚Ä¢ Contact support\\\\n\\\\n‚úÖ Webhook deletion completed\`);
      }
    }

    function copyWebhookPayload(button) {
      const payload = button.previousElementSibling.textContent;
      navigator.clipboard.writeText(payload).then(() => {
        const originalText = button.textContent;
        button.textContent = '‚úÖ Copied!';
        button.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';

        setTimeout(() => {
          button.textContent = originalText;
          button.style.background = '';
        }, 2000);
      });
    }
  `;
}

function getApiIntegrationsScripts(): string {
  return `
    // API Integrations Hub - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiIntegrations();
    });

    function initializeApiIntegrations() {
      startIntegrationsUpdates();
      setupIntegrationsListeners();
    }

    function startIntegrationsUpdates() {
      setInterval(() => {
        updateIntegrationsTimestamp();
      }, 1000);
    }

    function updateIntegrationsTimestamp() {
      const element = document.getElementById('integrationsLastUpdate');
      if (element) {
        element.textContent = new Date().toLocaleTimeString();
      }
    }

    function setupIntegrationsListeners() {
      // Integration buttons
      document.querySelectorAll('.integration-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const action = this.textContent;
          const integration = this.closest('.integration-card').querySelector('.integration-name').textContent;
          handleIntegrationAction(action, integration);
        });
      });

      // Test buttons
      document.querySelectorAll('.test-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const testType = this.textContent;
          handleTestAction(testType);
        });
      });
    }

    // Global functions for button onclick handlers
    function connectIntegration(integration) {
      alert(\`üîó Connect \${integration}\\\\n\\\\nüîß Integration Setup Wizard\\\\n\\\\nStep 1: Authentication\\\\n‚Ä¢ API Key: Required\\\\n‚Ä¢ OAuth: Available\\\\n‚Ä¢ Webhook URL: Optional\\\\n\\\\nStep 2: Permissions\\\\n‚Ä¢ Read data: ‚úÖ\\\\n‚Ä¢ Write data: ‚úÖ\\\\n‚Ä¢ Delete data: ‚ùå\\\\n‚Ä¢ Admin access: ‚ùå\\\\n\\\\nStep 3: Configuration\\\\n‚Ä¢ Webhook events: bet.placed\\\\n‚Ä¢ Data mapping: Auto\\\\n‚Ä¢ Error handling: Retry\\\\n\\\\nStep 4: Testing\\\\n‚Ä¢ Connection test: ‚úÖ\\\\n‚Ä¢ Data sync: ‚úÖ\\\\n‚Ä¢ Webhook test: ‚úÖ\\\\n\\\\n‚è±Ô∏è Estimated Setup Time: 5-10 minutes\\\\n\\\\nüîÑ Connecting...\\\\n\\\\n‚úÖ Integration Connected Successfully!\\\\n\\\\nüîó Connection Details:\\\\n‚Ä¢ Status: Active\\\\n‚Ä¢ API Calls: 0 (just connected)\\\\n‚Ä¢ Last Sync: Now\\\\n‚Ä¢ Webhook: Configured\\\\n\\\\nüìä Integration Metrics:\\\\n‚Ä¢ Success Rate: 100%\\\\n‚Ä¢ Response Time: 142ms\\\\n‚Ä¢ Error Rate: 0%\\\\n\\\\nüìß Notifications:\\\\n‚Ä¢ Welcome email sent\\\\n‚Ä¢ Documentation link\\\\n‚Ä¢ Support contact info\\\\n\\\\nüéØ Next Steps:\\\\n‚Ä¢ Configure webhook events\\\\n‚Ä¢ Set up data mappings\\\\n‚Ä¢ Test with sample data\\\\n‚Ä¢ Monitor integration health\`);
    }

    function disconnectIntegration(integration) {
      if (confirm(\`üîå Disconnect \${integration}?\\\\n\\\\n‚ö†Ô∏è This will:\\\\n‚Ä¢ Stop all data sync\\\\n‚Ä¢ Disable webhooks\\\\n‚Ä¢ Remove API access\\\\n‚Ä¢ Delete stored credentials\\\\n\\\\nAre you sure you want to disconnect this integration?\`)) {
        alert(\`‚úÖ Integration Disconnected\\\\n\\\\nüîå Disconnection Summary:\\\\n‚Ä¢ Integration: \${integration} removed\\\\n‚Ä¢ API access: Revoked\\\\n‚Ä¢ Webhooks: Disabled\\\\n‚Ä¢ Data sync: Stopped\\\\n\\\\nüßπ Cleanup Actions:\\\\n‚Ä¢ Credentials deleted\\\\n‚Ä¢ Cache cleared\\\\n‚Ä¢ Logs archived\\\\n‚Ä¢ Documentation updated\\\\n\\\\nüìä Final Statistics:\\\\n‚Ä¢ Total API calls: 47,231\\\\n‚Ä¢ Success rate: 99.8%\\\\n‚Ä¢ Data transferred: 2.3GB\\\\n‚Ä¢ Active duration: 45 days\\\\n\\\\n‚ö†Ô∏è Impact on Applications:\\\\n‚Ä¢ Some features may break\\\\n‚Ä¢ Data sync will stop\\\\n‚Ä¢ Manual data entry required\\\\n\\\\nüîÑ Recovery Options:\\\\n‚Ä¢ Reconnect anytime\\\\n‚Ä¢ Export data first\\\\n‚Ä¢ Contact support\\\\n\\\\n‚úÖ Integration disconnected successfully\`);
      }
    }

    function viewEndpointDetails(endpoint) {
      alert(\`üîç Endpoint Details: \${endpoint.replace(/_/g, ' ')}\\\\n\\\\nüìä Endpoint Information:\\\\n‚Ä¢ Base URL: https://api.fantasy402.com\\\\n‚Ä¢ Authentication: JWT Required\\\\n‚Ä¢ Rate Limit: 1000/min\\\\n‚Ä¢ Response Format: JSON\\\\n\\\\nüîß Available Methods:\\\\n‚Ä¢ GET - Retrieve data\\\\n‚Ä¢ POST - Create resources\\\\n‚Ä¢ PUT - Update resources\\\\n‚Ä¢ DELETE - Remove resources\\\\n\\\\nüìã Endpoint List:\\\\n‚Ä¢ /clients - Client management\\\\n‚Ä¢ /bets - Betting operations\\\\n‚Ä¢ /analytics - Business intelligence\\\\n‚Ä¢ /payments - Payment processing\\\\n\\\\nüìä Usage Statistics:\\\\n‚Ä¢ Daily calls: 15.2K\\\\n‚Ä¢ Success rate: 99.9%\\\\n‚Ä¢ Avg response: 142ms\\\\n‚Ä¢ Error rate: 0.1%\\\\n\\\\nüîí Security Features:\\\\n‚Ä¢ SSL/TLS encryption\\\\n‚Ä¢ Request signing\\\\n‚Ä¢ IP whitelisting\\\\n‚Ä¢ Rate limiting\\\\n\\\\n‚úÖ Endpoint details loaded\`);
    }

    function createNewWebhook() {
      alert(\`‚ûï Create New Webhook\\\\n\\\\nü™ù Webhook Creation Wizard\\\\n\\\\nStep 1: Basic Setup\\\\n‚Ä¢ Name: Custom Webhook\\\\n‚Ä¢ Description: Handle events\\\\n‚Ä¢ URL: https://api.client.com/webhook\\\\n\\\\nStep 2: Event Selection\\\\n‚Ä¢ bet.placed - ‚úÖ\\\\n‚Ä¢ payment.received - ‚úÖ\\\\n‚Ä¢ client.updated - ‚úÖ\\\\n‚Ä¢ system.alert - ‚ùå\\\\n‚Ä¢ custom.event - ‚ùå\\\\n\\\\nStep 3: Security\\\\n‚Ä¢ Secret: whsec_auto_generated\\\\n‚Ä¢ Signature: HMAC-SHA256\\\\n‚Ä¢ Headers: X-Webhook-Signature\\\\n\\\\nStep 4: Advanced Options\\\\n‚Ä¢ Retry Policy: 3 attempts\\\\n‚Ä¢ Timeout: 30 seconds\\\\n‚Ä¢ Rate Limit: 100/min\\\\n‚Ä¢ Filtering: None\\\\n\\\\n‚è±Ô∏è Setup Time: ~5 minutes\\\\n\\\\nüîÑ Creating webhook...\\\\n\\\\n‚úÖ Webhook Created Successfully!\\\\n\\\\nüîó Webhook Details:\\\\n‚Ä¢ ID: wh_\${Math.random().toString(36).substring(2, 15)}\\\\n‚Ä¢ Status: Active\\\\n‚Ä¢ URL: https://api.client.com/webhook\\\\n‚Ä¢ Events: 3 configured\\\\n\\\\nüß™ Test Event Sent:\\\\n‚Ä¢ Status: Delivered\\\\n‚Ä¢ Response: 200 OK\\\\n‚Ä¢ Time: 234ms\\\\n\\\\nüìß Confirmation:\\\\n‚Ä¢ Email sent\\\\n‚Ä¢ Documentation updated\\\\n‚Ä¢ Monitoring enabled\\\\n\\\\nüéØ Next Steps:\\\\n‚Ä¢ Implement webhook handler\\\\n‚Ä¢ Test with real events\\\\n‚Ä¢ Monitor delivery logs\\\\n‚Ä¢ Set up error handling\`);
    }

    function testWebhook(webhookType) {
      alert(\`üß™ Testing Webhook: \${webhookType}\\\\n\\\\nüîÑ Sending Test Payload...\\\\n\\\\nüì° Test Event Details:\\\\n{\\\\n  "event": "test.webhook",\\\\n  "data": {\\\\n    "message": "Webhook test from Fantasy402",\\\\n    "timestamp": "\${new Date().toISOString()}",\\\\n    "webhook_type": "\${webhookType}"\\\\n  },\\\\n  "signature": "sha256=..."\\\\n}\\\\n\\\\nüìä Delivery Results:\\\\n‚Ä¢ Status: 200 OK\\\\n‚Ä¢ Response Time: 156ms\\\\n‚Ä¢ Content-Type: application/json\\\\n‚Ä¢ Server: nginx/1.18.0\\\\n\\\\n‚úÖ Webhook Test Successful!\\\\n\\\\nüîç Response Analysis:\\\\n‚Ä¢ Authentication: ‚úÖ Valid\\\\n‚Ä¢ Payload: ‚úÖ Accepted\\\\n‚Ä¢ Processing: ‚úÖ Complete\\\\n‚Ä¢ Logging: ‚úÖ Recorded\\\\n\\\\nüìã Test Summary:\\\\n‚Ä¢ Delivery time: 156ms\\\\n‚Ä¢ Network latency: 23ms\\\\n‚Ä¢ Processing time: 133ms\\\\n‚Ä¢ Total time: 156ms\\\\n\\\\n‚ö†Ô∏è Recommendations:\\\\n‚Ä¢ Monitor response times\\\\n‚Ä¢ Implement retry logic\\\\n‚Ä¢ Handle timeout scenarios\\\\n‚Ä¢ Log all webhook events\\\\n\\\\n‚úÖ Test completed successfully\`);
    }

    function editWebhook(webhookType) {
      alert(\`‚úèÔ∏è Edit Webhook: \${webhookType}\\\\n\\\\nüîß Current Configuration:\\\\n‚Ä¢ URL: https://api.client.com/webhooks\\\\n‚Ä¢ Events: bet.placed, payment.received\\\\n‚Ä¢ Secret: whsec_************\\\\n‚Ä¢ Retry: 3 attempts\\\\n‚Ä¢ Timeout: 30s\\\\n\\\\nüìù Available Modifications:\\\\n\\\\n1. Change webhook URL\\\\n2. Add/remove events\\\\n3. Update authentication secret\\\\n4. Modify retry policy\\\\n5. Adjust timeout settings\\\\n6. Configure custom headers\\\\n\\\\nEnter your choice (1-6): \\\\n\\\\nüîÑ Applying changes...\\\\n\\\\n‚úÖ Webhook Updated Successfully!\\\\n\\\\nüîß Changes Applied:\\\\n‚Ä¢ New URL: https://api.newclient.com/webhooks\\\\n‚Ä¢ Added Events: client.created\\\\n‚Ä¢ Retry Policy: 5 attempts\\\\n‚Ä¢ Timeout: 60 seconds\\\\n‚Ä¢ Custom Headers: Added\\\\n\\\\nüß™ Validation:\\\\n‚Ä¢ URL reachable: ‚úÖ\\\\n‚Ä¢ Authentication: ‚úÖ\\\\n‚Ä¢ Events valid: ‚úÖ\\\\n‚Ä¢ Configuration: ‚úÖ\\\\n\\\\nüìß Notifications:\\\\n‚Ä¢ Team notified\\\\n‚Ä¢ Test event sent\\\\n‚Ä¢ Documentation updated\\\\n\\\\n‚ö†Ô∏è Important:\\\\n‚Ä¢ Test webhook thoroughly\\\\n‚Ä¢ Monitor for failures\\\\n‚Ä¢ Update application code\\\\n‚Ä¢ Backup old configuration\`);
    }

    function deleteWebhook(webhookType) {
      if (confirm(\`üóëÔ∏è Delete Webhook: \${webhookType}\\\\n\\\\n‚ö†Ô∏è This action cannot be undone!\\\\n\\\\nCurrent Status:\\\\n‚Ä¢ Events handled: 47,231\\\\n‚Ä¢ Success rate: 99.8%\\\\n‚Ä¢ Last event: 5 min ago\\\\n‚Ä¢ Active subscriptions: 3\\\\n\\\\nImpact Assessment:\\\\n‚Ä¢ Real-time updates will stop\\\\n‚Ä¢ Applications may break\\\\n‚Ä¢ Data sync will fail\\\\n‚Ä¢ Manual intervention required\\\\n\\\\nAre you absolutely sure?\`)) {
        alert(\`‚úÖ Webhook Deleted Successfully!\\\\n\\\\nüóëÔ∏è Deletion Summary:\\\\n‚Ä¢ Webhook: \${webhookType} removed\\\\n‚Ä¢ Events: Unsubscribed (3)\\\\n‚Ä¢ URL: Deactivated\\\\n‚Ä¢ Configuration: Cleaned\\\\n\\\\nüìä Final Statistics:\\\\n‚Ä¢ Total events: 47,231\\\\n‚Ä¢ Success rate: 99.8%\\\\n‚Ä¢ Avg response: 142ms\\\\n‚Ä¢ Data transferred: 2.3GB\\\\n\\\\nüßπ Cleanup Actions:\\\\n‚Ä¢ Credentials removed\\\\n‚Ä¢ Cache cleared\\\\n‚Ä¢ Logs archived\\\\n‚Ä¢ DNS records updated\\\\n\\\\n‚ö†Ô∏è Required Actions:\\\\n\\\\n1. Update applications\\\\n2. Remove webhook handlers\\\\n3. Implement alternatives\\\\n4. Test failover systems\\\\n\\\\nüîÑ Recovery Options:\\\\n‚Ä¢ Recreate webhook\\\\n‚Ä¢ Use API polling\\\\n‚Ä¢ Contact support\\\\n‚Ä¢ Restore from backup\\\\n\\\\n‚úÖ Webhook deletion completed\`);
      }
    }

    function handleIntegrationAction(action, integration) {
      if (action === 'Connect') {
        connectIntegration(integration);
      } else if (action === 'Disconnect') {
        disconnectIntegration(integration);
      }
    }

    function handleTestAction(testType) {
      switch(testType) {
        case 'Open Tester':
          alert('üß™ Webhook Tester Opened\\\\n\\\\nüîß Test Configuration:\\\\n‚Ä¢ Endpoint URL: [Enter webhook URL]\\\\n‚Ä¢ Event Type: bet.placed\\\\n‚Ä¢ Custom Payload: Optional\\\\n‚Ä¢ Authentication: Auto\\\\n\\\\nüì° Test Payload:\\\\n{\\\\n  "event": "bet.placed",\\\\n  "data": {\\\\n    "bet_id": "bet_test_123",\\\\n    "amount": 100.00,\\\\n    "timestamp": "' + new Date().toISOString() + '"\\\\n  }\\\\n}\\\\n\\\\nüìä Test Results:\\\\n‚Ä¢ Status: Ready\\\\n‚Ä¢ Authentication: Valid\\\\n‚Ä¢ Payload: Generated\\\\n\\\\n‚úÖ Tester ready for use');
          break;
        case 'Open Simulator':
          alert('üé≠ API Simulator Opened\\\\n\\\\nüîß Simulation Settings:\\\\n‚Ä¢ Response Delay: 142ms\\\\n‚Ä¢ Success Rate: 99.9%\\\\n‚Ä¢ Error Types: Random\\\\n‚Ä¢ Data Volume: Realistic\\\\n\\\\nüìä Available Scenarios:\\\\n‚Ä¢ Normal operation\\\\n‚Ä¢ High load\\\\n‚Ä¢ Network issues\\\\n‚Ä¢ Server errors\\\\n‚Ä¢ Timeout conditions\\\\n\\\\nüéØ Test Cases:\\\\n‚Ä¢ Valid requests\\\\n‚Ä¢ Invalid parameters\\\\n‚Ä¢ Authentication failures\\\\n‚Ä¢ Rate limit exceeded\\\\n‚Ä¢ Server maintenance\\\\n\\\\n‚úÖ Simulator ready for testing');
          break;
        case 'Load Tester':
          alert('‚ö° Load Testing Tool Opened\\\\n\\\\nüîß Load Test Configuration:\\\\n‚Ä¢ Target Endpoint: /api/v2/clients\\\\n‚Ä¢ Concurrent Users: 100\\\\n‚Ä¢ Test Duration: 5 minutes\\\\n‚Ä¢ Ramp-up Time: 30 seconds\\\\n\\\\nüìä Test Scenarios:\\\\n‚Ä¢ Normal load\\\\n‚Ä¢ Peak load\\\\n‚Ä¢ Stress test\\\\n‚Ä¢ Endurance test\\\\n‚Ä¢ Spike test\\\\n\\\\nüìà Expected Results:\\\\n‚Ä¢ Response Time: <500ms\\\\n‚Ä¢ Error Rate: <1%\\\\n‚Ä¢ Throughput: 1000 RPS\\\\n‚Ä¢ CPU Usage: <80%\\\\n\\\\n‚ö†Ô∏è Important Notes:\\\\n‚Ä¢ Test in staging first\\\\n‚Ä¢ Monitor system resources\\\\n‚Ä¢ Have rollback plan\\\\n‚Ä¢ Notify team members\\\\n\\\\n‚úÖ Load testing tool ready');
          break;
      }
    }

    function useTemplate(templateType) {
      alert(\`üìã Using Template: \${templateType}\\\\n\\\\nüîß Template Setup Wizard\\\\n\\\\nStep 1: Template Selection\\\\n‚Ä¢ Template: \${templateType}\\\\n‚Ä¢ Version: Latest\\\\n‚Ä¢ Customization: Basic\\\\n\\\\nStep 2: Configuration\\\\n‚Ä¢ API Keys: Auto-generated\\\\n‚Ä¢ Webhooks: Configured\\\\n‚Ä¢ Database: Connected\\\\n‚Ä¢ Authentication: JWT\\\\n\\\\nStep 3: Integration Points\\\\n‚Ä¢ Payment Processing: ‚úÖ\\\\n‚Ä¢ Email Notifications: ‚úÖ\\\\n‚Ä¢ Data Synchronization: ‚úÖ\\\\n‚Ä¢ Error Handling: ‚úÖ\\\\n\\\\nStep 4: Testing\\\\n‚Ä¢ Connection test: ‚úÖ\\\\n‚Ä¢ Data flow test: ‚úÖ\\\\n‚Ä¢ Error handling: ‚úÖ\\\\n\\\\n‚è±Ô∏è Setup Time: 15-30 minutes\\\\n\\\\nüîÑ Deploying template...\\\\n\\\\n‚úÖ Template Deployed Successfully!\\\\n\\\\nüöÄ Deployment Summary:\\\\n‚Ä¢ Template: \${templateType}\\\\n‚Ä¢ Status: Active\\\\n‚Ä¢ Endpoints: 12 configured\\\\n‚Ä¢ Webhooks: 3 active\\\\n\\\\nüìä Initial Metrics:\\\\n‚Ä¢ API Calls: 0\\\\n‚Ä¢ Response Time: 142ms\\\\n‚Ä¢ Success Rate: 100%\\\\n‚Ä¢ Error Rate: 0%\\\\n\\\\nüîß Next Steps:\\\\n‚Ä¢ Configure business logic\\\\n‚Ä¢ Test with real data\\\\n‚Ä¢ Set up monitoring\\\\n‚Ä¢ Train team members\\\\n\\\\nüìö Resources:\\\\n‚Ä¢ Documentation: Available\\\\n‚Ä¢ Support: 24/7\\\\n‚Ä¢ Community: Active\\\\n‚Ä¢ Training: Scheduled\\\\n\\\\n‚úÖ Template ready for use!\`);
    }
  `;
}

function generateApiHealthContent(employee: EmployeeData): string {
  const healthMetrics = [
    { icon: 'üíö', value: 'Healthy', label: 'System Status' },
    { icon: '‚ö°', value: '142ms', label: 'Response Time' },
    { icon: 'üìä', value: '99.9%', label: 'Uptime' },
    { icon: 'üîí', value: 'A+', label: 'Security Rating' },
  ];

  const systemLogs = [
    { status: 'success', message: 'Fantasy402 API connection established' },
    { status: 'success', message: 'VIP dashboard rendered successfully' },
    { status: 'warning', message: 'Cache refresh initiated' },
    { status: 'success', message: 'All systems operational' },
    { status: 'success', message: 'Health check completed' },
  ];

  return `
    <h1>üíö System Health Dashboard</h1>
    <p>Real-time monitoring and health status for all system components:</p>

    <!-- Health Metrics -->
    <div style="background: rgba(10, 14, 39, 0.8); border-radius: 12px; padding: 2rem; margin-bottom: 2rem;">
      <h3 style="color: #40e0d0; margin-bottom: 1rem;">üè• SYSTEM HEALTH METRICS</h3>
      ${generateMetricGrid(healthMetrics)}
    </div>

    <!-- Component Status -->
    <div class="api-grid">
      <div class="api-card" style="border-left: 4px solid #22c55e;">
        <h3>üé∞ Fantasy402 Platform</h3>
        <div style="display: flex; align-items: center; gap: 1rem; margin: 1rem 0;">
          <span style="color: #22c55e; font-size: 1.5rem;">‚óè</span>
          <span>Operational</span>
        </div>
        <p>Live betting platform and sportsbook operations</p>
      </div>

      <div class="api-card" style="border-left: 4px solid #22c55e;">
        <h3>üëë VIP Management</h3>
        <div style="display: flex; align-items: center; gap: 1rem; margin: 1rem 0;">
          <span style="color: #22c55e; font-size: 1.5rem;">‚óè</span>
          <span>Operational</span>
        </div>
        <p>High-value client services and support systems</p>
      </div>

      <div class="api-card" style="border-left: 4px solid #22c55e;">
        <h3>üìä Analytics Engine</h3>
        <div style="display: flex; align-items: center; gap: 1rem; margin: 1rem 0;">
          <span style="color: #22c55e; font-size: 1.5rem;">‚óè</span>
          <span>Operational</span>
        </div>
        <p>Real-time data processing and business intelligence</p>
      </div>

      <div class="api-card" style="border-left: 4px solid #22c55e;">
        <h3>üîí Security Systems</h3>
        <div style="display: flex; align-items: center; gap: 1rem; margin: 1rem 0;">
          <span style="color: #22c55e; font-size: 1.5rem;">‚óè</span>
          <span>Operational</span>
        </div>
        <p>Enterprise security and compliance monitoring</p>
      </div>
    </div>

    <!-- System Logs -->
    <div class="status-section">
      <h3 style="color: #ff6b35;">üìã RECENT SYSTEM LOGS</h3>
      <div style="background: rgba(0, 0, 0, 0.3); border-radius: 8px; padding: 1rem; margin-top: 1rem; font-family: monospace; font-size: 0.9rem;">
        ${systemLogs.map(log => `
          <div style="color: ${log.status === 'success' ? '#22c55e' : log.status === 'warning' ? '#f59e0b' : '#ef4444'};">
            [${new Date().toLocaleTimeString()}] ${log.status === 'success' ? '‚úì' : log.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå'} ${log.message}
          </div>
        `).join('')}
      </div>
    </div>

    <div style="margin-top: 2rem; text-align: center;">
      <a href="/api" class="action-btn secondary">‚Üê Back to API</a>
      <a href="/api/status" class="action-btn secondary" style="margin-left: 1rem;">üìä System Status</a>
    </div>
  `;
}

function generateApiStatusContent(employee: EmployeeData): string {
  const statusMetrics = [
    { icon: 'üé∞', value: '1,247', label: 'VIP Clients' },
    { icon: 'üí∞', value: '$2.8M', label: 'VIP Value' },
    { icon: 'üìä', value: '96%', label: 'Retention' },
    { icon: '‚ö°', value: '24', label: 'New This Month' },
  ];

  const securityMetrics = [
    { icon: 'üîí', value: '‚úÖ', label: 'SSL Active' },
    { icon: 'üõ°Ô∏è', value: '0', label: 'Security Events' },
    { icon: 'üìã', value: '‚úÖ', label: 'Compliance' },
    { icon: '‚≠ê', value: 'A+', label: 'Security Rating' },
  ];

  return `
    <h1>üìä System Status & Performance</h1>
    <p>Comprehensive system status, performance metrics, and operational data:</p>

    <!-- VIP Management Status -->
    <div class="status-section">
      <h3 style="color: #ffd700;">üëë VIP MANAGEMENT</h3>
      ${generateMetricGrid(statusMetrics)}
    </div>

    <!-- Security & Compliance -->
    <div class="status-section">
      <h3 style="color: #40e0d0;">üîí SECURITY & COMPLIANCE</h3>
      ${generateMetricGrid(securityMetrics)}
    </div>

    <!-- System Logs Preview -->
    <div class="status-section">
      <h3 style="color: #ff6b35;">üìã RECENT SYSTEM LOGS</h3>
      <div style="background: rgba(0, 0, 0, 0.3); border-radius: 8px; padding: 1rem; margin-top: 1rem; font-family: monospace; font-size: 0.9rem;">
        <div style="color: #22c55e;">[${new Date().toLocaleTimeString()}] ‚úì Fantasy402 API connection established</div>
        <div style="color: #40e0d0;">[${new Date().toLocaleTimeString()}] ‚úì VIP dashboard rendered successfully</div>
        <div style="color: #f59e0b;">[${new Date().toLocaleTimeString()}] ‚ö†Ô∏è Cache refresh initiated</div>
        <div style="color: #22c55e;">[${new Date().toLocaleTimeString()}] ‚úì All systems operational</div>
        <div style="color: #40e0d0;">[${new Date().toLocaleTimeString()}] ‚úì Health check completed</div>
      </div>
    </div>

    <div style="margin-top: 2rem; text-align: center;">
      <a href="/api" class="action-btn secondary">‚Üê Back to API</a>
      <a href="/api/health" class="action-btn secondary" style="margin-left: 1rem;">üíö Health Check</a>
    </div>
  `;
}

function generateApiAnalyticsContent(employee: EmployeeData): string {
  const realTimeMetrics = [
    { icon: 'üëÅÔ∏è', label: 'Profile Views', value: '879', change: '+23.1%', trend: 'up' },
    { icon: 'üîß', label: 'Tool Usage', value: '244', change: '+18.7%', trend: 'up' },
    { icon: 'üì°', label: 'API Calls', value: '806', change: '+15.2%', trend: 'up' },
    { icon: '‚ö°', label: 'Response Time', value: '31ms', change: '-12.3%', trend: 'down' },
  ];

  const performanceData = [
    { metric: 'Uptime', value: '99.9%', status: 'excellent', icon: 'üü¢' },
    { metric: 'Error Rate', value: '0.1%', status: 'excellent', icon: 'üü¢' },
    { metric: 'Avg Response', value: '142ms', status: 'good', icon: 'üü°' },
    { metric: 'Success Rate', value: '99.9%', status: 'excellent', icon: 'üü¢' },
  ];

  const endpointAnalytics = [
    { endpoint: '/api/v2/clients', calls: '15.2K', avgTime: '89ms', success: '99.9%', trend: '+8.3%' },
    { endpoint: '/api/v2/bets', calls: '8.9K', avgTime: '124ms', success: '99.8%', trend: '+12.1%' },
    { endpoint: '/api/v2/analytics', calls: '12.4K', avgTime: '156ms', success: '99.7%', trend: '+15.7%' },
    { endpoint: '/api/v2/payments', calls: '4.2K', avgTime: '98ms', success: '99.9%', trend: '+6.4%' },
    { endpoint: '/api/v2/auth', calls: '892', avgTime: '67ms', success: '99.8%', trend: '+3.2%' },
  ];

  const businessMetrics = [
    { category: 'Revenue', value: '$2.8M', change: '+18.7%', icon: 'üí∞', color: '#22c55e' },
    { category: 'VIP Clients', value: '1,247', change: '+12.3%', icon: 'üëë', color: '#ffd700' },
    { category: 'Commission', value: '$12.8K', change: '+23.4%', icon: 'üíé', color: '#40e0d0' },
    { category: 'Retention', value: '96.4%', change: '+2.1%', icon: 'üéØ', color: '#f59e0b' },
  ];

  const exportOptions = [
    {
      label: 'üìä Export JSON',
      description: 'Complete analytics data in JSON format',
      onclick: `exportAnalyticsData('json'); return false;`,
    },
    {
      label: 'üìã Export CSV',
      description: 'Tabular data for spreadsheet analysis',
      onclick: `exportAnalyticsData('csv'); return false;`,
    },
    {
      label: 'üìÑ PDF Report',
      description: 'Executive summary with charts',
      onclick: `exportAnalyticsData('pdf'); return false;`,
    },
    {
      label: 'üìà Excel Dashboard',
      description: 'Interactive Excel with formulas',
      onclick: `exportAnalyticsData('excel'); return false;`,
    },
    {
      label: '‚è∞ Scheduled Reports',
      description: 'Automated daily/weekly reports',
      onclick: `configureScheduledReports(); return false;`,
    },
    {
      label: 'üìä BI Integration',
      description: 'Connect to Tableau/Power BI',
      onclick: `setupBIIntegration(); return false;`,
    },
  ];

  const timeRanges = [
    { label: 'Last Hour', value: '1h', active: false },
    { label: 'Last 24 Hours', value: '24h', active: true },
    { label: 'Last 7 Days', value: '7d', active: false },
    { label: 'Last 30 Days', value: '30d', active: false },
    { label: 'Last 90 Days', value: '90d', active: false },
  ];

  return `
    <div class="api-analytics-container">
      <style>
        ${getApiAnalyticsStyles()}
      </style>

      <div class="analytics-header">
        <div class="header-content">
          <h1>üìä Enterprise API Analytics Hub</h1>
          <p>Real-time performance monitoring, business intelligence, and comprehensive analytics</p>
          <div class="header-status">
            <div class="status-indicator online">
              <span class="pulse"></span>
              Analytics Engine Active
            </div>
            <div class="last-update">Last updated: <span id="analyticsLastUpdate">${new Date().toLocaleTimeString()}</span></div>
          </div>
        </div>
      </div>

      <!-- Time Range Selector -->
      <div class="time-range-selector">
        <h3>‚è±Ô∏è Time Range</h3>
        <div class="time-buttons">
          ${timeRanges.map(range => `
            <button class="time-btn ${range.active ? 'active' : ''}" onclick="setTimeRange('${range.value}')">
              ${range.label}
            </button>
          `).join('')}
        </div>
      </div>

      <!-- Real-Time Metrics Dashboard -->
      <div class="analytics-section">
        <div class="section-header">
          <h2>‚ö° Real-Time Performance</h2>
          <p>Live metrics and key performance indicators</p>
        </div>

        <div class="metrics-grid">
          ${realTimeMetrics.map(metric => `
            <div class="metric-card ${metric.trend}" data-metric="${metric.label.toLowerCase().replace(/\s+/g, '-')}">
              <div class="metric-header">
                <div class="metric-icon">${metric.icon}</div>
                <div class="metric-change ${metric.trend}">
                  ${metric.change}
                </div>
              </div>
              <div class="metric-value">${metric.value}</div>
              <div class="metric-label">${metric.label}</div>
              <div class="metric-sparkline" id="sparkline-${metric.label.toLowerCase().replace(/\s+/g, '-')}"></div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Performance Overview -->
      <div class="analytics-section">
        <div class="section-header">
          <h2>üèÜ System Performance</h2>
          <p>Overall system health and performance metrics</p>
        </div>

        <div class="performance-grid">
          ${performanceData.map(perf => `
            <div class="performance-card ${perf.status}">
              <div class="performance-header">
                <div class="performance-icon">${perf.icon}</div>
                <div class="performance-metric">${perf.metric}</div>
              </div>
              <div class="performance-value">${perf.value}</div>
              <div class="performance-status">${perf.status.toUpperCase()}</div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- API Endpoint Analytics -->
      <div class="analytics-section">
        <div class="section-header">
          <h2>üîå API Endpoint Performance</h2>
          <p>Detailed analytics for each API endpoint</p>
        </div>

        <div class="endpoints-table">
          <div class="table-header">
            <div class="endpoint-col">Endpoint</div>
            <div class="calls-col">Calls</div>
            <div class="time-col">Avg Time</div>
            <div class="success-col">Success Rate</div>
            <div class="trend-col">Trend</div>
          </div>
          ${endpointAnalytics.map(endpoint => `
            <div class="table-row">
              <div class="endpoint-col">
                <code>${endpoint.endpoint}</code>
              </div>
              <div class="calls-col">${endpoint.calls}</div>
              <div class="time-col">${endpoint.avgTime}</div>
              <div class="success-col">${endpoint.success}</div>
              <div class="trend-col">
                <span class="trend ${endpoint.trend.startsWith('+') ? 'positive' : 'negative'}">${endpoint.trend}</span>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Business Intelligence -->
      <div class="analytics-section">
        <div class="section-header">
          <h2>üíº Business Intelligence</h2>
          <p>Revenue, client metrics, and business performance</p>
        </div>

        <div class="business-grid">
          ${businessMetrics.map(biz => `
            <div class="business-card">
              <div class="business-icon" style="color: ${biz.color}">${biz.icon}</div>
              <div class="business-content">
                <div class="business-value" style="color: ${biz.color}">${biz.value}</div>
                <div class="business-label">${biz.category}</div>
                <div class="business-change ${biz.change.startsWith('+') ? 'positive' : 'negative'}">${biz.change}</div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>

      <!-- Advanced Analytics -->
      <div class="analytics-section">
        <div class="section-header">
          <h2>üî¨ Advanced Analytics</h2>
          <p>Predictive insights and custom reporting</p>
        </div>

        <div class="advanced-analytics">
          <div class="analytics-tools">
            <div class="tool-card">
              <h3>üéØ Predictive Analytics</h3>
              <p>AI-powered forecasting and trend analysis</p>
              <div class="tool-status active">‚úÖ Active</div>
              <button class="tool-btn" onclick="openPredictiveAnalytics()">View Insights</button>
            </div>

            <div class="tool-card">
              <h3>üìä Custom Dashboards</h3>
              <p>Build personalized analytics dashboards</p>
              <div class="tool-status available">‚óã Available</div>
              <button class="tool-btn" onclick="createCustomDashboard()">Create Dashboard</button>
            </div>

            <div class="tool-card">
              <h3>üîç Deep Analytics</h3>
              <p>Detailed performance and usage analysis</p>
              <div class="tool-status active">‚úÖ Active</div>
              <button class="tool-btn" onclick="openDeepAnalytics()">Deep Dive</button>
            </div>

            <div class="tool-card">
              <h3>üìà Comparative Analysis</h3>
              <p>Compare performance across time periods</p>
              <div class="tool-status available">‚óã Available</div>
              <button class="tool-btn" onclick="openComparativeAnalysis()">Compare Data</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Data Export & Integration -->
      <div class="analytics-section">
        <div class="section-header">
          <h2>üì§ Data Export & Integration</h2>
          <p>Export data and integrate with external tools</p>
        </div>

        <div class="export-grid">
          ${exportOptions.map(option => `
            <div class="export-card">
              <div class="export-content">
                <h3>${option.label}</h3>
                <p>${option.description}</p>
              </div>
              <button class="export-btn" onclick="${option.onclick}">Export</button>
            </div>
          `).join('')}
        </div>
      </div>

      <div class="analytics-navigation">
        <a href="/api" class="nav-btn secondary">
          <span class="btn-icon">‚Üê</span>
          Back to API Hub
        </a>
        <a href="/api/monitoring" class="nav-btn primary">
          <span class="btn-icon">üìä</span>
          Live Monitoring
        </a>
        <a href="/tools/analytics" class="nav-btn accent">
          <span class="btn-icon">üìà</span>
          Full Analytics Suite
        </a>
      </div>
    </div>

    <script>
      ${getApiAnalyticsScripts()}
    </script>
  `;
}

function getApiAnalyticsStyles(): string {
  return `
    .api-analytics-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
      min-height: 100vh;
    }

    /* Header Section */
    .analytics-header {
      background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 107, 53, 0.1));
      border: 2px solid #ffd700;
      border-radius: 20px;
      padding: 3rem;
      margin-bottom: 3rem;
      position: relative;
      overflow: hidden;
    }

    .analytics-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 6px;
      background: linear-gradient(90deg, #ffd700, #ff6b35, #40e0d0, #ffd700);
      background-size: 200% 100%;
      animation: gradient-shift 3s ease-in-out infinite;
    }

    .header-content h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1;
    }

    .header-content p {
      color: #a0a9b8;
      font-size: 1.2rem;
      margin-bottom: 2rem;
    }

    .header-status {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: #22c55e;
      font-weight: 600;
    }

    .pulse {
      width: 10px;
      height: 10px;
      background: #22c55e;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    .last-update {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    /* Time Range Selector */
    .time-range-selector {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 2rem;
      margin-bottom: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .time-range-selector h3 {
      color: #e0e6ed;
      margin-bottom: 1rem;
    }

    .time-buttons {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .time-btn {
      padding: 0.75rem 1.5rem;
      border: 2px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.05);
      color: #e0e6ed;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .time-btn:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    .time-btn.active {
      background: linear-gradient(135deg, #40e0d0, #22c55e);
      color: white;
      border-color: #40e0d0;
    }

    /* Section Headers */
    .analytics-section {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .section-header h2 {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .section-header p {
      color: #a0a9b8;
      font-size: 1rem;
    }

    /* Real-Time Metrics */
    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .metric-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(64, 224, 208, 0.3);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .metric-card:hover {
      transform: translateY(-5px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .metric-card.up {
      border-left: 4px solid #22c55e;
    }

    .metric-card.down {
      border-left: 4px solid #ef4444;
    }

    .metric-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .metric-icon {
      font-size: 2rem;
    }

    .metric-change {
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .metric-change.up {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .metric-change.down {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    .metric-value {
      font-size: 2.5rem;
      font-weight: 800;
      color: #40e0d0;
      margin-bottom: 0.5rem;
    }

    .metric-label {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .metric-sparkline {
      height: 30px;
      margin-top: 1rem;
      background: rgba(64, 224, 208, 0.1);
      border-radius: 4px;
      position: relative;
    }

    /* Performance Grid */
    .performance-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .performance-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      border: 1px solid rgba(64, 224, 208, 0.3);
      transition: all 0.3s ease;
    }

    .performance-card:hover {
      transform: translateY(-2px);
      border-color: #40e0d0;
      box-shadow: 0 8px 25px rgba(64, 224, 208, 0.2);
    }

    .performance-card.excellent {
      border-color: #22c55e;
      background: rgba(34, 197, 94, 0.05);
    }

    .performance-card.good {
      border-color: #f59e0b;
      background: rgba(245, 158, 11, 0.05);
    }

    .performance-header {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .performance-icon {
      font-size: 2rem;
    }

    .performance-metric {
      color: #e0e6ed;
      font-weight: 600;
    }

    .performance-value {
      font-size: 2rem;
      font-weight: 800;
      color: #40e0d0;
      margin-bottom: 0.5rem;
    }

    .performance-status {
      color: #22c55e;
      font-size: 0.8rem;
      font-weight: 600;
    }

    /* Endpoints Table */
    .endpoints-table {
      margin-top: 2rem;
      border-radius: 8px;
      overflow: hidden;
      border: 1px solid rgba(64, 224, 208, 0.3);
    }

    .table-header {
      display: grid;
      grid-template-columns: 3fr 1fr 1fr 1fr 1fr;
      gap: 1rem;
      padding: 1rem;
      background: rgba(64, 224, 208, 0.1);
      border-bottom: 1px solid rgba(64, 224, 208, 0.3);
      font-weight: 600;
      color: #40e0d0;
    }

    .table-row {
      display: grid;
      grid-template-columns: 3fr 1fr 1fr 1fr 1fr;
      gap: 1rem;
      padding: 1rem;
      border-bottom: 1px solid rgba(64, 224, 208, 0.1);
      transition: all 0.2s ease;
    }

    .table-row:hover {
      background: rgba(64, 224, 208, 0.05);
    }

    .table-row:last-child {
      border-bottom: none;
    }

    .endpoint-col code {
      background: rgba(0, 0, 0, 0.3);
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      color: #40e0d0;
      font-size: 0.9rem;
    }

    .calls-col, .time-col, .success-col {
      text-align: center;
      font-weight: 600;
      color: #e0e6ed;
    }

    .trend-col {
      text-align: center;
    }

    .trend {
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .trend.positive {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .trend.negative {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    /* Business Grid */
    .business-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .business-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(255, 215, 0, 0.3);
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .business-card:hover {
      transform: translateY(-2px);
      border-color: #ffd700;
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.2);
    }

    .business-icon {
      font-size: 2.5rem;
    }

    .business-content {
      flex: 1;
    }

    .business-value {
      font-size: 1.8rem;
      font-weight: 800;
      margin-bottom: 0.25rem;
    }

    .business-label {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .business-change {
      font-size: 0.8rem;
      font-weight: 600;
      padding: 0.25rem 0.5rem;
      border-radius: 8px;
    }

    .business-change.positive {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .business-change.negative {
      background: rgba(239, 68, 68, 0.2);
      color: #ef4444;
    }

    /* Advanced Analytics */
    .advanced-analytics {
      margin-top: 2rem;
    }

    .analytics-tools {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .tool-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(59, 130, 246, 0.3);
      transition: all 0.3s ease;
      text-align: center;
    }

    .tool-card:hover {
      transform: translateY(-2px);
      border-color: #3b82f6;
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.2);
    }

    .tool-card h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .tool-card p {
      color: #a0a9b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }

    .tool-status {
      font-size: 0.8rem;
      font-weight: 600;
      margin-bottom: 1rem;
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      display: inline-block;
    }

    .tool-status.active {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .tool-status.available {
      background: rgba(245, 158, 11, 0.2);
      color: #f59e0b;
    }

    .tool-btn {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .tool-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
    }

    /* Export Grid */
    .export-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .export-card {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      padding: 1.5rem;
      border: 1px solid rgba(168, 85, 247, 0.3);
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .export-card:hover {
      transform: translateY(-2px);
      border-color: #a855f7;
      box-shadow: 0 8px 25px rgba(168, 85, 247, 0.2);
    }

    .export-content {
      flex: 1;
    }

    .export-content h3 {
      color: #e0e6ed;
      margin-bottom: 0.5rem;
    }

    .export-content p {
      color: #a0a9b8;
      font-size: 0.9rem;
    }

    .export-btn {
      background: linear-gradient(135deg, #a855f7, #7c3aed);
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .export-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(168, 85, 247, 0.3);
    }

    /* Navigation */
    .analytics-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      flex-wrap: wrap;
      gap: 1rem;
    }

    .nav-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      transition: all 0.3s ease;
    }

    .nav-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e6ed;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .nav-btn.secondary:hover {
      border-color: #40e0d0;
      color: #40e0d0;
    }

    .nav-btn.primary {
      background: linear-gradient(135deg, #ffd700, #ff6b35);
      color: #000;
    }

    .nav-btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255, 215, 0, 0.3);
    }

    .nav-btn.accent {
      background: linear-gradient(135deg, #ff6b35, #a855f7);
      color: white;
    }

    .nav-btn.accent:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(168, 85, 247, 0.3);
    }

    /* Animations */
    @keyframes gradient-shift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .api-analytics-container {
        padding: 1rem;
      }

      .header-content h1 {
        font-size: 2rem;
      }

      .header-status {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
      }

      .metrics-grid,
      .performance-grid,
      .business-grid,
      .analytics-tools,
      .export-grid {
        grid-template-columns: 1fr;
      }

      .endpoints-table {
        display: block;
        overflow-x: auto;
      }

      .table-header,
      .table-row {
        grid-template-columns: 1fr;
        gap: 0.5rem;
      }

      .table-header {
        display: none;
      }

      .table-row {
        padding: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        margin-bottom: 1rem;
      }

      .analytics-navigation {
        flex-direction: column;
        gap: 1rem;
      }

      .time-buttons {
        flex-direction: column;
      }

      .time-btn {
        text-align: center;
      }
    }
  `;
}

function getApiAnalyticsScripts(): string {
  return `
    // Enterprise API Analytics Hub - Interactive Features
    document.addEventListener('DOMContentLoaded', function() {
      initializeApiAnalytics();
    });

    function initializeApiAnalytics() {
      // Start live updates
      startAnalyticsUpdates();

      // Initialize sparklines
      initializeSparklines();

      // Setup time range selector
      setupTimeRangeSelector();

      // Setup event listeners
      setupAnalyticsEventListeners();
    }

    function startAnalyticsUpdates() {
      // Update metrics every 30 seconds
      setInterval(() => {
        updateLiveMetrics();
        updateLastUpdated();
      }, 30000);

      // Update endpoint analytics every 60 seconds
      setInterval(() => {
        updateEndpointAnalytics();
      }, 60000);
    }

    function updateLiveMetrics() {
      const metrics = document.querySelectorAll('.metric-card');
      metrics.forEach(metric => {
        // Add subtle animation to indicate update
        metric.style.animation = 'pulse 0.5s ease-in-out';
        setTimeout(() => {
          metric.style.animation = '';
        }, 500);
      });
    }

    function updateLastUpdated() {
      const lastUpdatedElement = document.getElementById('analyticsLastUpdate');
      if (lastUpdatedElement) {
        lastUpdatedElement.textContent = new Date().toLocaleTimeString();
      }
    }

    function updateEndpointAnalytics() {
      // Simulate endpoint data updates
      const endpointRows = document.querySelectorAll('.table-row');
      endpointRows.forEach(row => {
        // Add subtle animation
        row.style.animation = 'pulse 0.3s ease-in-out';
        setTimeout(() => {
          row.style.animation = '';
        }, 300);
      });
    }

    function initializeSparklines() {
      const sparklines = document.querySelectorAll('.metric-sparkline');
      sparklines.forEach((sparkline, index) => {
        const data = generateSparklineData(index);
        renderSparkline(sparkline, data);
      });
    }

    function generateSparklineData(index) {
      // Generate sample data for sparklines
      const baseValue = 50;
      const data = [];
      const trend = index % 2 === 0 ? 1 : -1; // Alternate trends

      for (let i = 0; i < 20; i++) {
        const variation = (Math.random() - 0.5) * 10;
        const trendEffect = trend * (i * 0.5);
        data.push(Math.max(0, Math.min(100, baseValue + variation + trendEffect)));
      }

      return data;
    }

    function renderSparkline(container, data) {
      const maxValue = Math.max(...data);
      const minValue = Math.min(...data);
      const range = maxValue - minValue;

      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.setAttribute('width', '100%');
      svg.setAttribute('height', '100%');
      svg.setAttribute('viewBox', '0 0 100 30');

      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      let pathData = 'M0,30';

      data.forEach((value, index) => {
        const x = (index / (data.length - 1)) * 100;
        const y = 30 - ((value - minValue) / range) * 25;
        pathData += ' L' + x + ',' + y;
      });

      pathData += ' L100,30 Z';
      path.setAttribute('d', pathData);
      path.setAttribute('fill', 'rgba(64, 224, 208, 0.2)');
      path.setAttribute('stroke', '#40e0d0');
      path.setAttribute('stroke-width', '1.5');

      svg.appendChild(path);
      container.appendChild(svg);
    }

    function setupTimeRangeSelector() {
      const timeButtons = document.querySelectorAll('.time-btn');
      timeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          timeButtons.forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');

          // Update analytics based on selected time range
          const timeRange = this.getAttribute('onclick').match(/'([^']+)'/)[1];
          updateAnalyticsForTimeRange(timeRange);
        });
      });
    }

    function setTimeRange(timeRange) {
      // This function is called from onclick handlers
      updateAnalyticsForTimeRange(timeRange);
    }

    function updateAnalyticsForTimeRange(timeRange) {
      // Simulate data update based on time range
      showNotification('Updating analytics for ' + timeRange + '...', 'info');

      setTimeout(() => {
        showNotification('Analytics updated for ' + timeRange, 'success');
        updateLiveMetrics();
      }, 1000);
    }

    function setupAnalyticsEventListeners() {
      // Tool buttons
      const toolButtons = document.querySelectorAll('.tool-btn');
      toolButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          const action = this.getAttribute('onclick');
          if (action.includes('openPredictiveAnalytics')) {
            openPredictiveAnalytics();
          } else if (action.includes('createCustomDashboard')) {
            createCustomDashboard();
          } else if (action.includes('openDeepAnalytics')) {
            openDeepAnalytics();
          } else if (action.includes('openComparativeAnalysis')) {
            openComparativeAnalysis();
          }
        });
      });
    }

    // Global functions for button onclick handlers
    function exportAnalyticsData(format) {
      const messages = {
        json: 'üìä JSON Export Complete\\\\n‚úÖ Analytics data exported\\\\nüìÅ File: analytics_' + new Date().toISOString().split('T')[0] + '.json\\\\nüìç Location: Downloads folder',
        csv: 'üìã CSV Export Complete\\\\n‚úÖ Analytics data exported\\\\nüìÅ File: analytics_' + new Date().toISOString().split('T')[0] + '.csv\\\\nüìç Location: Downloads folder',
        pdf: 'üìÑ PDF Report Generated\\\\n‚úÖ Executive summary created\\\\nüìÅ File: analytics_report_' + new Date().toISOString().split('T')[0] + '.pdf\\\\nüìç Location: Downloads folder',
        excel: 'üìà Excel Export Complete\\\\n‚úÖ Interactive dashboard exported\\\\nüìÅ File: fantasy402_analytics_' + new Date().toISOString().split('T')[0] + '.xlsx\\\\nüìç Location: Downloads folder'
      };

      alert(messages[format] || 'Export completed successfully!');
      return false;
    }

    function configureScheduledReports() {
      alert('‚è∞ Scheduled Reports Configuration\\\\n\\\\n‚úÖ Configure automated reports:\\\\n‚Ä¢ Daily performance summary\\\\n‚Ä¢ Weekly business analytics\\\\n‚Ä¢ Monthly executive reports\\\\n‚Ä¢ Custom frequency options\\\\n\\\\nüìß Email delivery settings\\\\nüîî Notification preferences\\\\nüìÅ Export format selection');
      return false;
    }

    function setupBIIntegration() {
      alert('üìä BI Integration Setup\\\\n\\\\nüîó Connect with popular BI tools:\\\\n‚Ä¢ Tableau - Real-time dashboards\\\\n‚Ä¢ Power BI - Microsoft integration\\\\n‚Ä¢ Looker - Custom visualizations\\\\n‚Ä¢ Google Data Studio - Free option\\\\n\\\\n‚ö° Live data streaming\\\\nüîÑ Automatic sync\\\\nüìà Custom metrics');
      return false;
    }

    function openPredictiveAnalytics() {
      alert('üéØ Predictive Analytics Dashboard\\\\n\\\\nüß† AI-Powered Insights:\\\\n‚Ä¢ Revenue forecasting\\\\n‚Ä¢ Client behavior prediction\\\\n‚Ä¢ Risk assessment\\\\n‚Ä¢ Performance optimization\\\\n\\\\nüìä Confidence levels: 87-95%\\\\n‚ö° Real-time updates\\\\nüéØ Actionable recommendations');
    }

    function createCustomDashboard() {
      alert('üìä Custom Dashboard Builder\\\\n\\\\nüé® Create personalized views:\\\\n‚Ä¢ Drag & drop widgets\\\\n‚Ä¢ Custom metric combinations\\\\n‚Ä¢ Interactive filters\\\\n‚Ä¢ Real-time data\\\\n\\\\nüíæ Save & share dashboards\\\\nüì± Mobile-responsive design\\\\nüîÑ Auto-refresh options');
    }

    function openDeepAnalytics() {
      alert('üîç Deep Analytics Explorer\\\\n\\\\nüî¨ Advanced Analysis Tools:\\\\n‚Ä¢ Detailed performance metrics\\\\n‚Ä¢ Client segmentation analysis\\\\n‚Ä¢ Conversion funnel tracking\\\\n‚Ä¢ A/B testing results\\\\n\\\\nüìà Statistical significance\\\\nüéØ Correlation analysis\\\\n‚ö° Real-time insights');
    }

    function openComparativeAnalysis() {
      alert('üìà Comparative Analysis Tool\\\\n\\\\n‚öñÔ∏è Compare performance across:\\\\n‚Ä¢ Time periods (day/week/month)\\\\n‚Ä¢ Client segments\\\\n‚Ä¢ Geographic regions\\\\n‚Ä¢ Product categories\\\\n\\\\nüìä Visual comparisons\\\\nüìà Trend analysis\\\\nüéØ Performance benchmarks');
    }

    function showNotification(message, type) {
      if (type === undefined) type = 'info';

      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification ' + type;
      notification.innerHTML = '<div class="notification-content"><span class="notification-icon">' +
        (type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è') +
        '</span><span class="notification-message">' + message + '</span></div><button class="notification-close" onclick="this.parentElement.remove()">√ó</button>';

      // Style the notification
      const backgroundColor = type === 'success' ? 'linear-gradient(135deg, #22c55e, #16a34a)' :
                             type === 'error' ? 'linear-gradient(135deg, #ef4444, #dc2626)' :
                             'linear-gradient(135deg, #3b82f6, #1d4ed8)';

      notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: ' + backgroundColor +
        '; color: white; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3); z-index: 10000; max-width: 400px; font-weight: 600; animation: slideInRight 0.3s ease-out;';

      // Add to page
      document.body.appendChild(notification);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.style.animation = 'slideOutRight 0.3s ease-in';
          setTimeout(() => notification.remove(), 300);
        }
      }, 5000);
    }

    // CSS animations for notifications
    const notificationStyles = \`
      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    \`;

    // Inject notification styles
    const styleSheet = document.createElement('style');
    styleSheet.textContent = notificationStyles;
    document.head.appendChild(styleSheet);

    // Enhanced API Explorer Functions
    function initializeApiExplorer() {
      // Add click handlers for endpoint expansion
      document.querySelectorAll('.endpoint-summary').forEach(summary => {
        summary.addEventListener('click', function() {
          const endpoint = this.closest('.explorer-endpoint');
          const details = endpoint.querySelector('.endpoint-details-explorer');
          const isExpanded = details.style.display !== 'none';

          // Hide all other expanded details
          document.querySelectorAll('.endpoint-details-explorer').forEach(detail => {
            detail.style.display = 'none';
          });

          // Toggle current endpoint
          details.style.display = isExpanded ? 'none' : 'block';

          // Update expand button
          const btn = this.querySelector('.expand-btn');
          if (btn) {
            btn.textContent = isExpanded ? '‚ñº' : '‚ñ≤';
          }
        });
      });
    }

    function initializeEndpointToggler() {
      // Add click handlers for expand buttons
      document.querySelectorAll('.expand-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const endpoint = this.closest('.explorer-endpoint');
          const details = endpoint.querySelector('.endpoint-details-explorer');
          const isExpanded = details.style.display !== 'none';

          details.style.display = isExpanded ? 'none' : 'block';
          this.textContent = isExpanded ? '‚ñº' : '‚ñ≤';
        });
      });
    }

    function setupSearchAndFilter() {
      const searchInput = document.getElementById('apiSearch');
      const methodFilter = document.getElementById('methodFilter');

      if (searchInput) {
        searchInput.addEventListener('input', function() {
          filterEndpoints(this.value, methodFilter ? methodFilter.value : '');
        });
      }

      if (methodFilter) {
        methodFilter.addEventListener('change', function() {
          filterEndpoints(searchInput ? searchInput.value : '', this.value);
        });
      }
    }

    function filterEndpoints(searchTerm, methodFilter) {
      const endpoints = document.querySelectorAll('.explorer-endpoint');

      endpoints.forEach(endpoint => {
        const method = endpoint.getAttribute('data-method');
        const path = endpoint.getAttribute('data-path');
        const matchesSearch = !searchTerm ||
          path.toLowerCase().includes(searchTerm.toLowerCase()) ||
          method.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesMethod = !methodFilter || method === methodFilter;

        endpoint.style.display = matchesSearch && matchesMethod ? 'block' : 'none';
      });

      // Update stats
      const visibleEndpoints = document.querySelectorAll('.explorer-endpoint[style*="display: block"], .explorer-endpoint:not([style*="display"])');
      const statElement = document.querySelector('.stat-item:first-child');
      if (statElement) {
        statElement.textContent = 'üìä ' + visibleEndpoints.length + ' endpoints';
      }
    }

    function toggleEndpoint(index) {
      const details = document.getElementById('endpoint-' + index);
      const btn = document.querySelector('[onclick="toggleEndpoint(' + index + ')"]');

      if (details) {
        const isExpanded = details.style.display !== 'none';
        details.style.display = isExpanded ? 'none' : 'block';

        if (btn) {
          btn.textContent = isExpanded ? '‚ñº' : '‚ñ≤';
        }
      }
    }

    function testEndpoint(path, method) {
      showNotification(\`üß™ Testing \${method} \${path}...\`, 'info');

      setTimeout(() => {
        const responses = ['200', '201', '400', '401', '429'];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        const isSuccess = randomResponse.startsWith('2');

        showNotification(
          \`Test Result: \${randomResponse} \${isSuccess ? '‚úÖ Success' : '‚ùå Error'}\\\nEndpoint: \${path}\\\nMethod: \${method}\`,
          isSuccess ? 'success' : 'error'
        );
      }, 1500);
    }

    function copyEndpoint(path) {
      navigator.clipboard.writeText(path).then(() => {
        showNotification(\`üìã Copied to clipboard: \${path}\`, 'success');
      }).catch(err => {
        showNotification('Failed to copy endpoint URL', 'error');
      });
    }

    // Enhanced Code Copy Functions
    function copyToClipboard(element) {
      const codeBlock = element.closest('.code-block');
      const code = codeBlock.querySelector('code, pre');
      if (code) {
        navigator.clipboard.writeText(code.textContent || code.innerText).then(() => {
          showNotification('üìã Code copied to clipboard!', 'success');
        }).catch(err => {
          showNotification('Failed to copy code', 'error');
        });
      }
    }

    // Enhanced Testing Functions
    function executeTest() {
      const method = document.getElementById('test-method').value;
      const endpoint = document.getElementById('test-endpoint').value;
      const headers = document.getElementById('test-headers').value;
      const body = document.getElementById('test-body').value;
      const output = document.getElementById('test-output');

      if (!endpoint) {
        showNotification('Please enter an endpoint URL', 'error');
        return;
      }

      showNotification(\`üîÑ Executing \${method} request to \${endpoint}...\`, 'info');

      // Simulate API call
      setTimeout(() => {
        const mockResponse = generateMockResponse(method, endpoint);
        output.innerHTML = \`<pre><code>\${mockResponse}</code></pre>\`;

        showNotification('‚úÖ API test completed!', 'success');
      }, 2000);
    }

    function generateMockResponse(method, endpoint) {
      const responses = {
        'GET /api/v2/clients': \`{
  "success": true,
  "data": {
    "clients": [
      {
        "id": "vip_123",
        "name": "Diamond Club Member",
        "status": "active",
        "balance": 50000.00
      }
    ],
    "pagination": {
      "total": 1,
      "page": 1,
      "limit": 50
    }
  },
  "timestamp": "\${new Date().toISOString()}"
}\`,
        'POST /api/v2/bets': \`{
  "success": true,
  "data": {
    "bet_id": "bet_\${Math.random().toString(36).substr(2, 9)}",
    "client_id": "vip_123",
    "amount": 500.00,
    "odds": 2.5,
    "status": "placed",
    "timestamp": "\${new Date().toISOString()}"
  },
  "timestamp": "\${new Date().toISOString()}"
}\`,
        'GET /api/v2/analytics': \`{
  "success": true,
  "data": {
    "total_clients": 1247,
    "active_bets": 89,
    "monthly_revenue": 2800000.00,
    "win_rate": 0.964,
    "avg_response_time": "2.3s",
    "period": "2024-01"
  },
  "timestamp": "\${new Date().toISOString()}"
}\`
      };

      return responses[\`\${method} \${endpoint}\`] || \`{
  "success": false,
  "error": "Endpoint not found",
  "message": "The requested endpoint does not exist or is not available for testing",
  "timestamp": "\${new Date().toISOString()}"
}\`;
    }

    // Enhanced Authentication Tab Switching
    function switchAuthTab(tab) {
      // Hide all auth content
      document.querySelectorAll('.auth-content').forEach(content => {
        content.classList.remove('active');
      });

      // Remove active class from all tabs
      document.querySelectorAll('.auth-tab').forEach(tabBtn => {
        tabBtn.classList.remove('active');
      });

      // Show selected tab content
      const selectedContent = document.getElementById(tab + '-auth');
      const selectedTab = document.querySelector('[onclick="switchAuthTab(\'' + tab + '\')"]');

      if (selectedContent) {
        selectedContent.classList.add('active');
      }
      if (selectedTab) {
        selectedTab.classList.add('active');
      }
    }

    // Enhanced API Overview Functions
    function initializeMetricsDashboard() {
      // Add click handlers for metric cards
      document.querySelectorAll('.metric-card').forEach(card => {
        card.addEventListener('click', function() {
          const metricLabel = this.querySelector('.metric-label').textContent;
          showMetricDetails(metricLabel);
        });
      });

      // Auto-refresh toggle
      const autoRefreshToggle = document.getElementById('autoRefresh');
      if (autoRefreshToggle) {
        autoRefreshToggle.addEventListener('change', function() {
          toggleAutoRefresh(this.checked);
        });
      }
    }

    function refreshMetrics() {
      showNotification('üîÑ Refreshing metrics...', 'info');

      // Simulate refresh
      setTimeout(() => {
        // Add subtle animation to all metric cards
        document.querySelectorAll('.metric-card').forEach(card => {
          card.style.animation = 'pulse 0.5s ease-in-out';
          setTimeout(() => {
            card.style.animation = '';
          }, 500);
        });

        showNotification('‚úÖ Metrics refreshed successfully!', 'success');
      }, 1000);
    }

    function toggleAutoRefresh(enabled) {
      if (enabled) {
        showNotification('üîÑ Auto-refresh enabled', 'info');
      } else {
        showNotification('‚è∏Ô∏è Auto-refresh disabled', 'info');
      }
    }

    function showMetricDetails(metricLabel) {
      const details = {
        'Total APIs': '247 APIs across 6 categories with 99.9% uptime',
        'Active Calls': '47.2K API calls in the last 24 hours',
        'Success Rate': '99.9% success rate with comprehensive error handling',
        'Avg Response': '142ms average response time with optimization'
      };

      alert('üìä ' + metricLabel + ' Details\n\n' + (details[metricLabel] || 'Detailed metrics information'));
    }

    function initializePerformanceChart() {
      // Chart period buttons
      document.querySelectorAll('.chart-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.chart-btn').forEach(b => b.classList.remove('active'));
          // Add active class to clicked button
          this.classList.add('active');

          const period = this.textContent.toLowerCase();
          setChartPeriod(period);
        });
      });
    }

    function setChartPeriod(period) {
      const chartContainer = document.querySelector('.chart-placeholder');
      if (chartContainer) {
        chartContainer.innerHTML = '<div class="placeholder-icon">üìà</div><div class="placeholder-text">Loading ' + period.toUpperCase() + ' performance data...</div><div class="loading-spinner"></div>';

        // Simulate data loading
        setTimeout(() => {
          chartContainer.innerHTML = '<div class="placeholder-icon">üìä</div><div class="placeholder-text">' + period.toUpperCase() + ' chart data loaded!</div><div class="chart-data-summary"><div class="data-point">Peak: 99.9%</div><div class="data-point">Avg: 99.7%</div><div class="data-point">Min: 98.2%</div></div>';
        }, 2000);
      }
    }

    function initializeCategoryNavigation() {
      // Enhanced category card interactions
      document.querySelectorAll('.api-category-card').forEach(card => {
        card.addEventListener('click', function() {
          const title = this.querySelector('.category-title').textContent;
          navigateToCategory(title.toLowerCase().replace(/\s+/g, '_'));
        });
      });

      // Quick action buttons
      document.querySelectorAll('.action-btn.small').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const action = this.textContent.toLowerCase().replace(/\s+/g, '_');
          quickAction(action);
        });
      });

      // Link buttons
      document.querySelectorAll('.link-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const action = this.textContent.toLowerCase().replace(/\s+/g, '_');
          quickAction(action);
        });
      });
    }

    function navigateToCategory(endpoint) {
      showNotification('üöÄ Navigating to ' + endpoint.replace('_', ' ') + '...', 'info');
      setTimeout(() => {
        showNotification('‚úÖ ' + endpoint.replace('_', ' ') + ' loaded successfully!', 'success');
        // In a real app, this would navigate to the category page
      }, 1000);
    }

    function quickAction(action) {
      const actions = {
        'quick_access': 'Opening quick access panel...',
        'docs': 'Opening documentation...',
        'metrics': 'Loading metrics dashboard...',
        'alerts': 'Checking system alerts...'
      };

      showNotification(actions[action] || 'Action executed!', 'info');

      setTimeout(() => {
        showNotification('‚úÖ Action completed successfully!', 'success');
      }, 1500);
    }

    function showNotification(message, type) {
      if (type === undefined) type = 'info';

      // Create notification element
      const notification = document.createElement('div');
      notification.className = 'notification ' + type;
      notification.innerHTML = '<div class="notification-content"><span class="notification-icon">' +
        (type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è') +
        '</span><span class="notification-message">' + message + '</span></div><button class="notification-close" onclick="this.parentElement.remove()">√ó</button>';

      // Style the notification
      const backgroundColor = type === 'success' ? 'linear-gradient(135deg, #22c55e, #16a34a)' :
                             type === 'error' ? 'linear-gradient(135deg, #ef4444, #dc2626)' :
                             'linear-gradient(135deg, #3b82f6, #1d4ed8)';

      notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: ' + backgroundColor +
        '; color: white; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3); z-index: 10000; max-width: 400px; font-weight: 600; animation: slideInRight 0.3s ease-out;';

      // Add to page
      document.body.appendChild(notification);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.style.animation = 'slideOutRight 0.3s ease-in';
          setTimeout(() => notification.remove(), 300);
        }
      }, 5000);
    }

    // Add CSS animations for notifications
    const notificationStyles = \`
      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    \`;

    // Inject notification styles
    const styleSheet = document.createElement('style');
    styleSheet.textContent = notificationStyles;
    document.head.appendChild(styleSheet);
  `;
}
