name: Security Scan
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan every Monday at 6 AM UTC
    - cron: '0 6 * * 1'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run enhanced security scan
        run: bun run security-scan:enhanced
        env:
          CI: true
          FIRE22_SECURITY_LEVEL: ${{ github.ref == 'refs/heads/main' && 'fatal' || 'warn' }}
          FIRE22_CI_MODE: true

      - name: Run dependency audit
        run: bun run security-audit

      - name: Generate security report
        run: |
          bun run scripts/generate-security-report.ts
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dependencies scanned" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Vulnerabilities checked" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Licenses validated" >> $GITHUB_STEP_SUMMARY

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            logs/security/
            security-report.json

      - name: Security scan summary
        if: always()
        run: |
          if [ -f "logs/security/latest-scan.json" ]; then
            echo "üìä Security Scan Summary:" >> $GITHUB_STEP_SUMMARY
            cat logs/security/latest-scan.json | jq -r '"- üì¶ Packages scanned: " + (.results.summary.totalPackages | tostring)' >> $GITHUB_STEP_SUMMARY
            cat logs/security/latest-scan.json | jq -r '"- üö® Critical issues: " + (.results.summary.fatalIssues | tostring)' >> $GITHUB_STEP_SUMMARY
            cat logs/security/latest-scan.json | jq -r '"- ‚ö†Ô∏è Warnings: " + (.results.summary.warningIssues | tostring)' >> $GITHUB_STEP_SUMMARY
            cat logs/security/latest-scan.json | jq -r '"- üìà Risk score: " + (.results.summary.riskScore // "N/A" | tostring)' >> $GITHUB_STEP_SUMMARY
          fi

  dependency-analysis:
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Analyze dependencies
        run: bun run deps-priority-demo

      - name: Bundle analysis
        run: bun run analyze:bundle

  security-gate:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-analysis]
    if: always()

    steps:
      - name: Security gate check
        run: |
          # Check if security scan passed
          if [ -f "logs/security/latest-scan.json" ]; then
            FATAL_ISSUES=$(cat logs/security/latest-scan.json | jq '.results.summary.fatalIssues')
            WARNINGS=$(cat logs/security/latest-scan.json | jq '.results.summary.warningIssues')

            if [ "$FATAL_ISSUES" -gt 0 ]; then
              echo "üö´ SECURITY GATE FAILED: $FATAL_ISSUES critical vulnerabilities found"
              exit 1
            fi

            if [ "$WARNINGS" -gt 10 ]; then
              echo "‚ö†Ô∏è SECURITY GATE WARNING: $WARNINGS security warnings found"
              echo "Consider addressing warnings before merging"
            fi

            echo "‚úÖ SECURITY GATE PASSED"
          else
            echo "‚ö†Ô∏è No security scan results found"
            exit 1
          fi
